<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>牵风散步の雲</title>
  
  
  <link href="https://kiritoabc.github.io/atom.xml" rel="self"/>
  
  <link href="https://kiritoabc.github.io/"/>
  <updated>2024-03-08T17:19:41.433Z</updated>
  <id>https://kiritoabc.github.io/</id>
  
  <author>
    <name>菠萝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件测试--测试用例设计方法</title>
    <link href="https://kiritoabc.github.io/2024/03/08/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    <id>https://kiritoabc.github.io/2024/03/08/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</id>
    <published>2024-03-08T17:19:41.433Z</published>
    <updated>2024-03-08T17:19:41.433Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;一-等价类划分&quot;&gt;&lt;a href=&quot;#一-等价类划分&quot; class=&quot;headerlink&quot; title=&quot;一 等价类划分&quot;&gt;&lt;/a&gt;一 等价类划分&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;依据需求将输入划分成若干个等价类，从等价类中选定一个测试用例，如果该用例通过，则表明整个等价类通过。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;适用范围&lt;/strong&gt;：适用于有无限多种输入。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;：使用较少的测试用例尽可能多的将功能覆盖。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有效等价类&lt;/strong&gt;：有意义的输入构成的集合，对需求规格说明书来说是合法的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无效等价类&lt;/strong&gt;：不满足需求的输入。&lt;/p&gt;</summary>
    
    
    
    <category term="测试" scheme="https://kiritoabc.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="https://kiritoabc.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://kiritoabc.github.io/2024/03/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://kiritoabc.github.io/2024/03/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-03-08T17:19:41.429Z</published>
    <updated>2024-03-08T17:19:41.429Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;今日设计模式——责任链模式&quot;&gt;&lt;a href=&quot;#今日设计模式——责任链模式&quot; class=&quot;headerlink&quot; title=&quot;今日设计模式——责任链模式&quot;&gt;&lt;/a&gt;今日设计模式——责任链模式&lt;/h1&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://kiritoabc.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://kiritoabc.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>认证授权</title>
    <link href="https://kiritoabc.github.io/2024/03/08/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
    <id>https://kiritoabc.github.io/2024/03/08/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/</id>
    <published>2024-03-08T17:19:41.425Z</published>
    <updated>2024-03-08T17:19:41.425Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;认证授权基础概念详解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;认证和授权的区别是什么？&quot;&gt;&lt;a href=&quot;#认证和授权的区别是什么？&quot; class=&quot;headerlink&quot; title=&quot;认证和授权的区别是什么？&quot;&gt;&lt;/a&gt;认证和授权的区别是什么？&lt;/h1&gt;&lt;p&gt;这是一个绝大多数人都会混淆的问题。首先先从读音上来认识这两个名词，很多人都会把它俩的读音搞混，所以我建议你先先去查一查这两个单词到底该怎么读，他们的具体含义是什么。&lt;/p&gt;
&lt;p&gt;说简单点就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;认证 (Authentication)：&lt;/strong&gt; 你是谁。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;授权 (Authorization)：&lt;/strong&gt; 你有权限干什么。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="后端" scheme="https://kiritoabc.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端知识" scheme="https://kiritoabc.github.io/tags/%E5%90%8E%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>数据库分片</title>
    <link href="https://kiritoabc.github.io/2024/03/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E7%89%87/"/>
    <id>https://kiritoabc.github.io/2024/03/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E7%89%87/</id>
    <published>2024-03-08T17:19:41.413Z</published>
    <updated>2024-03-08T17:19:41.413Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;任何看到显著增长的应用程序或网站，最终都需要进行扩展，以适应流量的增加。以确保数据安全性和完整性的方式进行扩展，对于数据驱动的应用程序和网站来说十分重要。人们可能很难预测某个网站或应用程序的流行程度，也很难预测这种流行程度会持续多久，这就是为什么有些机构选择“可动态扩展的”数据库架构的原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“可动态扩展的”数据库架构：分片数据库。近年来，分片（Sharding）一直受到很多关注，但许多人并没有清楚地了解它是什么，或者对数据库进行分片可能有意义的场景。我们将讨论分片是什么，它的一些主要优点和缺点，以及一些常见的分片方法。&lt;/p&gt;</summary>
    
    
    
    <category term="sql" scheme="https://kiritoabc.github.io/categories/sql/"/>
    
    
    <category term="sql" scheme="https://kiritoabc.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>有栈协程和无栈协程</title>
    <link href="https://kiritoabc.github.io/2024/03/08/%E6%9C%89%E6%A0%88%E5%8D%8F%E7%A8%8B%E5%92%8C%E6%97%A0%E6%A0%88%E5%8D%8F%E7%A8%8B/"/>
    <id>https://kiritoabc.github.io/2024/03/08/%E6%9C%89%E6%A0%88%E5%8D%8F%E7%A8%8B%E5%92%8C%E6%97%A0%E6%A0%88%E5%8D%8F%E7%A8%8B/</id>
    <published>2024-03-08T17:19:41.413Z</published>
    <updated>2024-03-08T17:19:41.413Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;有栈协程与无栈协程&quot;&gt;&lt;a href=&quot;#有栈协程与无栈协程&quot; class=&quot;headerlink&quot; title=&quot;有栈协程与无栈协程&quot;&gt;&lt;/a&gt;有栈协程与无栈协程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;进程的本质就是 &lt;strong&gt;一个程序的执行实例&lt;/strong&gt;。&lt;strong&gt;在进程模型中，进程拥有对内存、I/O 通道、I/O 设备和文件等资源的控制权&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;线程则是为了解决进程的执行效率而提出的。对于多核 CPU，多线程进程可以充分利用多核的特性，成倍地提升执行效率。&lt;/p&gt;
&lt;p&gt;在现代操作系统中，我们可以认为线程是进程的更小粒度的划分，即进程包含了一个或多个线程。下图所示为，分别是单线程的进程模型和多线程的进程模型。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="后端" scheme="https://kiritoabc.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端知识" scheme="https://kiritoabc.github.io/tags/%E5%90%8E%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>简历制作工具推荐</title>
    <link href="https://kiritoabc.github.io/2024/03/08/%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C/"/>
    <id>https://kiritoabc.github.io/2024/03/08/%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C/</id>
    <published>2024-03-08T17:19:41.413Z</published>
    <updated>2024-03-08T17:19:41.413Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;免费的简历制作中心&quot;&gt;&lt;a href=&quot;#免费的简历制作中心&quot; class=&quot;headerlink&quot; title=&quot;免费的简历制作中心&quot;&gt;&lt;/a&gt;免费的简历制作中心&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;推荐：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a</summary>
        
      
    
    
    
    <category term="生活" scheme="https://kiritoabc.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://kiritoabc.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>记录一次性能测试</title>
    <link href="https://kiritoabc.github.io/2024/03/08/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/"/>
    <id>https://kiritoabc.github.io/2024/03/08/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/</id>
    <published>2024-03-08T17:19:41.413Z</published>
    <updated>2024-03-08T17:19:41.413Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;吞吐量：每秒钟系统能够处理的请求数、任务数。&lt;/li&gt;
&lt;li&gt;响应时间：服务处理一个请求或一个任务的耗时。&lt;/li&gt;
&lt;li&gt;错误率：一批请求中结果出错的请求所占比例。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="测试" scheme="https://kiritoabc.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="https://kiritoabc.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>sqlc和sqlx的使用</title>
    <link href="https://kiritoabc.github.io/2024/03/08/sqlx%E5%92%8Csqlc/"/>
    <id>https://kiritoabc.github.io/2024/03/08/sqlx%E5%92%8Csqlc/</id>
    <published>2024-03-08T17:19:41.405Z</published>
    <updated>2024-03-08T17:19:41.405Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是sqlc和sqlx&quot;&gt;&lt;a href=&quot;#什么是sqlc和sqlx&quot; class=&quot;headerlink&quot; title=&quot;什么是sqlc和sqlx?&quot;&gt;&lt;/a&gt;什么是sqlc和sqlx?&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;github上有解释，可以自行查找&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sqlc-dev/sqlc&quot;&gt;https://github.com/sqlc-dev/sqlc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jmoiron/sqlx&quot;&gt;https://github.com/jmoiron/sqlx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;/2024/03/08/sqlx%E5%92%8Csqlc/1702875673126.png&quot; class=&quot;&quot; width=&quot;1702875673126&quot;&gt;

&lt;img src=&quot;/2024/03/08/sqlx%E5%92%8Csqlc/1702875683569.png&quot; class=&quot;&quot; width=&quot;1702875683569&quot;&gt;</summary>
    
    
    
    <category term="后端" scheme="https://kiritoabc.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端开发小技巧" scheme="https://kiritoabc.github.io/tags/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>前端文件上传</title>
    <link href="https://kiritoabc.github.io/2024/03/08/%E5%89%8D%E7%AB%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://kiritoabc.github.io/2024/03/08/%E5%89%8D%E7%AB%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2024-03-08T17:19:41.405Z</published>
    <updated>2024-03-08T17:19:41.405Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;用于记录我开发过程中碰到的文件上传方式&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://kiritoabc.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端开发小技巧" scheme="https://kiritoabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>学习记录</title>
    <link href="https://kiritoabc.github.io/2024/03/08/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://kiritoabc.github.io/2024/03/08/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2024-03-08T17:19:41.405Z</published>
    <updated>2024-03-08T17:19:41.405Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;3月学习记录&quot;&gt;&lt;a href=&quot;#3月学习记录&quot; class=&quot;headerlink&quot; title=&quot;3月学习记录&quot;&gt;&lt;/a&gt;3月学习记录&lt;/h1&gt;&lt;h2 id=&quot;2024-3-7&quot;&gt;&lt;a href=&quot;#2024-3-7&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="学习" scheme="https://kiritoabc.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习记录" scheme="https://kiritoabc.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>接口测试</title>
    <link href="https://kiritoabc.github.io/2024/03/08/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    <id>https://kiritoabc.github.io/2024/03/08/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</id>
    <published>2024-03-08T17:19:41.405Z</published>
    <updated>2024-03-08T17:19:41.405Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;接口性能测试与调优相关一直是属于无经验状态。思考提升自己的能力，是否要学会压力测试？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;/2024/03/08/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703297958629.png&quot; class=&quot;&quot; width=&quot;1703297958629&quot;&gt;</summary>
    
    
    
    <category term="测试" scheme="https://kiritoabc.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试小技巧" scheme="https://kiritoabc.github.io/tags/%E6%B5%8B%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>prometheus</title>
    <link href="https://kiritoabc.github.io/2024/03/08/prometheus/"/>
    <id>https://kiritoabc.github.io/2024/03/08/prometheus/</id>
    <published>2024-03-08T17:19:41.401Z</published>
    <updated>2024-03-08T17:19:41.401Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Prometheus 是&lt;a href=&quot;https://cncf.io/&quot;&gt;云原生计算基金会&lt;/a&gt;的一个项目，是一个系统和服务监控系统。它收集指标 从给定时间间隔的配置目标中，评估规则表达式， 显示结果，并可在观察到指定条件时触发警报。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Prometheus 与其他指标和监控系统的区别在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多维&lt;/strong&gt;数据模型（由指标名称和键/值维度集定义的时间序列）&lt;/li&gt;
&lt;li&gt;PromQL，一种&lt;strong&gt;强大而灵活的查询语言&lt;/strong&gt;，用于利用此维度&lt;/li&gt;
&lt;li&gt;不依赖分布式存储;&lt;strong&gt;单服务器节点是自治的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;用于时序集合的 HTTP &lt;strong&gt;拉取模型&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;支持通过中间网关推送批处理作业的&lt;strong&gt;时序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;通过服务发现或&lt;strong&gt;静态配置****发现&lt;/strong&gt;目标&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持多种绘图和仪表板&lt;/strong&gt;模式&lt;/li&gt;
&lt;li&gt;支持分层&lt;strong&gt;和水平联合&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="go" scheme="https://kiritoabc.github.io/categories/go/"/>
    
    
    <category term="go" scheme="https://kiritoabc.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go系统监控</title>
    <link href="https://kiritoabc.github.io/2024/03/08/go%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/"/>
    <id>https://kiritoabc.github.io/2024/03/08/go%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/</id>
    <published>2024-03-08T17:19:41.393Z</published>
    <updated>2024-03-08T17:19:41.393Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;系统监控&quot;&gt;&lt;a href=&quot;#系统监控&quot; class=&quot;headerlink&quot; title=&quot;系统监控&quot;&gt;&lt;/a&gt;系统监控&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;很多系统中都有守护进程，它们能够在后台监控系统的运行状态，在出现意外情况时及时响应。系统监控是 Go 语言运行时的重要组成部分，它会每隔一段时间检查 Go 语言运行时，确保程序没有进入异常状态。本节会介绍 Go 语言系统监控的设计与实现原理，包括它的启动、执行过程以及主要职责。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="后端" scheme="https://kiritoabc.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端go" scheme="https://kiritoabc.github.io/tags/%E5%90%8E%E7%AB%AFgo/"/>
    
  </entry>
  
  <entry>
    <title>Go泛型</title>
    <link href="https://kiritoabc.github.io/2024/03/08/go%E8%AF%AD%E8%A8%80%E6%B3%9B%E5%9E%8B/"/>
    <id>https://kiritoabc.github.io/2024/03/08/go%E8%AF%AD%E8%A8%80%E6%B3%9B%E5%9E%8B/</id>
    <published>2024-03-08T17:19:41.393Z</published>
    <updated>2024-03-08T17:19:41.393Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Go-1-18-泛型&quot;&gt;&lt;a href=&quot;#Go-1-18-泛型&quot; class=&quot;headerlink&quot; title=&quot;Go 1.18 泛型&quot;&gt;&lt;/a&gt;Go 1.18 泛型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;2022年3月15日，争议非常大但同时也备受期待的泛型终于伴随着Go1.18发布了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考文档: &lt;a href=&quot;https://go.dev/ref/spec&quot;&gt;Go 编程语言规范 - Go 编程语言&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="后端" scheme="https://kiritoabc.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端Go" scheme="https://kiritoabc.github.io/tags/%E5%90%8E%E7%AB%AFGo/"/>
    
  </entry>
  
  <entry>
    <title>Go语言调用外部程序</title>
    <link href="https://kiritoabc.github.io/2024/03/08/go%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>https://kiritoabc.github.io/2024/03/08/go%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/</id>
    <published>2024-03-08T17:19:41.393Z</published>
    <updated>2024-03-08T17:19:41.393Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;由于最近开发碰到了需要调用外部软件程序的任务，对此有一定的兴趣，所以本人翻阅互联网，寻找如何操作，得此文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Go语言调用外部程序&quot;&gt;&lt;a href=&quot;#Go语言调用外部程序&quot;</summary>
        
      
    
    
    
    <category term="后端" scheme="https://kiritoabc.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端" scheme="https://kiritoabc.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello-World</title>
    <link href="https://kiritoabc.github.io/2024/03/08/hello-world/"/>
    <id>https://kiritoabc.github.io/2024/03/08/hello-world/</id>
    <published>2024-03-08T17:19:41.393Z</published>
    <updated>2024-03-08T17:19:41.393Z</updated>
    
    
    <summary type="html">&lt;p&gt;这里是摘要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自我介绍环节&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你不需要一开始很厉害，你需要开始才能很厉害！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Kubernetes</title>
    <link href="https://kiritoabc.github.io/2024/03/08/k8s/"/>
    <id>https://kiritoabc.github.io/2024/03/08/k8s/</id>
    <published>2024-03-08T17:19:41.393Z</published>
    <updated>2024-03-08T17:19:41.393Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Kubernetes, also known as K8s, is an open source system for managing &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/&quot;&gt;containerized applications&lt;/a&gt; across multiple hosts. It provides basic mechanisms for the deployment, maintenance, and scaling of applications.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="go" scheme="https://kiritoabc.github.io/categories/go/"/>
    
    
    <category term="go" scheme="https://kiritoabc.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>kafka的基本使用</title>
    <link href="https://kiritoabc.github.io/2024/03/08/kafka/"/>
    <id>https://kiritoabc.github.io/2024/03/08/kafka/</id>
    <published>2024-03-08T17:19:41.393Z</published>
    <updated>2024-03-08T17:19:41.393Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Kafka 结合了三个关键功能，因此您可以使用 一个经过实战检验的解决方案来实现端到端事件流的 &lt;a href=&quot;https://kafka.apache.org/powered-by&quot;&gt;用例：&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发布（写入）和&lt;strong&gt;订阅（读取）&lt;/strong&gt;事件流，包括从其他系统持续导入/导出数据。&lt;/li&gt;
&lt;li&gt;根据需要持久可靠地存储事件 流&lt;strong&gt;。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在事件发生时或回顾性地 &lt;strong&gt;处理&lt;/strong&gt; 事件流。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="中间件" scheme="https://kiritoabc.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="中间件" scheme="https://kiritoabc.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>UML--类图</title>
    <link href="https://kiritoabc.github.io/2024/03/08/UML/"/>
    <id>https://kiritoabc.github.io/2024/03/08/UML/</id>
    <published>2024-03-08T17:19:41.389Z</published>
    <updated>2024-03-08T17:19:41.389Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;​	统一建模语言(Unified Modeling Language，UML)是一种为&lt;a href=&quot;https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2262089?fromModule=lemma_inlink&quot;&gt;面向对象&lt;/a&gt;系统的产品进行说明、可视化和&lt;a href=&quot;https://baike.baidu.com/item/%E7%BC%96%E5%88%B6/9907954?fromModule=lemma_inlink&quot;&gt;编制&lt;/a&gt;文档的一种标准语言，是非专利的第三代建模和规约语言。UML是面向对象设计的建模工具，独立于任何具体程序设计语言。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;UML-—-类图-Class-Diagram&quot;&gt;&lt;a href=&quot;#UML-—-类图-Class-Diagram&quot; class=&quot;headerlink&quot; title=&quot;UML —&gt; 类图 (Class Diagram)&quot;&gt;&lt;/a&gt;UML —&amp;gt; 类图 (Class Diagram)&lt;/h1&gt;</summary>
    
    
    
    <category term="UML" scheme="https://kiritoabc.github.io/categories/UML/"/>
    
    
    <category term="UML" scheme="https://kiritoabc.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>为什么学GO？GO是什么？怎么学GO？</title>
    <link href="https://kiritoabc.github.io/2024/03/08/WWH-01/"/>
    <id>https://kiritoabc.github.io/2024/03/08/WWH-01/</id>
    <published>2024-03-08T17:19:41.389Z</published>
    <updated>2024-03-08T17:19:41.389Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;我为什么学GO&quot;&gt;&lt;a href=&quot;#我为什么学GO&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="why? what? how?" scheme="https://kiritoabc.github.io/categories/why-what-how/"/>
    
    
    <category term="1" scheme="https://kiritoabc.github.io/tags/1/"/>
    
  </entry>
  
</feed>
