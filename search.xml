<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式</title>
      <link href="/2024/03/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/03/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</em></p></blockquote><h1 id="今日设计模式——责任链模式"><a href="#今日设计模式——责任链模式" class="headerlink" title="今日设计模式——责任链模式"></a>今日设计模式——责任链模式</h1><span id="more"></span><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><blockquote><p>责任链模式是一种行为设计模式，允许你将请求沿着处理者链进行发送。收到请求后，每个处理者均可对请求进行处理，或将其传递给链上的下个处理者。</p></blockquote><p><strong>模型说明</strong></p><img src="/2024/03/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1704986851635.png" class="" width="1704986851635"><ul><li><p>Handler：声明了所有具体处理者的通用接口。该接口通常仅包含单个方法用于请求处理，但有时其还包含一个设置链上下个处理者的方法。</p></li><li><p>BaseHandler：是一个可选的类，你可以将所有处理者共用的样本代码放置在其中。</p></li><li><ul><li>通常情况下，该类中定义了一个保存对于下个处理者引用的成员变量。客户端可通过将处理者传递给上个处理者的构造函数或设定方法来创建链。该类还可以实现默认的处理行为：确定下个处理者存在后再将请求传递给它。</li></ul></li><li><p>ConcreteHandlers：包含处理请求的实际代码。每个处理者接收到请求后，都必须决定是否进行处理，以及是否沿着链传递请求。</p></li><li><ul><li>处理者通常是独立且不可变的，需要通过构造函数一次性地获得所有必要的数据。</li></ul></li><li><p>Client：可根据程序逻辑一次性或者动态地生成链。值得注意的是，请求可发送给脸上的任意一个处理者，而非必须是第一个处理者</p></li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>1、降低耦合度。它将请求的发送者和接收者解耦。</li><li>2、简化了对象。使得对象不需要知道链的结构。 </li><li>3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。</li><li>4、增加新的请求处理类很方便。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>1、不能保证请求一定被接收。 </li><li>2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 </li><li>3、可能不容易观察运行时的特征，有碍于除错。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>当程序需要使用不同方式处理不同种类请求， 而且请求类型和顺序预先未知时， 可以使用责任链模式。</li><li>当必须按顺序执行多个处理者时， 可以使用该模式。</li><li>如果所需处理者及其顺序必须在运行时进行改变， 可以使用责任链模式。</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>看一个医院应用的责任链模式例子：病人来访时， 他们首先都会去前台， 然后是看医生、 取药， 最后结账。</p><ol><li>去前台</li><li>看医生</li><li>取药</li><li>结账</li></ol><p><strong>定义病人 patient.go</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> patient<span class="token comment" spellcheck="true">// patient.go 病人</span><span class="token keyword">type</span> Patient <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name              <span class="token builtin">string</span>    RegistrationDone  <span class="token builtin">bool</span> <span class="token comment" spellcheck="true">// 1.去前台</span>    DoctorCheckUpDone <span class="token builtin">bool</span> <span class="token comment" spellcheck="true">// 2.看医生</span>    MedicineDone      <span class="token builtin">bool</span> <span class="token comment" spellcheck="true">// 3.取药</span>    PaymentDone       <span class="token builtin">bool</span> <span class="token comment" spellcheck="true">// 4.结账</span><span class="token punctuation">}</span></code></pre><p><strong>定义department.go 处理者接口</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> department<span class="token keyword">import</span> <span class="token string">"sj-learn/zrl/patient"</span><span class="token comment" spellcheck="true">// department.go 处理者接口 医院部门</span><span class="token keyword">type</span> Department <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token operator">*</span>patient<span class="token punctuation">.</span>Patient<span class="token punctuation">)</span>    <span class="token function">SetNext</span><span class="token punctuation">(</span>Department<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>reception.go 具体处理者</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> reception<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"sj-learn/zrl/department"</span>    <span class="token string">"sj-learn/zrl/patient"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// reception.go 具体处理者 (前台接待patient)</span><span class="token keyword">type</span> Reception <span class="token keyword">struct</span> <span class="token punctuation">{</span>    next department<span class="token punctuation">.</span>Department<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Reception<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>p <span class="token operator">*</span>patient<span class="token punctuation">.</span>Patient<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> p<span class="token punctuation">.</span>RegistrationDone <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Patient registration already done"</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Reception registering patient"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>RegistrationDone <span class="token operator">=</span> <span class="token boolean">true</span>    r<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Reception<span class="token punctuation">)</span> <span class="token function">SetNext</span><span class="token punctuation">(</span>next department<span class="token punctuation">.</span>Department<span class="token punctuation">)</span> <span class="token punctuation">{</span>    r<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">}</span></code></pre><p><strong>doctor.go 具体处理者</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> doctor<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"sj-learn/zrl/department"</span>    <span class="token string">"sj-learn/zrl/patient"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Doctor <span class="token keyword">struct</span> <span class="token punctuation">{</span>    next department<span class="token punctuation">.</span>Department<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Doctor<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>p <span class="token operator">*</span>patient<span class="token punctuation">.</span>Patient<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> p<span class="token punctuation">.</span>DoctorCheckUpDone <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Doctor checkup already done"</span><span class="token punctuation">)</span>        d<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Doctor checking patient"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>DoctorCheckUpDone <span class="token operator">=</span> <span class="token boolean">true</span>    d<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Doctor<span class="token punctuation">)</span> <span class="token function">SetNext</span><span class="token punctuation">(</span>next department<span class="token punctuation">.</span>Department<span class="token punctuation">)</span> <span class="token punctuation">{</span>    d<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">}</span></code></pre><p><em><strong>medical.go 具体处理者</strong></em></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> medical<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"sj-learn/zrl/department"</span>    <span class="token string">"sj-learn/zrl/patient"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// medical.go 具体处理者</span><span class="token keyword">type</span> Medical <span class="token keyword">struct</span> <span class="token punctuation">{</span>    next department<span class="token punctuation">.</span>Department<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Medical<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>p <span class="token operator">*</span>patient<span class="token punctuation">.</span>Patient<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> p<span class="token punctuation">.</span>MedicineDone <span class="token punctuation">{</span>       fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Medicine already given to patient"</span><span class="token punctuation">)</span>       m<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>       <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Medical giving medicine to patient"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>MedicineDone <span class="token operator">=</span> <span class="token boolean">true</span>    m<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Medical<span class="token punctuation">)</span> <span class="token function">SetNext</span><span class="token punctuation">(</span>next department<span class="token punctuation">.</span>Department<span class="token punctuation">)</span> <span class="token punctuation">{</span>    m<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">}</span></code></pre><p><em><strong>cashier.go 具体处理者</strong></em></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> cashier<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"sj-learn/zrl/department"</span>    <span class="token string">"sj-learn/zrl/patient"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Cashier <span class="token keyword">struct</span> <span class="token punctuation">{</span>    next department<span class="token punctuation">.</span>Department<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cashier<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>p <span class="token operator">*</span>patient<span class="token punctuation">.</span>Patient<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> p<span class="token punctuation">.</span>PaymentDone <span class="token punctuation">{</span>       fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Payment Done"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Cashier getting money from patient patient"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cashier<span class="token punctuation">)</span> <span class="token function">SetNext</span><span class="token punctuation">(</span>next department<span class="token punctuation">.</span>Department<span class="token punctuation">)</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">}</span></code></pre><p><strong>main.go</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"sj-learn/zrl/cashier"</span>    <span class="token string">"sj-learn/zrl/doctor"</span>    <span class="token string">"sj-learn/zrl/medical"</span>    <span class="token string">"sj-learn/zrl/patient"</span>    <span class="token string">"sj-learn/zrl/reception"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cashier <span class="token operator">:=</span> <span class="token operator">&amp;</span>cashier<span class="token punctuation">.</span>Cashier<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Set next for medical department</span>    medical <span class="token operator">:=</span> <span class="token operator">&amp;</span>medical<span class="token punctuation">.</span>Medical<span class="token punctuation">{</span><span class="token punctuation">}</span>    medical<span class="token punctuation">.</span><span class="token function">SetNext</span><span class="token punctuation">(</span>cashier<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//Set next for doctor department</span>    doctor <span class="token operator">:=</span> <span class="token operator">&amp;</span>doctor<span class="token punctuation">.</span>Doctor<span class="token punctuation">{</span><span class="token punctuation">}</span>    doctor<span class="token punctuation">.</span><span class="token function">SetNext</span><span class="token punctuation">(</span>medical<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//Set next for reception department</span>    reception <span class="token operator">:=</span> <span class="token operator">&amp;</span>reception<span class="token punctuation">.</span>Reception<span class="token punctuation">{</span><span class="token punctuation">}</span>    reception<span class="token punctuation">.</span><span class="token function">SetNext</span><span class="token punctuation">(</span>doctor<span class="token punctuation">)</span>    patient <span class="token operator">:=</span> <span class="token operator">&amp;</span>patient<span class="token punctuation">.</span>Patient<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Patient visiting</span>    reception<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>patient<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>结果：</strong></p><pre class=" language-powershell"><code class="language-powershell">Reception registering patientDoctor checking patient                   Medical giving medicine to patient        Cashier getting money <span class="token keyword">from</span> patient patient</code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试--测试用例设计方法</title>
      <link href="/2024/03/18/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/03/18/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一-等价类划分"><a href="#一-等价类划分" class="headerlink" title="一 等价类划分"></a>一 等价类划分</h2><p><strong>定义：</strong>依据需求将输入划分成若干个等价类，从等价类中选定一个测试用例，如果该用例通过，则表明整个等价类通过。</p><p><strong>适用范围</strong>：适用于有无限多种输入。</p><p><strong>目的</strong>：使用较少的测试用例尽可能多的将功能覆盖。</p><p><strong>有效等价类</strong>：有意义的输入构成的集合，对需求规格说明书来说是合法的。</p><p><strong>无效等价类</strong>：不满足需求的输入。</p><span id="more"></span><p>例如：学生成绩录入系统，分数X为0到100的整数。</p><p>有效等价类：0≤X≤100（50）</p><p>无效等价类：X≤0（-5），X≥100（200）</p><p>如果没有整数要求，还要考虑小数，非数字（字母，汉字，特殊字符）和空值。</p><p>但只按照等价类划分还不够，还要考虑边界值。</p><h2 id="二-边界值分析法"><a href="#二-边界值分析法" class="headerlink" title="二 边界值分析法"></a>二 边界值分析法</h2><p><strong>边界值分析法是对等价类划分法的补充，一般从等价类的边界寻找错误。</strong></p><p>边界值分析法的基本思路：</p><p>正好等于边界值，刚好小于边界值，刚好大于边界值作为测试数据。</p><p>特殊：0/空是特殊的值，在考虑边界值的时候也要考虑这个特殊值。</p><p>边界值思想的体现：网上购物，库存12。</p><p>数量=11：下单成功；数量=12：下单成功；数量=13：下单失败，并给出提示。</p><p>例如：学生成绩录入系统，分数X为0到100的整数。</p><p>上边界：99，100，101</p><p>下边界：-1，0，1</p><p>所以等价类+边界值的取值范围为：-5，-1，0，1，50，99，100，101，200</p><p>因此可分成两个用例：有效输入：0，1，50，99，100；无效输入：-5，-1，101，200。</p><p>再例如：微信红包，最小0.01，最大200。</p><p>等价类+边界值的取值范围：-100.00，0，0.01，0.02，50.00，199.99，200，200.01，300.00。</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认证授权</title>
      <link href="/2024/03/18/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
      <url>/2024/03/18/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>认证授权基础概念详解</p></blockquote><h1 id="认证和授权的区别是什么？"><a href="#认证和授权的区别是什么？" class="headerlink" title="认证和授权的区别是什么？"></a>认证和授权的区别是什么？</h1><p>这是一个绝大多数人都会混淆的问题。首先先从读音上来认识这两个名词，很多人都会把它俩的读音搞混，所以我建议你先先去查一查这两个单词到底该怎么读，他们的具体含义是什么。</p><p>说简单点就是：</p><ul><li><strong>认证 (Authentication)：</strong> 你是谁。</li><li><strong>授权 (Authorization)：</strong> 你有权限干什么。</li></ul><span id="more"></span><p>稍微正式点（啰嗦点）的说法就是：</p><ul><li><strong>Authentication（认证）</strong> 是验证您的身份的凭据（例如用户名/用户 ID 和密码），通过这个凭据，系统得以知道你就是你，也就是说系统存在你这个用户。所以，Authentication 被称为身份/用户验证。</li><li><strong>Authorization（授权）</strong> 发生在 <strong>Authentication（认证）</strong> 之后。授权嘛，光看意思大家应该就明白，它主要掌管我们访问系统的权限。比如有些特定资源只能具有特定权限的人才能访问比如 admin，有些对系统资源操作比如删除、添加、更新只能特定人才具有。</li></ul><p>认证:</p><img src="/2024/03/18/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/1697958240806.png" class="" width="1697958240806"><p>授权:</p><img src="/2024/03/18/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/1697958252996.png" class="" width="1697958252996"><p>这两个一般在我们的系统中被结合在一起使用，目的就是为了保护我们系统的安全性。</p><h2 id="RBAC-模型了解吗？"><a href="#RBAC-模型了解吗？" class="headerlink" title="RBAC 模型了解吗？"></a>RBAC 模型了解吗？</h2><p>系统权限控制最常采用的访问控制模型就是 <strong>RBAC 模型</strong> 。</p><p><strong>什么是 RBAC 呢？</strong></p><p>RBAC 即基于角色的权限访问控制（Role-Based Access Control）。这是一种通过角色关联权限，角色同时又关联用户的授权的方式。</p><p>简单地说：一个用户可以拥有若干角色，每一个角色又可以被分配若干权限，这样就构造成“用户-角色-权限” 的授权模型。在这种模型中，用户与角色、角色与权限之间构成了多对多的关系，如下图</p><img src="/2024/03/18/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/1697958551199.png" class="" width="1697958551199"><p><strong>在 RBAC 中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。</strong></p><p>本系统的权限设计相关的表如下（一共 5 张表，2 张用户建立表之间的联系）：</p><img src="/2024/03/18/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/1697958595040.png" class="" width="1697958595040"><p>通过这个权限模型，我们可以创建不同的角色并为不同的角色分配不同的权限范围（菜单）。</p><img src="/2024/03/18/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/1697958753227.png" class="" width="1697958753227"><p>通常来说，如果系统对于权限控制要求比较严格的话，一般都会选择使用 RBAC 模型来做权限控制。</p><h2 id="什么是Cookie？Cookie的作用是什么？"><a href="#什么是Cookie？Cookie的作用是什么？" class="headerlink" title="什么是Cookie？Cookie的作用是什么？"></a>什么是Cookie？Cookie的作用是什么？</h2><img src="/2024/03/18/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/1697958846578.png" class="" width="1697958846578"><p><code>Cookie</code> 和 <code>Session</code> 都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。</p><p>维基百科是这样定义 <code>Cookie</code> 的：</p><blockquote><p><code>Cookies</code> 是某些网站为了辨别用户身份而储存在用户本地终端上的数据（通常经过加密）。</p></blockquote><p>简单来说：<strong>Cookie 存放在客户端，一般用来保存用户信息</strong>。</p><p>下面是 <code>Cookie</code> 的一些应用案例：</p><ol><li>我们在 <code>Cookie</code> 中保存已经登录过的用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了。除此之外，<code>Cookie</code> 还能保存用户首选项，主题和其他设置信息。</li><li>使用 <code>Cookie</code> 保存 <code>SessionId</code> 或者 <code>Token</code> ，向后端发送请求的时候带上 <code>Cookie</code>，这样后端就能取到 <code>Session</code> 或者 <code>Token</code> 了。这样就能记录用户当前的状态了，因为 HTTP 协议是无状态的。</li><li><code>Cookie</code> 还可以用来记录和分析用户行为。举个简单的例子你在网上购物的时候，因为 HTTP 协议是没有状态的，如果服务器想要获取你在某个页面的停留状态或者看了哪些商品，一种常用的实现方式就是将这些信息存放在 <code>Cookie</code></li><li>……</li></ol><h2 id="如何在项目中使用Cookie呢？"><a href="#如何在项目中使用Cookie呢？" class="headerlink" title="如何在项目中使用Cookie呢？"></a>如何在项目中使用Cookie呢？</h2><p>我们以Gin的项目为例</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/gin-gonic/gin"</span>    <span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/setCookie"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置cookie</span>        c<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span><span class="token string">"cookie_name"</span><span class="token punctuation">,</span> <span class="token string">"cookie_value"</span><span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/*            name cookie的名称            value cookie的值            maxAge int, 单位为秒            path cookie所在目录            domain string,域名            secure 是否智能通过https访问            httpOnly bool  是否允许通过js获取自己的cookie        */</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"set cookie success."</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/getCookie"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 读取cookie,根据cookie名读取</span>        cookie<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Cookie</span><span class="token punctuation">(</span><span class="token string">"cookie_name"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 直接返回cookie值</span>            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"get cookie fail"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"cookie_name"</span><span class="token punctuation">:</span> cookie<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/delCookie"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 删除cookie, 设置cookie MaxAge设置为-1，表示删除cookie</span>        c<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span><span class="token string">"cookie_name"</span><span class="token punctuation">,</span> <span class="token string">"cookie_value"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"delete cookie success."</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="Cookie-和-Session-有什么区别？"><a href="#Cookie-和-Session-有什么区别？" class="headerlink" title="Cookie 和 Session 有什么区别？"></a>Cookie 和 Session 有什么区别？</h2><p><strong>Session 的主要作用就是通过服务端记录用户的状态。</strong> 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 <code>Session</code> 之后就可以标识这个用户并且跟踪这个用户了。</p><p><code>Cookie</code> 数据保存在客户端(浏览器端)，<code>Session</code> 数据保存在服务器端。相对来说 <code>Session</code> 安全性更高。如果使用 <code>Cookie</code> 的一些敏感信息不要写入 <code>Cookie</code> 中，最好能将 <code>Cookie</code> 信息加密然后使用到的时候再去服务器端解密。</p><p><strong>那么，如何使用 Session 进行身份验证？</strong></p><p>很多时候我们都是通过 <code>SessionID</code> 来实现特定的用户，<code>SessionID</code> 一般会选择存放在 Redis 中。举个例子：</p><ol><li>用户成功登陆系统，然后返回给客户端具有 <code>SessionID</code> 的 <code>Cookie</code> 。</li><li>当用户向后端发起请求的时候会把 <code>SessionID</code> 带上，这样后端就知道你的身份状态了。</li></ol><p>关于这种认证方式更详细的过程如下：</p><img src="/2024/03/18/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/1697959950684.png" class="" width="1697959950684"><ol><li>用户向服务器发送用户名、密码、验证码用于登陆系统。</li><li>服务器验证通过后，服务器为用户创建一个 <code>Session</code>，并将 <code>Session</code> 信息存储起来。</li><li>服务器向用户返回一个 <code>SessionID</code>，写入用户的 <code>Cookie</code>。</li><li>当用户保持登录状态时，<code>Cookie</code> 将与每个后续请求一起被发送出去。</li><li>服务器可以将存储在 <code>Cookie</code> 上的 <code>SessionID</code> 与存储在内存中或者数据库中的 <code>Session</code> 信息进行比较，以验证用户的身份，返回给用户客户端响应信息的时候会附带用户当前的状态。</li></ol><p>使用 <code>Session</code> 的时候需要注意下面几个点：</p><ul><li>依赖 <code>Session</code> 的关键业务一定要确保客户端开启了 <code>Cookie</code>。</li><li>注意 <code>Session</code> 的过期时间。</li></ul><h2 id="多服务器节点下-Session-Cookie-方案如何做？"><a href="#多服务器节点下-Session-Cookie-方案如何做？" class="headerlink" title="多服务器节点下 Session-Cookie 方案如何做？"></a>多服务器节点下 Session-Cookie 方案如何做？</h2><p>Session-Cookie 方案在单体环境是一个非常好的身份认证方案。但是，当服务器水平拓展成多节点时，Session-Cookie 方案就要面临挑战了。</p><p>举个例子：假如我们部署了两份相同的服务 A，B，用户第一次登陆的时候 ，Nginx 通过负载均衡机制将用户请求转发到 A 服务器，此时用户的 Session 信息保存在 A 服务器。结果，用户第二次访问的时候 Nginx 将请求路由到 B 服务器，由于 B 服务器没有保存 用户的 Session 信息，导致用户需要重新进行登陆。</p><p><strong>我们应该如何避免上面这种情况的出现呢？</strong></p><p>有几个方案可供大家参考：（1.通过hash算法 2.采用第三方存储如redis缓存）</p><ol><li>某个用户的所有请求都通过特性的哈希策略分配给同一个服务器处理。这样的话，每个服务器都保存了一部分用户的 Session 信息。服务器宕机，其保存的所有 Session 信息就完全丢失了。</li><li>每一个服务器保存的 Session 信息都是互相同步的，也就是说每一个服务器都保存了全量的 Session 信息。每当一个服务器的 Session 信息发生变化，我们就将其同步到其他服务器。这种方案成本太大，并且，节点越多时，同步成本也越高。</li><li>单独使用一个所有服务器都能访问到的数据节点（比如缓存）来存放 Session 信息。为了保证高可用，数据节点尽量要避免是单点。</li><li>Spring Session 是一个用于在多个服务器之间管理会话的项目。它可以与多种后端存储（如 Redis、MongoDB 等）集成，从而实现分布式会话管理。通过 Spring Session，可以将会话数据存储在共享的外部存储中，以实现跨服务器的会话同步和共享。</li></ol><h2 id="如果没有-Cookie-的话-Session-还能用吗？"><a href="#如果没有-Cookie-的话-Session-还能用吗？" class="headerlink" title="如果没有 Cookie 的话 Session 还能用吗？"></a>如果没有 Cookie 的话 Session 还能用吗？</h2><p>这是一道经典的面试题！</p><p>一般是通过 <code>Cookie</code> 来保存 <code>SessionID</code> ，假如你使用了 <code>Cookie</code> 保存 <code>SessionID</code> 的方案的话， 如果客户端禁用了 <code>Cookie</code>，那么 <code>Session</code> 就无法正常工作。</p><p>但是，并不是没有 <code>Cookie</code> 之后就不能用 <code>Session</code> 了，比如你可以将 <code>SessionID</code> 放在请求的 <code>url</code> 里面<code>https://javaguide.cn/?Session_id=xxx</code> 。这种方案的话可行，但是安全性和用户体验感降低。当然，为了安全你也可以对 <code>SessionID</code> 进行一次加密之后再传入后端。</p><h2 id="为什么-Cookie-无法防止-CSRF-攻击，而-Token-可以？"><a href="#为什么-Cookie-无法防止-CSRF-攻击，而-Token-可以？" class="headerlink" title="为什么 Cookie 无法防止 CSRF 攻击，而 Token 可以？"></a>为什么 Cookie 无法防止 CSRF 攻击，而 Token 可以？</h2><p><strong>CSRF(Cross Site Request Forgery)</strong> 一般被翻译为 <strong>跨站请求伪造</strong> 。那么什么是 <strong>跨站请求伪造</strong> 呢？说简单用你的身份去发送一些对你不友好的请求。举个简单的例子：</p><p>小壮登录了某网上银行，他来到了网上银行的帖子区，看到一个帖子下面有一个链接写着“科学理财，年盈利率过万”，小壮好奇的点开了这个链接，结果发现自己的账户少了 10000 元。这是这么回事呢？原来黑客在链接中藏了一个请求，这个请求直接利用小壮的身份给银行发送了一个转账请求,也就是通过你的 Cookie 向银行发出请求。</p><pre class=" language-html"><code class="language-html">&lt;a src=http://www.mybank.com/Transfer?bankId=11&amp;money=10000>科学理财，年盈利率过万&lt;/></code></pre><p>上面也提到过，进行 <code>Session</code> 认证的时候，我们一般使用 <code>Cookie</code> 来存储 <code>SessionId</code>,当我们登陆后后端生成一个 <code>SessionId</code> 放在 Cookie 中返回给客户端，服务端通过 Redis 或者其他存储工具记录保存着这个 <code>SessionId</code>，客户端登录以后每次请求都会带上这个 <code>SessionId</code>，服务端通过这个 <code>SessionId</code> 来标示你这个人。如果别人通过 <code>Cookie</code> 拿到了 <code>SessionId</code> 后就可以代替你的身份访问系统了。</p><p><code>Session</code> 认证中 <code>Cookie</code> 中的 <code>SessionId</code> 是由浏览器发送到服务端的，借助这个特性，攻击者就可以通过让用户误点攻击链接，达到攻击效果。</p><p>但是，我们使用 <code>Token</code> 的话就不会存在这个问题，在我们登录成功获得 <code>Token</code> 之后，一般会选择存放在 <code>localStorage</code> （浏览器本地存储）中。然后我们在前端通过某些方式会给每个发到后端的请求加上这个 <code>Token</code>,这样就不会出现 CSRF 漏洞的问题。因为，即使有个你点击了非法链接发送了请求到服务端，这个非法请求是不会携带 <code>Token</code> 的，所以这个请求将是非法的。</p><img src="/2024/03/18/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/1697960731332.png" class="" width="1697960731332"><p>需要注意的是：不论是 <code>Cookie</code> 还是 <code>Token</code> 都无法避免 <strong>跨站脚本攻击（Cross Site Scripting）XSS</strong> 。</p><blockquote><p>跨站脚本攻击（Cross Site Scripting）缩写为 CSS 但这会与层叠样式表（Cascading Style Sheets，CSS）的缩写混淆。因此，有人将跨站脚本攻击缩写为 XSS。</p></blockquote><p>XSS 中攻击者会用各种方式将恶意代码注入到其他用户的页面中。就可以通过脚本盗用信息比如 <code>Cookie</code> 。</p><p>推荐阅读：<a href="https://tech.meituan.com/2018/10/11/fe-security-csrf.html">如何防止 CSRF 攻击？—美团技术团队</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库分片</title>
      <link href="/2024/03/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E7%89%87/"/>
      <url>/2024/03/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><blockquote><p>任何看到显著增长的应用程序或网站，最终都需要进行扩展，以适应流量的增加。以确保数据安全性和完整性的方式进行扩展，对于数据驱动的应用程序和网站来说十分重要。人们可能很难预测某个网站或应用程序的流行程度，也很难预测这种流行程度会持续多久，这就是为什么有些机构选择“可动态扩展的”数据库架构的原因。</p></blockquote><p>“可动态扩展的”数据库架构：分片数据库。近年来，分片（Sharding）一直受到很多关注，但许多人并没有清楚地了解它是什么，或者对数据库进行分片可能有意义的场景。我们将讨论分片是什么，它的一些主要优点和缺点，以及一些常见的分片方法。</p><span id="more"></span><h2 id="What-is-Sharding-什么是分片？"><a href="#What-is-Sharding-什么是分片？" class="headerlink" title="What is Sharding? 什么是分片？"></a><strong>What is Sharding? 什么是分片？</strong></h2><p>分片（Sharding）是一种与水平切分（horizontal partitioning）相关的数据库架构模式——将一个表里面的行，分成多个不同的表的做法（称为分区）。每个区都具有相同的模式和列，但每个表有完全不同的行。同样，每个分区中保存的数据都是唯一的，并且与其他分区中保存的数据无关。</p><p>从水平切分（horizontal partitioning）与垂直切分（vertical partitioning）的关系，可能会有所帮助。在垂直切分表中，所有的列被分离出来，并放入新的不同的表中。每个垂直切分内的数据，独立于所有其他分区中的数据，并且每个分区都包含不同的行和列。下图说明了如何在水平和垂直方向上对表进行分区：</p><img src="/2024/03/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E7%89%87/v2-49c52a210fde396055b71509ef0558ac_r.jpg" class="" title="img"><p>分片（Sharding）将一个数据分成两个或多个较小的块，称为逻辑分片（logical shards）。然后，逻辑分片（logical shards）分布在单独的数据库节点上，称为物理分片（physical shards）。物理分片（physical shards）可以容纳多个逻辑分片（logical shards）。尽管如此，所有分片中保存的数据，共同代表整个逻辑数据集。</p><p>数据库分片（Database shards）是无共享架构的一个例子。这意味着分片是自治的：分片间不共享任何相同的数据或服务器资源。但是在某些情况下，将某些表复制到每个分片中作为参考表是有意义的。例如，假设某个应用程序的数据库依赖于重量测量的固定转换率。通过将包含必要转换率数据的表复制到每个分片中，有助于确保查询所需的所有数据都保存在每个分片中。</p><p>通常，分片（Sharding）在应用程序级别进行实现。这意味着应用程序包含“要向哪个分片发送读和写”的代码。但是，某些数据库管理系统内置了分片功能，允许您直接在数据库级别实现分片。</p><p>以上是分片（Sharding）的概述，接下来让我们来看一下，这种数据库架构的优点和缺点。</p><h2 id="Benefits-of-Sharding-分片的好处"><a href="#Benefits-of-Sharding-分片的好处" class="headerlink" title="Benefits of Sharding 分片的好处"></a><strong>Benefits of Sharding 分片的好处</strong></h2><p>数据库分片的主要吸引力在于，它可以帮助促进水平扩展（horizontal scaling），也称为向外扩展（scaling out）。水平扩展是将更多的机器添加到现有堆栈中，以分散负载，允许更多的流量和更快的处理。这通常与垂直扩展（vertical scaling）形成对比，垂直扩展也称为向上扩展（scaling up），是指升级现有服务器的硬件，通常是添加更多内存或CPU。</p><p>让一个关系数据库在单个机器上运行，并按需升级其服务器资源进行向上扩展是相对简单的。但最终，任何非分布式数据库在存储和计算能力方面都会受到限制，因此可以自由地水平扩展数据库，会使您的架构更加灵活且适应性强。</p><p>选择分片数据库架构的另一个原因，是为了加速查询响应的时间。当您对尚未分片的数据库提交查询时，必须先搜索您查询的表中的每一行，然后才能找到您要查找的结果集。对于具有大型单片数据库的应用程序，查询可能变得极其缓慢。但是，通过将一个表分成多个，查询过程会遍历更少的行，并且返回结果集的速度要快得多。</p><p>分片还可以通过减少宕机（outage）的影响，使应用程序更稳定可靠。如果您的应用程序或网站依赖于未分片的数据库，则宕机可能会导致整个应用程序不可用。但是，对于分片数据库，宕机可能只会影响单个分片。即使这可能使某些用户无法使用应用程序或网站部分功能，但仍会低于整个数据库崩溃带来的影响。</p><h2 id="Drawbacks-of-Sharding-分片的缺点"><a href="#Drawbacks-of-Sharding-分片的缺点" class="headerlink" title="Drawbacks of Sharding 分片的缺点"></a><strong>Drawbacks of Sharding</strong> <strong>分片的缺点</strong></h2><p>虽然对数据库进行分片可以使扩展更容易并提高性能，但它也可能会带来某些限制。在这里，我们将讨论其中的一些限制，以及为什么这些限制会让我们避免对数据库全部分片。</p><p>正确实现分片数据库架构，是十分复杂的，所以这是分片遇到的第一个困难。如果操作不正确，则分片过程可能会导致数据丢失或表损坏，这是一个很大的风险。但是，即使正确地进行了分片，也可能对团队的工作流程产生重大影响。与从单个入口点访问和管理数据不同，用户必须跨多个分片位置管理数据，这可能会让某些团队存在工作混乱。</p><p>在对数据库进行分片后，用户有时会遇到的一个问题是分片最终会变得不平衡。举例来说，假设您有一个数据库，其中有两个单独的分片，一个用于姓氏以字母A到M开头的客户，另一个用于名字以字母N到Z开头的客户。但是，您的应用程序为姓氏以字母G开头的人提供了过多的服务。因此，A-M分片逐渐累积的数据比N-Z分片要多，这会导致应用程序速度变慢，并对很大一部分用户造成影响。A-M分片已成为所谓的数据热点。在这种情况下，数据库分片的任何好处都被慢速和崩溃抵消了。数据库可能需要修复和重新分片，才能实现更均匀的数据分布。</p><p>另一个主要缺点是，一旦对数据库进行了分片，就很难将其恢复到未分片的架构。分片前数据库的备份数据，都无法与分片后写入的数据合并。因此，重建原始的非分片架构，需要将新的分区数据与旧备份合并，或者将分区的数据库转换回单个数据库，这两种方法都是昂贵且耗时的。</p><p>要考虑的最后一个缺点是，并不是每个数据库引擎本身都支持分片。例如，尽管可以手动分片PostgreSQL数据库，但PostgreSQL本身并不包括自动分片功能。有许多Postgres分支包括自动分片功能，但这些分支通常落后于最新的PostgreSQL版本，并且缺乏某些其他的功能特性。一些专业的数据库技术——如MySQL Cluster或某些数据库即服务产品（如MongoDB Atlas）确实包含自动分片功能，但这些数据库管理系统的普通版本却并不包含。因此，分片通常需要“自己动手”的方法。这意味着通常很难找到有关分片或故障排除技巧的文档。</p><p>现在我们已经介绍了一些分片的缺点和好处，我们将讨论一些分片数据库的不同架构。</p><p>一旦你决定对数据库进行分片，接下来你需要弄清楚的是如何进行分片。在运行查询或将传入的数据分发到分片表或数据库时，关键是要将其分配到正确的分片。否则，它可能导致数据丢失或查询速度缓慢。在本节中，我们将介绍一些常见的分片架构，每个架构使用稍微不同的流程来跨分片分发数据。</p><h2 id="Key-Based-Sharding-基于键的分片"><a href="#Key-Based-Sharding-基于键的分片" class="headerlink" title="Key Based Sharding 基于键的分片"></a><strong>Key Based Sharding 基于键的分片</strong></h2><img src="/2024/03/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E7%89%87/v2-01baaf79951687aa338b347b6c46081e_r.jpg" class="" title="img"><p>为了确保数据记录以正确的方式被放置在正确的分片中，哈希函数中输入的值都应该来自同一列。此列称为分片键。简单来说，分片键与主键类似，因为它们都是列，用于为各个行建立唯一标识符。一般来说，分片键应该是静态的，这意味着它不应包含可能随时间变化的值。否则，它会增加更新操作的工作量，并可能降低性能。</p><p>虽然基于键的分片是一种相当常见的分片架构，但在尝试动态添加或删除数据库中的其他服务器时，它会使事情变得棘手。在添加服务器时，每个服务器都需要一个相应的哈希值，并且许多现有条目（如果不是全部）都需要重新映射到新的正确哈希值，然后迁移到相应的服务器。当您开始重新平衡数据时，新旧哈希函数都不会有效。因此，在迁移期间，您的服务器将无法编写任何新数据，您的应用程序可能会停机。</p><p>这种策略的主要吸引力在于，它可以用于均匀分布数据，从而防止热点。此外，由于它以算法方式分配数据，因此无需维护所有数据所在位置的映射，而其他策略（如范围或基于目录的分片）必须维护数据位置的映射。</p><h2 id="Range-Based-Sharding-基于范围的分片"><a href="#Range-Based-Sharding-基于范围的分片" class="headerlink" title="Range Based Sharding 基于范围的分片"></a><strong>Range Based Sharding 基于范围的分片</strong></h2><p>基于范围的分片（Range based sharding），基于给定值的范围进行数据分片。为了说明，假设您有一个数据库，用于存储零售商目录中所有产品的信息。您可以创建一些不同的分片，并根据每个产品的价格范围分配每个产品的信息，如下所示：</p><img src="/2024/03/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E7%89%87/v2-c5108a21084026fd72c06a91448fe6d7_r.jpg" class="" title="img"><p>基于范围的分片的主要好处是，它实现起来相对简单。每个分片都包含一组不同的数据，但它们都具有相同的模式，以及原始数据库。应用程序代码只读取数据所属的范围，并将其写入相应的分片。</p><p>另一方面，基于范围的分片并不能预防数据不均匀分布的现象，而有可能会出现前面提到的数据热点现象。查看示例图，即使每个分片拥有相同数量的数据，特定产品比其他产品获得更多关注的可能性也会很大。相应的，各个的分片将接收不成比例的读取操作。</p><h2 id="Directory-Based-Sharding-基于目录的分片"><a href="#Directory-Based-Sharding-基于目录的分片" class="headerlink" title="Directory Based Sharding 基于目录的分片"></a><strong>Directory Based Sharding 基于目录的分片</strong></h2><p>要实现基于目录的分片，必须创建并维护一个查找表，该查找表使用分片键来跟踪哪个分片包含哪些数据。简而言之，查找表是一个表，其中包含有关可以找到特定数据的静态信息集。下图显示了基于目录的分片的简单示例：</p><img src="/2024/03/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E7%89%87/v2-9a1b547e1f02ddd2db0c32e0289572b1_r.jpg" class="" title="img"><p>此处，Delivery Zone列被定义为分片键。将来自分片键的数据，连同每一行应该写入的分片写入查找表。这与基于范围的分片类似，但不是确定分片键的数据落入哪个范围，而是将每个键绑定到其自己的特定分片。如果分片键的基数很低，并且分片键存储键的范围没有意义，那么基于目录的分片比基于范围的分片要更好。请注意，它也不同于基于密钥的分片，因为它不通过散列函数处理分片键; 它只是根据查找表检查键值，以查看数据需要写入的位置。</p><p>基于目录的分片的主要吸引力在于其灵活性。基于范围的分片架构只能指定键值范围，而基于键的分片架构只能使用固定的哈希函数，如前所述，在以后更改该函数非常困难。另一方面，基于目录的分片允许您使用任何系统或算法将数据项分配给分片，使用这种方法动态添加分片也相对容易。</p><p>虽然基于目录的分片是这里讨论的最灵活的分片方法，但是在每次查询或写入之前连接到查找表，可能会对应用程序的性能产生不利影响。此外，查找表可能出现单点故障：如果查询表损坏或出现其他故障，它可能会影响数据库写入新数据或访问现有数据的能力。</p><h2 id="Should-I-Shard-我应该分片吗？"><a href="#Should-I-Shard-我应该分片吗？" class="headerlink" title="Should I Shard? 我应该分片吗？"></a><strong>Should I Shard? 我应该分片吗？</strong></h2><p>是否应该实现分片数据库架构，几乎总是一个争论的问题。有些人认为分片对于达到一定规模的数据库来说，是不可避免的结果。而另一些人则认为这是一个令人头疼的问题，除非绝对必要，否则应该避免，因为分片增加了操作的复杂性。</p><p>由于这种增加的复杂性，通常仅在处理非常大量的数据时才执行分片。以下是一些常见方案，可能对数据库分片的操作有所帮助：</p><p>· 应用程序数据量增长到超过单个数据库节点的存储容量。</p><p>· 对数据库的读写量，超过单个节点或其只读副本可以处理的量，从而导致响应时间增加或超时。</p><p>· 应用程序所需的网络带宽，超过单个数据库节点和任何只读副本可用的带宽，从而导致响应时间增加或超时。</p><p>在分片之前，您应该用尽所有其他选项来优化数据库。您可能需要考虑的一些优化包括：</p><p><strong>设置远程数据库。</strong>如果您使用的是一个整体应用程序，其中所有组件都位于同一个服务器上，那么可以通过将数据库移到它自己的机器上来提高数据库的性能。由于数据库的表保持不变，因此这不会增加分片的复杂性。但是，它仍然允许您垂直伸缩数据库，使其与基础结构的其他部分分离。</p><p><strong>实现缓存。</strong>如果您的应用程序的读取性能导致您遇到麻烦，那么缓存是一种可以帮助改进它的策略。缓存涉及临时存储已在内存中请求的数据，以便您以后更快地访问它。</p><p><strong>创建一个或多个只读副本。</strong>另一种有助于提高读取性能的策略，包括将数据从一个数据库服务器（主服务器）复制到一个或多个从服务器。在此之后，每次新的写操作在复制到从服务器之前都要先到主服务器，而读操作只对从服务器进行。像这样分发读写可以防止任何一台机器承担过多的负载，从而有助于防止速度下降和崩溃。请注意，创建读副本需要更多的服务器资源，因此花费更多的钱，这对一些人来说可能是一个很大的限制。</p><p><strong>升级到更大的服务器。</strong>在大多数情况下，将一个数据库服务器扩展到具有更多资源的计算机比分片需要更少的工作量。与创建只读副本一样，具有更多资源的服务器升级可能会花费更多的钱。因此，只有当它确实是您的最佳选择时，您才应该进行服务器扩容。</p><p>请记住，如果您的应用程序或网站增长超过某个点，这些策略本身都不足以提高性能。在这种情况下，分片可能确实是您的最佳选择。</p><h2 id="Conclusion-结语"><a href="#Conclusion-结语" class="headerlink" title="Conclusion 结语"></a><strong>Conclusion 结语</strong></h2><p>对于那些希望横向扩展数据库的人来说，分片是一个很好的解决方案。但是，它还会增加很多复杂性，并为您的应用程序创建更多潜在的故障点。分片对于某些人来说可能是必要的，但是创建和维护分片架构所需的时间和资源可能会超过对其他人的好处。</p><p>通过阅读这篇概念性文章，您应该更清楚地了解分片的优缺点。接下来，您可以使用这些见解来对分片数据库架构是否适合您，做出更明智的决定。</p><p>转载:<a href="https://zhuanlan.zhihu.com/p/57185574">数据库分片（Database Sharding)详解 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有栈协程和无栈协程</title>
      <link href="/2024/03/18/%E6%9C%89%E6%A0%88%E5%8D%8F%E7%A8%8B%E5%92%8C%E6%97%A0%E6%A0%88%E5%8D%8F%E7%A8%8B/"/>
      <url>/2024/03/18/%E6%9C%89%E6%A0%88%E5%8D%8F%E7%A8%8B%E5%92%8C%E6%97%A0%E6%A0%88%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="有栈协程与无栈协程"><a href="#有栈协程与无栈协程" class="headerlink" title="有栈协程与无栈协程"></a>有栈协程与无栈协程</h1><blockquote><p>进程的本质就是 <strong>一个程序的执行实例</strong>。<strong>在进程模型中，进程拥有对内存、I/O 通道、I/O 设备和文件等资源的控制权</strong>。</p><p>线程则是为了解决进程的执行效率而提出的。对于多核 CPU，多线程进程可以充分利用多核的特性，成倍地提升执行效率。</p><p>在现代操作系统中，我们可以认为线程是进程的更小粒度的划分，即进程包含了一个或多个线程。下图所示为，分别是单线程的进程模型和多线程的进程模型。</p></blockquote><span id="more"></span><img src="/2024/03/18/%E6%9C%89%E6%A0%88%E5%8D%8F%E7%A8%8B%E5%92%8C%E6%97%A0%E6%A0%88%E5%8D%8F%E7%A8%8B/1699696287989.png" class="" width="1699696287989"><h2 id="用户态-内核态线程"><a href="#用户态-内核态线程" class="headerlink" title="用户态&amp;内核态线程"></a>用户态&amp;内核态线程</h2><p><strong>用户态线程</strong> </p><p>在线程的概念提出时，操作系统并不支持线程，为了验证线程的可行性，研究人员就编写了一个线程的函数库，用函数库来实现线程。这个线程库包含了 <strong>创建线程</strong>、<strong>终止线程</strong> 等，开发者可以通过调用这些函数来实现所需的功能，如：<code>pthread_create</code>、<code>pthread_exit</code>、<code>pthread_join</code>、<code>pthread_yeild</code>。</p><p>此时，操作系统内核对这个库一无所知，从内核的角度开，它还是按照正常的方式进行管理，即 <strong>只能一次在一个 CPU 核上运行</strong>。事实上，这也是用户态线程的缺点，这些线程只能占用一个核，无法做到并行加速，而且由于用户态线程对操作系统透明，操作系统无法主动切换线程。对此，开发者需要为用户态线程定制调度算法。</p><p><strong>内核态线程</strong></p><p>现代操作系统都已经支持内核态线程了，为了实现线程，内核里就需要有用来记录系统中所有线程的线程表。当需要创建一个新的线程时，就需要进行一次 <strong>系统调用</strong>，然后由操作系统对线程表进行更新。</p><p>相比于用户态线程，由于操作系统知道内核态线程的存在，它就可以自由调度各个线程，从而充分利用多核，实现真正的并行。</p><p>不过，内核态线程也有缺点。每当操作系统进行线程调度时，就需要陷入内核态，而操作系统从 <strong>用户态到内核态</strong> 的切换是由开销的，所以说，<strong>内核态线程切换的代价要比用户态线程大</strong>，这些开销主要包括以下几个方面：</p><ul><li>上下文切换：即寄存器切换</li><li>特权模式切换：即调度算法中的动态特权级</li><li>内核检查：内核代码对用户不信任，需要进行额外的检查</li></ul><p>除此之外，线程表是存储在操作系统中固定的堆栈空间中，因此内核态线程的数量是有限的，扩展性比不上用户态线程。</p><p><strong>对比</strong></p><p>由于用户态线程和内核态线程的存在，我们也就能够理解教科书中所说的三种线程模型了，如下图所示：</p><img src="/2024/03/18/%E6%9C%89%E6%A0%88%E5%8D%8F%E7%A8%8B%E5%92%8C%E6%97%A0%E6%A0%88%E5%8D%8F%E7%A8%8B/1699696427775.png" class="" width="1699696427775"><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><blockquote><p>那么，协程到底是什么呢？事实上，协程就是 <strong>用户态线程</strong>。协程的调度完全由开发者进行控制，因此实现协程的关键也就是 <strong>实现一个用户态线程的调度器</strong>。由于协程是在用户态中实现调度，避免了内核态的上下文切换造成的性能损失，从而突破了线程在 IO 上的性能瓶颈。</p></blockquote><p>在理解了用户态线程后，其实不难看出，一个线程多个协程的情况下，在内核看来只有一个线程在运行，这些协程事实上是在串行运行，只能使用一个 CPU 核。因此，<strong>想要高效利用 CPU，我们还是得使用线程</strong>。协程最大的优势在于 <strong>协程的切换比线程的切度更快</strong>。那么，什么场景下更适合使用协程呢？</p><p>答案是：<strong>IO 密集型任务</strong>。IO 密集型任务的特点是 CPU 消耗少，其大部分时间都是在等待 IO 操作完成。对于这样的场景，一个线程足矣，因此适合采用协程。</p><h3 id="挂起和恢复"><a href="#挂起和恢复" class="headerlink" title="挂起和恢复"></a>挂起和恢复</h3><p>相比于函数，协程最大的特点就是支持 <strong>挂起/恢复</strong>。什么意思？我们来看下面这个场景就能明白。</p><img src="/2024/03/18/%E6%9C%89%E6%A0%88%E5%8D%8F%E7%A8%8B%E5%92%8C%E6%97%A0%E6%A0%88%E5%8D%8F%E7%A8%8B/1699696491968.png" class="" width="1699696491968"><p>上图中，控制流会在 <code>foo()</code> 和 <code>bar()</code> 之间进行切换。比如，在第 3 阶段时，控制流从 <code>foo()</code> 中再次转移到了 <code>bar()</code> 中，此时并不是简单的函数调用，而是从上一次离开 <code>bar()</code> 的位置 <code>std::cout &lt;&lt; "1"</code> 之后继续执行。</p><p>由此可见，协程与简单的函数调用之间的区别。实现协程的这种能力的关键，就是要实现 <strong>挂起/恢复</strong> 的能力。</p><h2 id="协程分类"><a href="#协程分类" class="headerlink" title="协程分类"></a>协程分类</h2><p>现代编程语言中，有很多都支持协程，虽然它们在实现细节上差异较大，但是总体而言仍然有章可循。</p><h2 id="按调用栈分类"><a href="#按调用栈分类" class="headerlink" title="按调用栈分类"></a>按调用栈分类</h2><p>由于协程必须支持 <strong>挂起/恢复</strong>，因此对于挂起点的状态保存就显得极其关键。我们知道，线程在切换时，它的中断状态会保存在调用栈中。事实上，协程的中断状态也可以通过开辟相应的调用栈来保存。因此，<strong>按照是否开辟相应的调用栈</strong>，我们可以将协程分为两类：</p><ul><li><strong>有栈协程</strong>（Stackful Coroutine）：每个协程都有自己的调用栈，类似于线程的调用栈。</li><li><strong>无栈协程</strong>（Stackless Coroutine）：协程没有自己的调用栈，挂起点的状态通过状态机或闭包等语法来实现。</li></ul><p>类似微信的 libco、阿里的 cooobjc、Golang 中的 goroutine、Lua 中的协程都是有栈协程；类似 ES6、Dart 中的 await/async、Python 的 Generator、Kotlin 中的协程、C++20 中的 cooroutine 都是无栈协程。</p><h3 id="有栈协程"><a href="#有栈协程" class="headerlink" title="有栈协程"></a>有栈协程</h3><p>有栈协程的一般实现是：在内存中给每个协程开辟一个栈内存，当协程挂起时会将它的运行时上下文（即栈空间）从系统栈中保存至其所分配的栈内存中，当协程恢复时会将其运行时上下文从栈内存中恢复至系统栈中</p><img src="/2024/03/18/%E6%9C%89%E6%A0%88%E5%8D%8F%E7%A8%8B%E5%92%8C%E6%97%A0%E6%A0%88%E5%8D%8F%E7%A8%8B/1699696524985.png" class="" width="1699696524985"><p>上图所示为在协程 <code>foo()</code> 和 <code>bar()</code> 之间切换时，栈空间的变化。很显然，<strong>有栈协程会改变函数调用栈</strong>。由于有栈协程需要保存各个协程自己的运行时上下文，一般会通过堆来分类内存空间。如果内存分配过小，可能会产生栈溢出；如果内存分配过大，可能会产生内存浪费。因此，很多编程语言对此进行了各种优化。</p><p>另一方面，当协程恢复时，需要将运行时上下文从堆中拷贝至栈中，这里也存在一定的开销。</p><p>虽然，有栈协程有上述的缺点，但是它可以在 <strong>任意函数调用层级的位置进行挂起</strong>，并转移调度权。事实上，这也是有栈协程的重要特定之一。</p><h3 id="无栈协程"><a href="#无栈协程" class="headerlink" title="无栈协程"></a>无栈协程</h3><p>与有栈协程相反，无栈协程不会为各个协程开辟相应的调用栈。无栈协程通常是 <strong>基于状态机或闭包</strong> 来实现。</p><p>基于状态机的解决方案一般是通过状态机，记录上次协程挂起时的位置，并基于此决定协程恢复时开始执行的位置。这个状态必须存储在栈以外的地方，从而避免状态与栈一同销毁。</p><p>以 <code>bar()</code> 为例，可以通过类似如下的方式实现挂起和恢复。从这种实现方式的角度来看，协程与函数无异，只不过前者会记录上次终端的位置，从而可以实现恢复执行的能力。当然，在实际过程中，恢复后的执行流可能会用到中断前的状态，因此无栈协程会将保存完整的状态，这些状态会被存储到堆上。</p><pre class=" language-c++"><code class="language-c++">void bar() {    static int state = 0;    switch (state) {        case 0: goto LABEL0;        case 1: goto LABEL1;        case 2: goto LABEL2;    }    LABEL0:    std::cout << "1";    LABEL1:    std::count << "2";    LABEL2:    std::count << "3";}</code></pre><p>上述只是一个简单的例子，具体场景中，无栈协程的控制流会依靠对协程本身编译生成的状态机的状态流来实现，变量保存也会通过闭包语法来实现。</p><p>相比于有栈协程，无栈协程不需要修改调用栈，也无需额外的内存来保存调用栈，因此它的开销会更小。但是，相比于保存运行时上下文这种实现方式，无栈协程的实现还是存在比较多的限制，最大缺点就是，它无法实现在任意函数调用层级的位置进行挂起。</p><h2 id="按调度方式分类"><a href="#按调度方式分类" class="headerlink" title="按调度方式分类"></a>按调度方式分类</h2><p>在调度过程中，根据协程调度权的目标，又可以将协程分为以下两种：</p><ul><li><strong>对称协程</strong>（Symmetric Coroutine）：任何一个协程都是相互独立且平等的，调度权可以在任意协程之间转移。</li><li><strong>非对称协程</strong>（Asymmetric Coroutine）：协程出让调度权的目标只能是它的调用者，即协程之间存在调用和被调用关系。</li></ul><h3 id="对称协程"><a href="#对称协程" class="headerlink" title="对称协程"></a>对称协程</h3><p>对称协程实际上已经非常接近线程的样子了，例如 Go 语言中的 go routine 可以通过读写不同的 channel 来实现控制权的自由转移。</p><h3 id="非对称协程"><a href="#非对称协程" class="headerlink" title="非对称协程"></a>非对称协程</h3><p>非对称协程的调用关系更加符合我们的思维方式，<strong>常见的语言对协程的实现大多是非对称协程</strong>，比如 Lua 的协程中当前协程调用 <code>yield</code> 总是会将调度权转移给 <code>resume</code> 它的协程。此外，还有 <code>async</code> 和 <code>await</code>，<code>await</code> 会将调度权转移到异步调用中。异步调用返回结果或抛出异常时总是会将调度权转回到 <code>await</code> 的位置。</p><p>从实现角度来看，非对称协程的实现更加自然，也相对容易。事实上，我们只要对非对称协程稍作修改，即可实现对称协程的能力。我们可以在非对称协程的基础上，添加一个中立的第三方作为协程调度权的分发中心，所有的协程在挂起时都将控制权转移到分发中心，分发中心根据参数来决定将调度权转移给哪个协程，如 Lua 的第三方库 coro，以及 kotlin 协程框架中基于 Channel 的通信等。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文对协程进行了初步的介绍。根据不同的维度，对协程进行分类讨论。事实上，不管怎么分类，<strong>协程的本质就是处理自身挂起和恢复的用户态线程</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简历制作工具推荐</title>
      <link href="/2024/03/18/%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C/"/>
      <url>/2024/03/18/%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="免费的简历制作中心"><a href="#免费的简历制作中心" class="headerlink" title="免费的简历制作中心"></a>免费的简历制作中心</h1><p><strong>推荐：</strong></p><ol><li><a href="https://www.polebrief.com/edit">https://www.polebrief.com/edit</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次性能测试</title>
      <link href="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>吞吐量：每秒钟系统能够处理的请求数、任务数。</li><li>响应时间：服务处理一个请求或一个任务的耗时。</li><li>错误率：一批请求中结果出错的请求所占比例。</li></ul></blockquote><span id="more"></span><h2 id="性能需求分析"><a href="#性能需求分析" class="headerlink" title="性能需求分析"></a>性能需求分析</h2><p><strong>项目业务</strong>： 注册，登录，视频上传，视频搜索</p><p><strong>需要压测的业务：</strong> 核心，用户量，与外部接口对接</p><p><strong>分析：</strong> 需要压测的业务  —–&gt; 登录，视频搜索，视频上传</p><p><strong>性能指标：</strong></p><p><strong>非硬件：</strong> 50%line &lt; 1s 90%line &lt; 1 s,TPS, 事务成功率100%（响应时间几十毫秒到几百毫秒）</p><p><strong>硬件：</strong> CPU 内存 &lt;= 70%</p><h2 id="性能方案设计"><a href="#性能方案设计" class="headerlink" title="性能方案设计"></a>性能方案设计</h2><p><strong>7大场景:</strong></p><p>单业务基准测试、单业务压力测试，单业务负载测试|综合业务基准测试，综合业务压力测试，综合业务负载测试，综合业务稳定性测试</p><p>单业务： 登录</p><p>基准：30min 2w登录</p><p>经过分析：</p><p>性能场景：</p><p>1s启动所有线程，压测5min，观察性能指标</p><p><strong>登录测试:</strong></p><p>1s内启动，20个线程组，持续300s</p><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704600219252.png" class="" width="1704600219252"><h2 id="docker内存使用情况图形化"><a href="#docker内存使用情况图形化" class="headerlink" title="docker内存使用情况图形化"></a>docker内存使用情况图形化</h2><pre class=" language-shell"><code class="language-shell">docker run --volume=/:/rootfs:ro --volume=/var/run:/var/run:rw --volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro --volume=/dev/disk/:/dev/disk:ro --publish=8080:8080 --detach=true --name=cadvisor --privileged --device=/dev/kmsg lagoudocker/cadvisor:v0.37.0</code></pre><h2 id="业务建模-脚本优化"><a href="#业务建模-脚本优化" class="headerlink" title="业务建模 脚本优化"></a>业务建模 脚本优化</h2><h2 id="执行测试-手机性能数据"><a href="#执行测试-手机性能数据" class="headerlink" title="执行测试 手机性能数据"></a>执行测试 手机性能数据</h2><h2 id="结果分析-性能测试报告"><a href="#结果分析-性能测试报告" class="headerlink" title="结果分析 性能测试报告"></a>结果分析 性能测试报告</h2><ol><li></li></ol><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704811139411.png" class="" width="1704811139411"><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704810863213.png" class="" width="1704810863213"><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704810934271.png" class="" width="1704810934271"><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704810957925.png" class="" width="1704810957925"><p><strong>APP:</strong></p><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704810984391.png" class="" width="1704810984391"><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704810991788.png" class="" width="1704810991788"><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704811001874.png" class="" width="1704811001874"><p><strong>mysql</strong></p><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704811044004.png" class="" width="1704811044004"><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704811054831.png" class="" width="1704811054831"><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704811060584.png" class="" width="1704811060584"><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704811072571.png" class="" width="1704811072571"><h3 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h3><p><strong>第一次测试：</strong></p><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704811670771.png" class="" width="1704811670771"><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704811697884.png" class="" width="1704811697884"><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704811710450.png" class="" width="1704811710450"><p>APP</p><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704811785643.png" class="" width="1704811785643"><p><strong>mysql</strong></p><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704811829003.png" class="" width="1704811829003"><p><strong>第二次测试</strong></p><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704813905750.png" class="" width="1704813905750"><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704813947796.png" class="" width="1704813947796"><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704814580852.png" class="" width="1704814580852"><p>APP</p><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704813973826.png" class="" width="1704813973826"><p>mysql</p><img src="/2024/03/18/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/1704813998091.png" class="" width="1704813998091">]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习记录</title>
      <link href="/2024/03/18/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/03/18/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="3月学习记录"><a href="#3月学习记录" class="headerlink" title="3月学习记录"></a>3月学习记录</h1><h2 id="2024-3-7"><a href="#2024-3-7" class="headerlink" title="2024-3-7"></a>2024-3-7</h2><p>今日打卡</p><p><strong>leetcode练习</strong></p><ul><li><a href="https://leetcode.cn/problems/minimum-path-sum/">64. 最小路径和</a></li><li><a href="https://leetcode.cn/problems/unique-paths/">62. 不同路径</a></li><li><a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串</a></li><li><a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a></li><li><a href="https://leetcode.cn/problems/pascals-triangle/">118. 杨辉三角</a></li><li><a href="https://leetcode.cn/problems/house-robber/">198. 打家劫舍</a></li><li><a href="https://leetcode.cn/problems/perfect-squares/">279. 完全平方数</a></li><li><a href="https://leetcode.cn/problems/coin-change/">322. 零钱兑换</a></li></ul><p><strong>背面试题</strong></p><p>Redis相关</p><ul><li>Redis的集群模式：主从，哨兵，cluster三种。</li><li>Redis使用惰性删除+定期删除策略配合使用来对过期的key进行删除</li><li>Redis的持久化：aof日志（以追加的方式写入，主要记录的是操作），rdb（对所有键值对的记录），混合模式（aof和rdb两种模式的混合使用）</li></ul><p><strong>缓存雪崩：</strong></p><ol><li>大量数据同时过期</li></ol><ul><li>均匀设计过期时间</li><li>互斥锁</li><li>双key策略</li><li>后台更新缓存，定时更新，消息队列通知更新。</li></ul><ol start="2"><li>Redis故障宕机</li></ol><ul><li>服务熔断</li><li>请求限流</li><li>构建Redis高可用集群。</li></ul><p><strong>缓存击穿：</strong></p><p> 频繁访问的热点数据过期：</p><ul><li>互斥锁</li><li>不给热点数据设置过期时间，由后台定期更新缓存</li></ul><p><strong>缓存穿透：</strong></p><p> 访问的数据既不再缓存也不在数据库</p><ul><li>非法请求的限制。</li><li>缓存空值或默认值。</li><li>使用布隆过滤器快速判断数据是否存在。</li></ul><p><strong>Redis的数据结构</strong></p><p> Redis提供了常见的5种数据结构</p><p>字符串（string），哈希（hash），列表（list），集合（Set），有序集合（ZSet）</p><p>● String 类型的应用场景：缓存对象、常规计数、分布式锁、共享 session 信息等。<br>● List 类型的应用场景：消息队列（但是有两个问题：1. 生产者需要自行实现全局唯一 ID；2. 不能以消费组形式消费数据）等。<br>● Hash 类型：缓存对象、购物车等。<br>● Set 类型：聚合计算（并集、交集、差集）场景，比如点赞、共同关注、抽奖活动等。<br>● Zset 类型：排序场景，比如排行榜、电话和姓名排序等。<br>● BitMap（2.2 版新增）：二值状态统计的场景，比如签到、判断用户登陆状态、连续签到用户总数等；<br>● HyperLogLog（2.8 版新增）：海量数据基数统计的场景，比如百万级网页 UV 计数等；<br>● GEO（3.2 版新增）：存储地理位置信息的场景，比如滴滴叫车；<br>● Stream（5.0 版新增）：消息队列，相比于基于 List 类型实现的消息队列，有这两个特有的特性：自动生成全局唯一消息ID，支持以消费组形式消费数据</p><p>学习Redis如何实现延迟队列.</p><p>采用zset来实现</p><img src="/2024/03/18/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1709822686830.png" class="" width="1709822686830"><p>Kafka面试题</p><p>Kafka的设计：</p><p>kafka是将消息以 topic 为单位归纳，发布消息的程序成为 Producer ，消费者的程序称为 Consumer</p><p>Kafka是以集群的方式运行的，可以由一个或多个服务组成，每个服务叫做 Broker， Producer通过网络将消息发送到 KafKa集群，集群向消费者提供消息，broker在中间起到一个代理保存消息的中间站。</p><h2 id="2024-3-8"><a href="#2024-3-8" class="headerlink" title="2024-3-8"></a>2024-3-8</h2><p>今日打卡</p><p>面试题</p><p>Redis</p><ul><li>Redis实现分布式锁：</li><li>1.使用set nx 命令，（解锁过程借助LUA脚本，解锁设计2部分，一部分是判断是否是自己的锁，另一部分就是删除锁操作，因为有2个操作，要保证一致性，所以采用LUA脚本来实现）；</li><li>2.RedLock（满足：一半以上结点响应，且响应时间小于设置的操作时间）。</li></ul><p>敲代码：</p><p>完成12306模拟项目，用户模块部分接口的测试。</p><p>查看了基于asynq的定时任务模块，发现，好像火车时间没有改，所以查不出数据，哈哈哈哈。等后面写完了，再更新一下数据看看。</p><p>做题：</p><ul><li><a href="https://leetcode.cn/problems/count-complete-tree-nodes/">222. 完全二叉树的节点个数</a></li><li><a href="https://leetcode.cn/problems/balanced-binary-tree/">110. 平衡二叉树</a></li><li><a href="https://leetcode.cn/problems/sum-of-left-leaves/">404. 左叶子之和</a></li><li><a href="https://leetcode.cn/problems/binary-tree-paths/">257. 二叉树的所有路径</a></li><li><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">513. 找树左下角的值</a></li><li><a href="https://leetcode.cn/problems/path-sum/">112. 路径总和</a></li><li><a href="https://leetcode.cn/problems/path-sum-ii/">113. 路径总和 II</a></li><li><a href="https://leetcode.cn/problems/all-paths-from-source-to-target/">797. 所有可能的路径</a></li></ul><p>学习图相关</p><p>dfs和bfs，了解升读<strong>优先搜索</strong>和广度<strong>优先搜索。</strong></p><blockquote><p>dfs是可一个方向去搜，不到黄河不回头，直到遇到绝境了，搜不下去了，再换方向（换方向的过程就涉及到了回溯）。</p><p>bfs是先把本节点所连接的所有节点遍历一遍，走到下一个节点的时候，再把连接节点的所有节点遍历一遍，搜索方向更像是广度，四面八方的搜索过程。</p></blockquote><h2 id="2024-3-9"><a href="#2024-3-9" class="headerlink" title="2024-3-9"></a>2024-3-9</h2><p>刷题：</p><ul><li><a href="https://leetcode.cn/problems/number-of-islands/">200. 岛屿数量</a></li><li><a href="https://leetcode.cn/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a></li><li><a href="https://leetcode.cn/problems/find-if-path-exists-in-graph/">1971. 寻找图中是否存在路径</a></li><li><a href="https://leetcode.cn/problems/redundant-connection/">684. 冗余连接</a></li><li><a href="https://leetcode.cn/problems/redundant-connection-ii/">685. 冗余连接 II</a></li></ul><p>算法学习：</p><p><strong>学习了DFS和BFS</strong></p><p><strong>学习并查集算法</strong></p><p>面试题：</p><p>Redis</p><ul><li>五种常见的Redis集合的实现</li></ul><p>计网学习：</p><ul><li>HTTPS，HTTP的握手过程</li></ul><p>准备重新搭建自己的博客。</p><h2 id="2024-3-10"><a href="#2024-3-10" class="headerlink" title="2024-3-10"></a>2024-3-10</h2><p>参加了leetcode第 388 场周赛</p><p>A了2道题跑路，呜呜呜</p><p>刷题leetcode hot 100</p><ul><li><a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/">124. 二叉树中的最大路径和</a></li><li><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/">108. 将有序数组转换为二叉搜索树</a></li><li><a href="https://leetcode.cn/problems/kth-smallest-element-in-a-bst/">230. 二叉搜索树中第K小的元素</a></li><li><a href="https://leetcode.cn/problems/binary-tree-right-side-view/">199. 二叉树的右视图</a></li><li><a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/">114. 二叉树展开为链表</a></li></ul><p>面试题：</p><ul><li>HTTP的RSA握手过程</li><li>了解了一下HTTP/1.1,HTTP/2,HTTP/3  </li><li>HTTP/3 的传输层采用的是UDP，通过QUIC协议 实现了 <strong>类似</strong> TCP的可靠性传输</li><li>了解IP协议相关技术：DNS,NAT,DHCP，ICMP</li></ul><p>呜呜呜，继续修改我的破博客.菜弄到 Twikoo 的评论部分，呜呜呜。</p><h2 id="2024-3-11"><a href="#2024-3-11" class="headerlink" title="2024-3-11"></a>2024-3-11</h2><p>为面试做准备，背面试：</p><p>了解了一些限流算法：</p><ol><li>固定窗口算法：设置固定时间内，处理请求的定值</li><li>滑动窗口算法：滑动窗口计数器是通过窗口再细分，并且按照时间滑动。避免了双倍请求突发</li><li>漏桶算法：</li><li>令牌桶算法：</li></ol><p>了解了一些常见的负载均很该算法：</p><ol><li>轮询</li><li>加权轮询</li><li>随机</li><li>最少连接</li><li>源IP哈希</li><li>响应时间</li><li>加权响应时间</li><li>一致性哈希</li><li>动态调整权重</li></ol><p>Redis 的缓存</p><p>如何避免缓存雪崩？缓存击穿？缓存穿透？</p><p>缓存雪崩：</p><p>1.把key的过期时间设置均匀； </p><p>2.不设置过期时间，我们可以通过后台服务来更新缓存数据，从而避免因为缓存失效造成的缓存雪崩，也可以在一定程度上避免缓存并发问题。</p><p>缓存击穿：</p><p>如果缓存中的<strong>某个热点数据过期</strong>了，此时大量的请求访问了该热点数据，就无法从缓存中读取，直接访问数据库，数据库很容易就被高并发的请求冲垮，这就是<strong>缓存击穿</strong>的问题。</p><ul><li>互斥锁方案（Redis 中使用 setNX 方法设置一个状态位，表示这是一种锁定状态），保证同一时间只有一个业务线程请求缓存，未能获取互斥锁的请求，要么等待锁释放后重新读取缓存，要么就返回空值或者默认值。</li><li>不给热点数据设置过期时间，由后台异步更新缓存，或者在热点数据准备要过期前，提前通知后台线程更新缓存以及重新设置过期时间；</li></ul><p>缓存穿透：</p><ol><li>非法请求的限制</li><li>设置空值或默认值</li><li>使用布隆过滤器</li></ol><p>看了会MYSQL面试题</p><h2 id="2024-3-12"><a href="#2024-3-12" class="headerlink" title="2024-3-12"></a>2024-3-12</h2><p>今天电脑屏幕坏了，拿去修，没有什么记录。</p><p>大概就看了一下面试题</p><p>了解了Redis里面DB结构</p><p>dict</p><p>RedisObj</p><p>原来Redis里面的Rehash() 也是采用渐进式的，我之前就看到go里面的hash扩容是渐进式的。</p><p>了解了各种数据类型的实现</p><ol><li>string</li><li>list</li><li>hash</li><li>set</li><li>zset</li><li>bitmap</li><li>hyperloglog（这个没看明白）</li><li>geo</li><li>stream</li></ol><p>SDS，链表，压缩链表，哈希表，整数集合，跳表，quicklist，listpack</p><p>别说，我觉得跳表的设计还蛮厉害的，</p><h2 id="2024-3-13"><a href="#2024-3-13" class="headerlink" title="2024-3-13"></a>2024-3-13</h2><p>准备字节一面中，下午4点准备一面。加油。</p><p>学习打卡：</p><ul><li>指针在go中的作用：1，引用传递；2.动态内存分配；3.修改函数外部变量；4.数据结构底层操作；5.低级内存操作；6接口实现</li></ul><p>做题：</p><p>都是回溯算法。dfs的求解过程。</p><ul><li><a href="https://leetcode.cn/problems/subsets/">78. 子集</a></li><li><a href="https://leetcode.cn/problems/subsets-ii/">90. 子集 II</a></li></ul><h2 id="2024-3-14"><a href="#2024-3-14" class="headerlink" title="2024-3-14"></a>2024-3-14</h2><p>准备面试题：</p><ul><li>看了同步/异步，阻塞/非阻塞。(同步，异步其实是接收方返回消息的方式)（阻塞，非阻塞看的是发送方等待的时候的状态）</li></ul><p>刷题:</p><ul><li><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></li><li><a href="https://leetcode.cn/problems/combination-sum/">39. 组合总和</a></li><li><a href="https://leetcode.cn/problems/generate-parentheses/">22. 括号生成</a></li><li><a href="https://leetcode.cn/problems/number-of-islands/">200. 岛屿数量</a></li><li><a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></li><li><a href="https://leetcode.cn/problems/search-insert-position/">35. 搜索插入位置</a></li><li><a href="https://leetcode.cn/problems/single-number/">136. 只出现一次的数字</a></li><li><a href="https://leetcode.cn/problems/majority-element/">169. 多数元素</a></li><li><a href="https://leetcode.cn/problems/sort-colors/">75. 颜色分类</a></li><li><a href="https://leetcode.cn/problems/next-permutation/">31. 下一个排列</a></li><li><a href="https://leetcode.cn/problems/find-the-duplicate-number/">287. 寻找重复数</a>(想不到</li></ul><h2 id="2024-3-15"><a href="#2024-3-15" class="headerlink" title="2024-3-15"></a>2024-3-15</h2><p>起床学习啦！！！</p><p>刷题：</p><ul><li><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a> （写了一下不采用递归的方式，感觉其实还行，就是使用queue模拟一下就好了）</li><li><a href="https://leetcode.cn/problems/assign-cookies/">455. 分发饼干</a></li><li><a href="https://leetcode.cn/problems/jump-game/">55. 跳跃游戏</a></li><li><a href="https://leetcode.cn/problems/jump-game-ii/">45. 跳跃游戏 II</a></li><li><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></li><li><a href="https://leetcode.cn/problems/path-sum-iii/">437. 路径总和 III</a></li><li><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a></li><li><a href="https://leetcode.cn/problems/word-search/">79. 单词搜索</a></li><li><a href="https://leetcode.cn/problems/n-queens/">51. N 皇后</a></li></ul><p><strong>leetcode终于300题了。</strong></p><p><strong>看面试题</strong></p><h2 id="2024-3-16"><a href="#2024-3-16" class="headerlink" title="2024-3-16"></a>2024-3-16</h2><p>刷题:</p><ul><li><a href="https://leetcode.cn/problems/spiral-matrix/">54. 螺旋矩阵</a></li><li><a href="https://leetcode.cn/problems/rotate-image/">48. 旋转图像</a></li><li><a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/">240. 搜索二维矩阵 II</a></li><li><a href="https://leetcode.cn/problems/search-a-2d-matrix/">74. 搜索二维矩阵</a></li></ul><h2 id="2024-3-17"><a href="#2024-3-17" class="headerlink" title="2024-3-17"></a>2024-3-17</h2><p>看面试题：</p><ul><li>负载均衡算法</li></ul><p>刷题：</p><ul><li><a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/">1005. K 次取反后最大化的数组和</a></li><li><a href="https://leetcode.cn/problems/gas-station/">134. 加油站</a></li><li><a href="https://leetcode.cn/problems/candy/">135. 分发糖果</a></li><li><a href="https://leetcode.cn/problems/lemonade-change/">860. 柠檬水找零</a></li><li><a href="https://leetcode.cn/problems/same-tree/">100. 相同的树</a></li><li><a href="https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/">103. 二叉树的锯齿形层序遍历</a></li></ul><p>算法图的遍历</p><p>广度优先</p><p>深度优先</p><h2 id="2024-3-18"><a href="#2024-3-18" class="headerlink" title="2024-3-18"></a>2024-3-18</h2><p>刷题：</p><ul><li><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/">107. 二叉树的层序遍历 II</a></li><li><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/">116. 填充每个节点的下一个右侧节点指针</a></li><li><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/">117. 填充每个节点的下一个右侧节点指针 II</a></li></ul><p><strong>LeetCode 热题100 复习</strong></p><p>面试题：</p><p>关于跨域问题和两种请求（简单请求和非简单请求）</p><h1 id="CS自学指南学习打卡"><a href="#CS自学指南学习打卡" class="headerlink" title="CS自学指南学习打卡"></a>CS自学指南学习打卡</h1><h2 id="编程入门"><a href="#编程入门" class="headerlink" title="编程入门"></a>编程入门</h2><h3 id="MIT-Missing-Semester"><a href="#MIT-Missing-Semester" class="headerlink" title="MIT-Missing-Semester"></a>MIT-Missing-Semester</h3><p><strong>第一节：</strong>Course overview + the shell <a href="https://missing.csail.mit.edu/2020/course-shell/">https://missing.csail.mit.edu/2020/course-shell/</a></p><p><strong>第二节</strong>：Shell Tools and Scripting <a href="https://missing.csail.mit.edu/2020/shell-tools/">https://missing.csail.mit.edu/2020/shell-tools/</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口测试</title>
      <link href="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>接口性能测试与调优相关一直是属于无经验状态。思考提升自己的能力，是否要学会压力测试？</p></blockquote><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703297958629.png" class="" width="1703297958629"><span id="more"></span><h1 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a>JMeter</h1><blockquote><p>Apache JMeter 是一种Java框架，用于各种负载测试，性能测试和功能测试。</p></blockquote><p>注意：测试容易受到网络抖动的干扰，服务器硬件配置环境影响；因此压力测试一般情况下，都应该在内网进行，不在外网去测试；</p><p>官网：<a href="https://jmeter.apache.org/">https://jmeter.apache.org/</a><br>教程：<a href="https://jmeter.apache.org/usermanual/index.html">Apache JMeter - User’s Manual</a></p><p>镜像下载地址：<a href="https://jmeter.apache.org/">Apache JMeter - Apache JMeter™</a></p><p>windows可以使用图形化界面进行测试，linux建议使用命令模式进行测试。但是为了测试的便捷性，我们使用jmeter的图形化界面进行压力测试。</p><p><strong>下载完成后可以尝试给JMeter配置一下环境变量</strong></p><p>运行:点击 jmeter.bat 即可</p><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703298924334.png" class="" width="1703298924334"><p><strong>打开后：</strong></p><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703299003178.png" class="" width="1703299003178"><p>配置中文</p><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703300701946.png" class="" width="1703300701946"><h1 id="使用JMeter对成程序接口进行测试"><a href="#使用JMeter对成程序接口进行测试" class="headerlink" title="使用JMeter对成程序接口进行测试"></a>使用JMeter对成程序接口进行测试</h1><p><strong>首先如下程序，我们会进行一秒种的睡眠</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/gin-gonic/gin"</span>    <span class="token string">"net/http"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">HelloHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 睡一秒</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> HelloHandler<span class="token punctuation">)</span>    <span class="token boolean">_</span> <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>测试：</p><p><strong>1）新建压力测试</strong></p><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703300781987.png" class="" width="1703300781987"><p><strong>2）配置线程组</strong></p><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703301114125.png" class="" width="1703301114125"><ul><li>线程数： 5000 ， 线程数量</li><li>ramp-up：表示在指定时间之内把这些线程全部启动起来。 这里表示 5s以内把 5000 个线程全部启动起来。</li><li>循环次数：20 ,表示把 5000 thread /5s 循环 20 次</li></ul><p><strong>3）配置HTTP接口</strong></p><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703301425879.png" class="" width="1703301425879"><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703301436991.png" class="" width="1703301436991"><p>选择Java，选择keepalive方式，使用长连接的方式，防止频繁的建立连接，关闭连接消耗性能，这样我们的压测的性能消耗就会有部分消耗在建立，关闭连接的网络消耗上，这样会导致我们的压测数据不准确</p><p><strong>4）配置结果监听：</strong></p><p>配置监听器：监听压测结果【聚合报告和汇总结果很类似，看一个就行】</p><ol><li>聚合报告：查询结果信息聚合汇总，例如样本、平均值、通吐量、最大值、最小值… <ol><li>图像结果：分析了所有请求的平均值、终止、偏离值和通吐量之间的关系。</li></ol></li><li>汇总结果：汇总压测结果 <ol><li>汇总图：将压测结果以图像形式展示</li></ol></li><li>察看结果树：记录每一次压测请求</li></ol><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703301641974.png" class="" width="1703301641974"><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703301659867.png" class="" width="1703301659867"><p>启动后保存报告，查看gin程序</p><p><strong><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703301786020.png" class="" width="1703301786020"></strong></p><h1 id="查看报告"><a href="#查看报告" class="headerlink" title="查看报告"></a>查看报告</h1><p><strong>1）聚合报告：</strong></p><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703301977191.png" class="" width="1703301977191"><p>样本（sample）: 发送请求的总样本数量</p><p>响应时间【单位ms】： </p><ul><li>平均值（average）：平均的响应时间</li><li>中位数（median）: 中位数的响应时间，50%请求的响应时间</li><li>90%百分位（90% Line）: 90%的请求的响应时间，意思就是说90%的请求是&lt;=1149ms返回，另外10%的请求是大于等于1149ms返回的。</li><li>95%百分位（95% Line）: 95%的请求的响应时间，95%的请求都落在1463ms之内返回的</li><li>99%百分位（99% Line）: 99%的请求的响应时间</li><li>最小值(min)：请求返回的最小时间，其中一个用时最少的请求</li><li>最大值(max)：请求返回的最大时间，其中一个用时最大的请求</li></ul><p>异常（error）: 出现错误的百分比，错误率=错误的请求的数量/请求的总数</p><p>吞吐量TPS（throughout）: 吞吐能力，这个才是我们需要的并发数!!!</p><p>Received KB/sec—-每秒从服务器端接收到的数据量</p><p>Sent KB/sec—-每秒从客户端发送的请求的数量</p><p><strong>2）汇总报告</strong></p><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703302534564.png" class="" width="1703302534564"><p>样本（sample）: 发送请求的总样本数量</p><p>响应时间【单位ms】： </p><ul><li>平均值（average）：平均的响应时间</li><li>最小值(min)：请求返回的最小时间，其中一个用时最少的请求</li><li>最大值(max)：请求返回的最大时间，其中一个用时最大的请求</li><li>标准偏差：度量响应时间分布的分散程度的标准，衡量响应时间值偏离平均响应时间的程度。标准偏差越小，偏离越少，反之亦然。</li></ul><p>异常（error）: 出现错误的百分比，错误率=错误的请求的数量/请求的总数</p><p>吞吐量TPS（throughout）: 吞吐能力，这个才是我们需要的并发数</p><p>每秒接收 KB/sec—-每秒从服务器端接收到的数据量</p><p>每秒发送KB/sec—-每秒从客户端发送的请求的数量</p><p>平均字节数</p><p><strong>3）查看结果树</strong></p><p>记录了样本的每一次请求</p><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703302763617.png" class="" width="1703302763617"><p><strong>4）图形结果</strong></p><p>分析了所有请求的平均值、终止、偏离值和通吐量之间的关系</p><ul><li>横坐标：为请求数量，单位个数</li><li>纵坐标：响应时间，单位ms</li></ul><img src="/2024/03/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/1703303814783.png" class="" width="1703303814783"><h1 id="线程属性参数原理"><a href="#线程属性参数原理" class="headerlink" title="线程属性参数原理"></a>线程属性参数原理</h1><blockquote><p>线程属性参数原理结论：</p><ul><li>线程数设置：根据项目并发需求确定</li><li>Ramp-Up Period设置：不宜过小也不宜设置过大，经验的做法是设置ramp-up period等于总线程数</li><li>循环次数：决定测试执行时间</li></ul></blockquote><h2 id="参数基本概念"><a href="#参数基本概念" class="headerlink" title="参数基本概念"></a>参数基本概念</h2><p><strong>线程数：</strong></p><ul><li>线程组常用来模拟并发用户访问，每个线程均独立运行测试计划。</li></ul><p><strong>循环次数：循环执行多少次操作</strong></p><ul><li>循环次数表示了循环执行多少次操作！循环次数直接决定整个测试单个线程的执行时间，和整体测试执行时间。<ul><li>单线程执行时间 = 单请求平均响应时间 * 循环次数</li><li>整个测试耗时 = 单线程执行时间 + (Ramp-Up - Ramp-Up / 线程数)</li></ul></li></ul><p><strong>Ramp-Up：建立全部线程耗时</strong></p><ul><li>Ramp-Up Period(in-seconds)代表隔多长时间执行， 0 代表同时并发</li><li>用于告知JMeter 要在多长时间内建立全部的线程，默认值是 0 。</li></ul><h2 id="为什么需要有Ramp-Up-Period，立刻创建出来所有的线程不是更好？"><a href="#为什么需要有Ramp-Up-Period，立刻创建出来所有的线程不是更好？" class="headerlink" title="为什么需要有Ramp-Up Period，立刻创建出来所有的线程不是更好？"></a>为什么需要有Ramp-Up Period，立刻创建出来所有的线程不是更好？</h2><ul><li>目的是为了模拟大部分网站的真实用户并发场景</li><li>对于绝大多数的网址或应用，更真实的情况是并发用户逐渐递增，而不是从一开始便立即有大量并发的用户，“ramp-up period”概念的引入可以覆盖测试这个场景；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlc和sqlx的使用</title>
      <link href="/2024/03/18/sqlx%E5%92%8Csqlc/"/>
      <url>/2024/03/18/sqlx%E5%92%8Csqlc/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是sqlc和sqlx"><a href="#什么是sqlc和sqlx" class="headerlink" title="什么是sqlc和sqlx?"></a>什么是sqlc和sqlx?</h1><blockquote><p>github上有解释，可以自行查找</p><ul><li><a href="https://github.com/sqlc-dev/sqlc">https://github.com/sqlc-dev/sqlc</a></li><li><a href="https://github.com/jmoiron/sqlx">https://github.com/jmoiron/sqlx</a></li></ul></blockquote><img src="/2024/03/18/sqlx%E5%92%8Csqlc/1702875673126.png" class="" width="1702875673126"><img src="/2024/03/18/sqlx%E5%92%8Csqlc/1702875683569.png" class="" width="1702875683569"><span id="more"></span><h1 id="sqlx的使用"><a href="#sqlx的使用" class="headerlink" title="sqlx的使用"></a>sqlx的使用</h1><h2 id="sqlx连接数据库–Connect"><a href="#sqlx连接数据库–Connect" class="headerlink" title="sqlx连接数据库–Connect"></a>sqlx连接数据库–Connect</h2><blockquote><p>连接mysql数据库</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span>    <span class="token string">"github.com/jmoiron/sqlx"</span><span class="token punctuation">)</span><span class="token keyword">var</span> DB <span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB<span class="token keyword">func</span> <span class="token function">initMysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dsn <span class="token operator">:=</span> <span class="token string">"root:123456@tcp(127.0.0.1:3306)/demo"</span>    DB<span class="token punctuation">,</span> err <span class="token operator">=</span> sqlx<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> dsn<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token boolean">_</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"database connect error: %v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    DB<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>    DB<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre><h2 id="sqlx查询数据–Get-Select"><a href="#sqlx查询数据–Get-Select" class="headerlink" title="sqlx查询数据–Get,Select"></a>sqlx查询数据–Get,Select</h2><blockquote><p>查询单行记录可以使用</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Id        <span class="token builtin">int64</span>  <span class="token string">`db:"id"`</span>    Age       <span class="token builtin">int64</span>  <span class="token string">`db:"age"`</span>    FirstName <span class="token builtin">string</span> <span class="token string">`db:"firstName"`</span>    LastName  <span class="token builtin">string</span> <span class="token string">`db:"lastName"`</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">QueryRowById</span><span class="token punctuation">(</span>id <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>user User<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    err <span class="token operator">=</span> DB<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token string">"select * from user where id = ?"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre><blockquote><p>查询多行记录</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">SelectMData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> list <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User    err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token string">"select * from user order by id desc"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">,</span> err<span class="token punctuation">}</span></code></pre><h2 id="sqlx的Exec执行sql"><a href="#sqlx的Exec执行sql" class="headerlink" title="sqlx的Exec执行sql"></a>sqlx的Exec执行sql</h2><blockquote><p>Exec and MustExec get a connection from the connection pool and executes the provided query on the server. For drivers that do not support ad-hoc query execution, a prepared statement <em>may</em> be created behind the scenes to be executed. The connection is returned to the pool before the result is returned.</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ExecSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    schema <span class="token operator">:=</span> <span class="token string">`CREATE TABLE place (    country text,    city text NULL,    telcode integer);`</span>    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// or, you can use MustExec, which panics on error</span>    cityState <span class="token operator">:=</span> <span class="token string">`INSERT INTO place (country, telcode) VALUES (?, ?)`</span>    countryCity <span class="token operator">:=</span> <span class="token string">`INSERT INTO place (country, city, telcode) VALUES (?, ?, ?)`</span>    DB<span class="token punctuation">.</span><span class="token function">MustExec</span><span class="token punctuation">(</span>cityState<span class="token punctuation">,</span> <span class="token string">"Hong Kong"</span><span class="token punctuation">,</span> <span class="token number">852</span><span class="token punctuation">)</span>    DB<span class="token punctuation">.</span><span class="token function">MustExec</span><span class="token punctuation">(</span>cityState<span class="token punctuation">,</span> <span class="token string">"Singapore"</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">)</span>    DB<span class="token punctuation">.</span><span class="token function">MustExec</span><span class="token punctuation">(</span>countryCity<span class="token punctuation">,</span> <span class="token string">"South Africa"</span><span class="token punctuation">,</span> <span class="token string">"Johannesburg"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="sqlx绑定数据"><a href="#sqlx绑定数据" class="headerlink" title="sqlx绑定数据"></a>sqlx绑定数据</h2><blockquote><ul><li>MySQL uses the <code>?</code> variant shown above</li><li>PostgreSQL uses an enumerated <code>$1</code>, <code>$2</code>, etc bindvar syntax</li><li>SQLite accepts both <code>?</code> and <code>$1</code> syntax</li><li>Oracle uses a <code>:name</code> syntax</li></ul></blockquote><h2 id="sqlx查询–Query"><a href="#sqlx查询–Query" class="headerlink" title="sqlx查询–Query"></a>sqlx查询–Query</h2><blockquote><p>Query is the primary way to run queries with database/sql that return row results. Query returns an <code>sql.Rows</code> object and an error:</p></blockquote><p>Query的使用</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">QueryDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 查询数据库</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 迭代器取数据</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> id <span class="token builtin">int64</span>        <span class="token keyword">var</span> firstNam <span class="token builtin">string</span>        <span class="token keyword">var</span> lastname <span class="token builtin">string</span>        <span class="token keyword">var</span> age <span class="token builtin">int64</span>        rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>firstNam<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lastname<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"id:%d, firstname:%s, lastname:%s, age:%d\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> firstNam<span class="token punctuation">,</span> lastname<span class="token punctuation">,</span> age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Queryx使用</p><blockquote><p>The sqlx extension <code>Queryx</code> behaves exactly as Query does, but returns an <code>sqlx.Rows</code>, which has extended scanning behaviors:</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">QueryxDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Queryx</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> u User        err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">StructScan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"id:%d, firstname:%s, lastname:%s, age:%d\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> u<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> u<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span> u<span class="token punctuation">.</span>Age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="sqlx的Transactions"><a href="#sqlx的Transactions" class="headerlink" title="sqlx的Transactions"></a>sqlx的Transactions</h2><blockquote><p>To use transactions, you must create a transaction handle with <code>DB.Begin()</code>. Code like this <strong>will not work</strong>:</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// this will not work if connection pool > 1</span>db<span class="token punctuation">.</span><span class="token function">MustExec</span><span class="token punctuation">(</span><span class="token string">"BEGIN;"</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">MustExec</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">MustExec</span><span class="token punctuation">(</span><span class="token string">"COMMIT;"</span><span class="token punctuation">)</span></code></pre><p>请记住，Exec和所有其他查询谓词都会向DB请求连接，然后每次将其返回到池中。不能保证您将接收到执行BEGIN语句的相同连接。因此，要使用事务，必须使用DB.Begin()</p><pre class=" language-go"><code class="language-go">tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 或者</span>tx <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">MustBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>tx<span class="token punctuation">.</span><span class="token function">MustExec</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="sqlx的Prepared-Statements"><a href="#sqlx的Prepared-Statements" class="headerlink" title="sqlx的Prepared Statements"></a>sqlx的Prepared Statements</h2><pre class=" language-go"><code class="language-go">stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">`SELECT * FROM place WHERE telcode=?`</span><span class="token punctuation">)</span>row <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span> tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>txStmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">`SELECT * FROM place WHERE telcode=?`</span><span class="token punctuation">)</span>row <span class="token operator">=</span> txStmt<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token number">852</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Preparex</span>stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Preparex</span><span class="token punctuation">(</span><span class="token string">`SELECT * FROM place WHERE telcode=?`</span><span class="token punctuation">)</span><span class="token keyword">var</span> p Placeerr <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token number">852</span><span class="token punctuation">)</span></code></pre><h2 id="sqlx–Query-Helpers"><a href="#sqlx–Query-Helpers" class="headerlink" title="sqlx–Query Helpers"></a>sqlx–Query Helpers</h2><p>In Queries</p><pre class=" language-go"><code class="language-go">SELECT <span class="token operator">*</span> FROM users WHERE level <span class="token function">IN</span> <span class="token punctuation">(</span>?<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> levels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE level IN (?);"</span><span class="token punctuation">,</span> levels<span class="token punctuation">)</span><span class="token keyword">var</span> levels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>query<span class="token punctuation">,</span> args<span class="token punctuation">,</span> err <span class="token operator">:=</span> sqlx<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE level IN (?);"</span><span class="token punctuation">,</span> levels<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// sqlx.In returns queries with the `?` bindvar, we can rebind it for our backend</span>query <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Rebind</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span></code></pre><p>Named Queries</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// named query with a struct</span>p <span class="token operator">:=</span> Place<span class="token punctuation">{</span>Country<span class="token punctuation">:</span> <span class="token string">"South Africa"</span><span class="token punctuation">}</span>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">NamedQuery</span><span class="token punctuation">(</span><span class="token string">`SELECT * FROM place WHERE country=:country`</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// named query with a map</span>m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"city"</span><span class="token punctuation">:</span> <span class="token string">"Johannesburg"</span><span class="token punctuation">}</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">NamedExec</span><span class="token punctuation">(</span><span class="token string">`SELECT * FROM place WHERE city=:city`</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>p <span class="token operator">:=</span> Place<span class="token punctuation">{</span>TelephoneCode<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">}</span>pp <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Place<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// select all telcodes > 50</span>nstmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">PrepareNamed</span><span class="token punctuation">(</span><span class="token string">`SELECT * FROM place WHERE telcode > :telcode`</span><span class="token punctuation">)</span>err <span class="token operator">=</span> nstmt<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pp<span class="token punctuation">,</span> p<span class="token punctuation">)</span>arg <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token string">"published"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"authors"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>query<span class="token punctuation">,</span> args<span class="token punctuation">,</span> err <span class="token operator">:=</span> sqlx<span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM articles WHERE published=:published AND author_id IN (:authors)"</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span>query<span class="token punctuation">,</span> args<span class="token punctuation">,</span> err <span class="token operator">:=</span> sqlx<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span>query <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Rebind</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span></code></pre><h2 id="sqlx–Controlling-Name-Mapping"><a href="#sqlx–Controlling-Name-Mapping" class="headerlink" title="sqlx–Controlling Name Mapping"></a>sqlx–Controlling Name Mapping</h2><p>用作StructScans目标的结构字段必须大写，以便sqlx可以访问。因此，sqlx使用NameMapper来应用字符串。降低字段名称以将它们映射到行结果中的列。这并不总是理想的，这取决于您的模式，因此sqlx允许以多种方式定制映射。</p><p>其中最简单的方法是使用sqlx.DB为数据库句柄设置它。MapperFunc，它接收一个func(string) string类型的参数。如果你的库需要一个特定的映射器，并且你不想毒害你收到的sqlx.DB，你可以创建一个副本在库中使用，以确保一个特定的默认映射:</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// if our db schema uses ALLCAPS columns, we can use normal fields</span>db<span class="token punctuation">.</span><span class="token function">MapperFunc</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span>ToUpper<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// suppose a library uses lowercase columns, we can create a copy</span><span class="token builtin">copy</span> <span class="token operator">:=</span> sqlx<span class="token punctuation">.</span><span class="token function">NewDb</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">DriverName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">copy</span><span class="token punctuation">.</span><span class="token function">MapperFunc</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span>ToLower<span class="token punctuation">)</span></code></pre><p>每个sqlx. db使用sqlx/reflectx包的映射器来实现底层映射，并将活动映射器公开为sqlx. db .Mapper。您可以通过直接设置来进一步定制DB上的映射:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"github.com/jmoiron/sqlx/reflectx"</span> <span class="token comment" spellcheck="true">// Create a new mapper which will use the struct field tag "json" instead of "db"</span>db<span class="token punctuation">.</span>Mapper <span class="token operator">=</span> reflectx<span class="token punctuation">.</span><span class="token function">NewMapperFunc</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span>ToLower<span class="token punctuation">)</span></code></pre><h2 id="sqlx–-Connection-Pool"><a href="#sqlx–-Connection-Pool" class="headerlink" title="sqlx– Connection Pool"></a>sqlx– Connection Pool</h2><blockquote><p>Statement preparation and query execution require a connection, and the DB object will manage a pool of them so that it can be safely used for concurrent querying. There are two ways to control the size of the connection pool as of Go 1.2:</p></blockquote><ul><li><code>DB.SetMaxIdleConns(n int)</code></li><li><code>DB.SetMaxOpenConns(n int)</code></li></ul><p>默认情况下，池无限制地增长，只要池中没有可用的空闲连接，就会创建连接。您可以使用DB。SetMaxOpenConns设置池的最大大小。未使用的连接被标记为空闲，如果不需要则关闭。为了避免建立和关闭大量连接，请使用DB设置最大空闲大小。SetMaxIdleConns设置为适合您的查询负载的大小。</p><p>一不小心抓住关系不放很容易惹上麻烦。为了防止这种情况:</p><ul><li><p>确保Scan()每个Row对象</p></li><li><p>确保使用Close()或通过Next()对每个Rows对象进行完全迭代</p></li><li><p>确保每个事务通过Commit()或Rollback()返回其连接</p></li></ul><p>如果您忽略了这些事情中的一件，它们使用的连接可能会被保留到垃圾收集，并且您的数据库最终将立即创建更多的连接以补偿它使用的连接。注意，Rows.Close()可以安全地调用多次，所以不要害怕在不必要的地方调用它。</p><h1 id="sqlx-Squirrel"><a href="#sqlx-Squirrel" class="headerlink" title="sqlx + Squirrel"></a>sqlx + Squirrel</h1><p><strong>Squirrel</strong></p><blockquote><p><strong>Squirrel is not an ORM.</strong> For an application of Squirrel, check out <a href="https://github.com/Masterminds/structable">structable, a table-struct mapper</a></p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span>    <span class="token string">"github.com/jmoiron/sqlx"</span><span class="token punctuation">)</span><span class="token keyword">import</span> sq <span class="token string">"github.com/Masterminds/squirrel"</span><span class="token keyword">var</span> DB <span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB<span class="token keyword">func</span> <span class="token function">initMysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dsn <span class="token operator">:=</span> <span class="token string">"root:123456@tcp(127.0.0.1:3306)/demo"</span>    DB<span class="token punctuation">,</span> err <span class="token operator">=</span> sqlx<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> dsn<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token boolean">_</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"database connect error: %v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    DB<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>    DB<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello squirrel"</span><span class="token punctuation">)</span>    <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">initMysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    sql<span class="token punctuation">,</span> args<span class="token punctuation">,</span> err <span class="token operator">:=</span> sq<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">From</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Where</span><span class="token punctuation">(</span>sq<span class="token punctuation">.</span>Eq<span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"sql: %s, args: %v, err: %v\n"</span><span class="token punctuation">,</span> sql<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// select * from user where id = 2</span>    <span class="token keyword">var</span> id <span class="token builtin">int64</span>    <span class="token keyword">var</span> firstNam <span class="token builtin">string</span>    <span class="token keyword">var</span> lastname <span class="token builtin">string</span>    <span class="token keyword">var</span> age <span class="token builtin">int64</span>    err <span class="token operator">=</span> DB<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">,</span> <span class="token operator">&amp;</span>firstNam<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lastname<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"id:%d, firstname:%s, lastname:%s, age:%d\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> firstNam<span class="token punctuation">,</span> lastname<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端文件上传</title>
      <link href="/2024/03/18/%E5%89%8D%E7%AB%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2024/03/18/%E5%89%8D%E7%AB%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>用于记录我开发过程中碰到的文件上传方式</p></blockquote><span id="more"></span><h1 id="material-ui的文件上传"><a href="#material-ui的文件上传" class="headerlink" title="material ui的文件上传"></a>material ui的文件上传</h1><p>如果您正在使用 Material UI 并想要实现图片上传功能，可以使用 Material UI 的 <code>Input</code> 组件和 <code>IconButton</code> 组件，以及 HTML 的 <code>input</code> 标签和 <code>label</code> 标签来实现。</p><p>首先，您需要在 React 组件中创建一个 <code>state</code> 来存储上传的图片，例如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>selectedFile<span class="token punctuation">,</span> setSelectedFile<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后，在 render 函数中，您可以创建一个包含 <code>Input</code> 组件和 <code>IconButton</code> 组件的 <code>label</code> 标签，如下所示：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">"upload-photo"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Input    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> display<span class="token punctuation">:</span> <span class="token string">'none'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    id<span class="token operator">=</span><span class="token string">"upload-photo"</span>    type<span class="token operator">=</span><span class="token string">"file"</span>    onChange<span class="token operator">=</span><span class="token punctuation">{</span>handleFileInputChange<span class="token punctuation">}</span>  <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>IconButton color<span class="token operator">=</span><span class="token string">"primary"</span> component<span class="token operator">=</span><span class="token string">"span"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>PhotoCamera <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>IconButton<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span></code></pre><p>在这里，<code>Input</code> 组件是隐藏的，而 <code>IconButton</code> 组件则显示为相机图标。当用户点击相机图标时，将触发与 <code>Input</code> 组件相关联的文件选择对话框。选择文件后，会调用 <code>handleFileInputChange</code> 函数来更新 <code>selectedFile</code> 状态。此外，<code>htmlFor</code> 属性将 <code>label</code> 组件与 <code>Input</code> 组件相关联，这样当用户点击相机图标时，也会触发文件选择对话框。</p><p>最后，您可以使用 <code>selectedFile</code> 状态来将上传的文件显示在您的组件中。</p><p>完整的代码示例如下：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Input<span class="token punctuation">,</span> IconButton <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@material-ui/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> PhotoCamera <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@material-ui/icons'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ImageUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedFile<span class="token punctuation">,</span> setSelectedFile<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> handleFileInputChange <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setSelectedFile</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">htmlFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload-photo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> display<span class="token punctuation">:</span> <span class="token string">'none'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>          <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload-photo<span class="token punctuation">"</span></span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span>          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleFileInputChange<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IconButton</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>span<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PhotoCamera</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IconButton</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>selectedFile <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>selectedFile<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uploaded<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ImageUpload<span class="token punctuation">;</span></code></pre><p>如果要使用axios上传的话，可以用axios二次封装的发送请求，如:</p><p><strong>封装好的请求:</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">uploadTeachingVideo</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/teachingVideo/upload"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>在页面使用:</strong></p><pre class=" language-jsx"><code class="language-jsx">        <span class="token comment" spellcheck="true">// 创建FormData对象来上传文件</span>        <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"video"</span><span class="token punctuation">,</span>video<span class="token punctuation">)</span>        formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'videoIcon'</span><span class="token punctuation">,</span> videoIcon<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加上传的视频文件</span>        formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'videoName'</span><span class="token punctuation">,</span> videoName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加视频名称</span>        formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'group'</span><span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加视频分组</span>        formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'videoType'</span><span class="token punctuation">,</span> videoType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加视频类型</span>        <span class="token function">uploadTeachingVideo</span><span class="token punctuation">(</span> formData<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 上传到服务器，替换为你的上传端点</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 处理成功的响应，你可能需要在这里添加逻辑来处理上传成功的情况，例如重定向到另一个页面或显示消息给用户</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 处理错误响应，你可能需要在这里添加逻辑来处理上传失败的情况，例如显示错误消息给用户</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 清除上传的视频和图标，以便用户可以上传另一个视频</span>        <span class="token function">setVideoIcon</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVideo</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/03/18/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/03/18/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>abbrlink: ‘0’</p><h1 id="重构博客"><a href="#重构博客" class="headerlink" title="重构博客"></a>重构博客</h1><h2 id="1-Hexo的安装"><a href="#1-Hexo的安装" class="headerlink" title="1.Hexo的安装"></a>1.Hexo的安装</h2><blockquote><p>注意：默认你安装了node，git，并且你有一个自己的Github账号呀。没有的话自行搜索安装一下。</p></blockquote><p>更多详情可以参考官网<a href="https://hexo.io/zh-cn/index.html">Hexo</a></p><ol><li>安装hexo的脚手架hexo-cli</li></ol><pre class=" language-powershell"><code class="language-powershell">npm install hexo<span class="token operator">-</span><span class="token function">cli</span> <span class="token operator">-</span>g</code></pre><ol start="2"><li>创建一个hexo博客</li></ol><pre class=" language-powershell"><code class="language-powershell">hexo init<span class="token comment" spellcheck="true"># 安装一下git提交插件</span>npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>save</code></pre><p>此时你可以本地启动查看一下</p><pre class=" language-powershell"><code class="language-powershell">hexo generatehexo server</code></pre><p>默认的效果如下</p><img src="/2024/03/18/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1709987929964.png" class="" width="1709987929964"><h2 id="2-选取主题anzhiyu"><a href="#2-选取主题anzhiyu" class="headerlink" title="2.选取主题anzhiyu"></a>2.选取主题<a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu">anzhiyu</a></h2><p>可以参官方的教程 <a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu">https://github.com/anzhiyu-c/hexo-theme-anzhiyu</a></p><ol><li>安装butterfly主题</li></ol><p>在刚才的目录安装主题：</p><pre class=" language-powershell"><code class="language-powershell">git clone <span class="token operator">-</span>b main https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>anzhiyu<span class="token operator">-</span>c<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>anzhiyu<span class="token punctuation">.</span>git themes<span class="token operator">/</span>anzhiyu</code></pre><ol start="2"><li>应用主题</li></ol><p>在Hexo的更目录下_config.yml，把主题修改一下butterfly</p><pre><code>theme: anzhiyu</code></pre><ol start="3"><li>安装插件</li></ol><pre><code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code></pre><p>官方建议</p><p>在 hexo 的根目錄創建一個文件 _config.butterfly.yml，並把主題目錄的 _config.yml 內容複製到 _config.butterfly.yml 去。( 注意: 複製的是主題的 _config.yml ，而不是 hexo 的 _config.yml)</p><blockquote><p>注意： 不要把主題目錄的 _config.yml 刪掉</p><p>注意： 以後只需要在 _config.butterfly.yml 進行配置就行。<br>如果使用了 _config.butterfly.yml， 配置主題的 _config.yml 將不會有效果。</p></blockquote><p>Hexo會自動合併主題中的 _config.yml 和 _config.anzhiyu.yml 裏的配置，如果存在同名配置，會使用 _config.anzhiyu.yml 的配置，其優先度較高。</p><img src="/2024/03/18/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1709997772924.png" class="" width="1709997772924"><p>完成以上操作再次启动</p><ul><li>hexo clean</li><li>hexo g</li><li>hexo s</li></ul><h2 id="3-hexo-SEO优化"><a href="#3-hexo-SEO优化" class="headerlink" title="3.hexo SEO优化"></a>3.hexo SEO优化</h2><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><ol><li>配置文章连接跳转数字或字幕: <a href="https://github.com/rozbo/hexo-abbrlink">https://github.com/rozbo/hexo-abbrlink</a></li></ol><pre class=" language-powershell"><code class="language-powershell">npm install hexo<span class="token operator">-</span>abbrlink <span class="token operator">--</span>save</code></pre><p>修改配置文件 _config.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>abbrlink.html<span class="token comment" spellcheck="true"># abbrlink config</span><span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc32      <span class="token comment" spellcheck="true">#support crc16(default) and crc32</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex        <span class="token comment" spellcheck="true">#support dec(default) and hex</span></code></pre><ol start="2"><li>本地搜索依赖： <a href="https://github.com/wzpan/hexo-generator-search">https://github.com/wzpan/hexo-generator-search</a></li></ol><pre class=" language-powershell"><code class="language-powershell">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>search <span class="token operator">--</span>save</code></pre><p>添加配置 _config.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> all  <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>修改 _config.butterfly.yml,将local_search 修改成true</p><pre class=" language-yml"><code class="language-yml"># Local searchlocal_search:  enable: true</code></pre><ol start="3"><li>live2d: <a href="https://github.com/EYHN/hexo-helper-live2d">https://github.com/EYHN/hexo-helper-live2d</a></li></ol><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 安装live2d</span>npm install <span class="token operator">--</span>save hexo<span class="token operator">-</span>helper<span class="token operator">-</span>live2d<span class="token comment" spellcheck="true"># 安装模型</span>npm install <span class="token operator">--</span>save live2d<span class="token operator">-</span>widget<span class="token operator">-</span>model<span class="token operator">-</span>koharu</code></pre><h2 id="4-部署到Github"><a href="#4-部署到Github" class="headerlink" title="4.部署到Github"></a>4.部署到Github</h2><img src="/2024/03/18/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1709997002956.png" class="" width="1709997002956"><p>pages.yml</p><pre class=" language-yml"><code class="language-yml">name: Pageson:  push:    branches:      - master # default branchjobs:  pages:    runs-on: ubuntu-latest    permissions:      contents: write    steps:      - uses: actions/checkout@v2      - name: Use Node.js 16.x        uses: actions/setup-node@v2        with:          node-version: "16"      - name: Cache NPM dependencies        uses: actions/cache@v2        with:          path: node_modules          key: ${{ runner.OS }}-npm-cache          restore-keys: |            ${{ runner.OS }}-npm-cache      - name: Install Dependencies        run: npm install      - name: Build        run: npm run build      - name: Deploy        uses: peaceiris/actions-gh-pages@v3        with:          github_token: ${{ secrets.GITHUB_TOKEN }}          publish_dir: ./public</code></pre><p>dependabot.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token key atrule">updates</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">package-ecosystem</span><span class="token punctuation">:</span> npm  <span class="token key atrule">directory</span><span class="token punctuation">:</span> <span class="token string">"/"</span>  <span class="token key atrule">schedule</span><span class="token punctuation">:</span>    <span class="token key atrule">interval</span><span class="token punctuation">:</span> daily  <span class="token key atrule">open-pull-requests-limit</span><span class="token punctuation">:</span> <span class="token number">20</span></code></pre><p>这样子就可以通过idea上传到github上去了，注意创建的仓库名字要与你的github名字一样(name.github.io)，例如： zhangsan.zhangsan.githun.io</p><h2 id="5-美化博客"><a href="#5-美化博客" class="headerlink" title="5.美化博客"></a>5.美化博客</h2><pre><code>https://Kiritoabc.github.io</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>prometheus</title>
      <link href="/2024/03/18/prometheus/"/>
      <url>/2024/03/18/prometheus/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Prometheus 是<a href="https://cncf.io/">云原生计算基金会</a>的一个项目，是一个系统和服务监控系统。它收集指标 从给定时间间隔的配置目标中，评估规则表达式， 显示结果，并可在观察到指定条件时触发警报。</p></blockquote><p>Prometheus 与其他指标和监控系统的区别在于：</p><ul><li><strong>多维</strong>数据模型（由指标名称和键/值维度集定义的时间序列）</li><li>PromQL，一种<strong>强大而灵活的查询语言</strong>，用于利用此维度</li><li>不依赖分布式存储;<strong>单服务器节点是自治的</strong></li><li>用于时序集合的 HTTP <strong>拉取模型</strong></li><li>支持通过中间网关推送批处理作业的<strong>时序</strong></li><li>通过服务发现或<strong>静态配置****发现</strong>目标</li><li><strong>支持多种绘图和仪表板</strong>模式</li><li>支持分层<strong>和水平联合</strong></li></ul><span id="more"></span><h2 id="prometheus简单的使用"><a href="#prometheus简单的使用" class="headerlink" title="prometheus简单的使用"></a>prometheus简单的使用</h2><img src="/2024/03/18/prometheus/1700189207618.png" class="" width="1700189207618"><h3 id="快速使用尝试"><a href="#快速使用尝试" class="headerlink" title="快速使用尝试"></a>快速使用尝试</h3><p>首先保存如下配置<code>prometheus.yml</code>文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span>     15s <span class="token comment" spellcheck="true"># 默认情况下，每 15s 采集一次目标数据</span>  <span class="token comment" spellcheck="true"># 与外部系统(如 federation, remote storage, Alertmanager)通信时，可以将这些标签应用到到和时间序列或告警上</span>  <span class="token key atrule">external_labels</span><span class="token punctuation">:</span>    <span class="token key atrule">monitor</span><span class="token punctuation">:</span> <span class="token string">'codelab-monitor'</span><span class="token comment" spellcheck="true"># 仅包含一个采集端点的采集配置：这里是 Prometheus 本身</span><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 作业名称作为标签 `job=&lt;job_name>` 添加到从此配置中采集的时间序列上</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'prometheus'</span>    <span class="token comment" spellcheck="true"># 覆盖全局默认的参数，并将采样时间间隔设置为 5s</span>    <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'localhost:9090'</span><span class="token punctuation">]</span></code></pre><p>docker启动</p><pre class=" language-powershell"><code class="language-powershell">docker run <span class="token operator">--</span>name prometheus <span class="token operator">-</span>d <span class="token operator">-</span>p 9090:9090 <span class="token operator">-</span>v D:\docker\<span class="token keyword">data</span>\prometheus\prometheus<span class="token punctuation">.</span>yml:<span class="token operator">/</span>etc<span class="token operator">/</span>prometheus<span class="token operator">/</span>prometheus<span class="token punctuation">.</span>yml prom<span class="token operator">/</span>prometheus</code></pre><h4 id="使用表达式浏览器"><a href="#使用表达式浏览器" class="headerlink" title="使用表达式浏览器"></a>使用表达式浏览器</h4><p>我们来尝试查看 Prometheus 采集的有关自身的一些数据。要使用 Prometheus 的内置表达式浏览器，请导航至 <a href="http://localhost:9090/graph">http://localhost:9090/graph</a> 并在 “Graph” 页面选择 “Console” 视图。</p><p>在 <a href="http://localhost:9090/metrics">localhost:9090/metrics</a> 的数据采集中，Prometheus 导出了一个称为<code>prometheus_target_interval_length_seconds</code>(目标数据收集的实际时间)的数据指标。将其输入表达式控制台并点击 “Execute”：</p><pre class=" language-txt"><code class="language-txt">prometheus_target_interval_length_seconds</code></pre><p>这将会返回很多种不通的时间序列(及时间序列记录的最新值)，所有的时间序列的名称均为<code>prometheus_target_interval_length_seconds</code>，但是带有不同的标签。这些标签指定了不同的延迟百分比和和目标组间隔。</p><p>如果我们仅仅对第 99 个百分位的延迟感兴趣，则我们可以使用下面的语句来查询该信息：</p><pre class=" language-txt"><code class="language-txt">prometheus_target_interval_length_seconds{quantile="0.99"}</code></pre><p>想要统计返回时间序列的个数，您可以执行：</p><pre class=" language-txt"><code class="language-txt">count(prometheus_target_interval_length_seconds)</code></pre><p>有关表达式语言的更多信息，请见<a href="">表达式语言文档</a></p><h4 id="使用图形化接口"><a href="#使用图形化接口" class="headerlink" title="使用图形化接口"></a>使用图形化接口</h4><p>请导航至 <a href="http://localhost:9090/graph">http://localhost:9090/graph</a> 并使用 “Graph” 视图来使用图形表达式。</p><p>例如，输入以下表达式来绘制自身采集中Prometheus 每秒创建块的速率：</p><pre class=" language-txt"><code class="language-txt">rate(prometheus_tsdb_head_chunks_created_total[1m])</code></pre><p>在 graph 页面使用其它参数和设置进行实验。</p><h3 id="PromQL"><a href="#PromQL" class="headerlink" title="PromQL"></a>PromQL</h3><blockquote><p>Prometheus UI是Prometheus内置的一个可视化管理界面，通过Prometheus UI用户能够轻松的了解Prometheus当前的配置，监控任务运行状态等。 通过<code>Graph</code>面板，用户还能直接使用<code>PromQL</code>实时查询监控数据：</p></blockquote><h3 id="监控数据的可视化"><a href="#监控数据的可视化" class="headerlink" title="监控数据的可视化"></a>监控数据的可视化</h3><blockquote><p>Prometheus UI提供了快速验证PromQL以及临时可视化支持的能力，而在大多数场景下引入监控系统通常还需要构建可以长期使用的监控数据可视化面板（Dashboard）。这时用户可以考虑使用第三方的可视化工具如Grafana，Grafana是一个开源的可视化平台，并且提供了对Prometheus的完整支持。</p></blockquote><pre class=" language-powershell"><code class="language-powershell">docker run <span class="token operator">-</span>d <span class="token operator">-</span>p 3000:3000 grafana<span class="token operator">/</span>grafana</code></pre><p>访问<a href="http://localhost:3000/">http://localhost:3000</a>就可以进入到Grafana的界面中，默认情况下使用账户admin/admin进行登录。在Grafana首页中显示默认的使用向导，包括：安装、添加数据源、创建Dashboard、邀请成员、以及安装应用和插件等主要流程:</p><ol><li>添加数据源</li></ol><img src="/2024/03/18/prometheus/1703675480231.png" class="" width="1703675480231"><p>2.选择Prometheus</p><img src="/2024/03/18/prometheus/1703675524236.png" class="" width="1703675524236"><ol start="3"><li><p>填写prometheus的基本信息 </p><img src="/2024/03/18/prometheus/1703675640217.png" class="" width="1703675640217"></li></ol><blockquote><p>在完成数据源的添加之后就可以在Grafana中创建我们可视化Dashboard了。Grafana提供了对PromQL的完整支持，如下所示，通过Grafana添加Dashboard并且为该Dashboard添加一个类型为“Graph”的面板。 并在该面板的“Metrics”选项下通过PromQL查询需要可视化的数据：</p></blockquote><img src="/2024/03/18/prometheus/1703676201605.png" class="" width="1703676201605"><img src="/2024/03/18/prometheus/1703676705908.png" class="" width="1703676705908"><p>点击界面中的保存选项，就创建了我们的第一个可视化Dashboard了。 当然作为开源软件，Grafana社区鼓励用户分享Dashboard通过<a href="https://grafana.com/dashboards">https://grafana.com/dashboards</a>网站，可以找到大量可直接使用的Dashboard：</p><p>更多学习内容可以学习：<a href="https://yunlzheng.gitbook.io/prometheus-book/">https://yunlzheng.gitbook.io/prometheus-book/</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go系统监控</title>
      <link href="/2024/03/18/go%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/"/>
      <url>/2024/03/18/go%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="系统监控"><a href="#系统监控" class="headerlink" title="系统监控"></a>系统监控</h1><blockquote><p>很多系统中都有守护进程，它们能够在后台监控系统的运行状态，在出现意外情况时及时响应。系统监控是 Go 语言运行时的重要组成部分，它会每隔一段时间检查 Go 语言运行时，确保程序没有进入异常状态。本节会介绍 Go 语言系统监控的设计与实现原理，包括它的启动、执行过程以及主要职责。</p></blockquote><span id="more"></span><h1 id="设计原理"><a href="#设计原理" class="headerlink" title="设计原理"></a>设计原理</h1><blockquote><p>在支持多任务的操作系统中，守护进程是在后台运行的计算机程序，它不会由用户直接操作，它一般会在操作系统启动时自动运行。Kubernetes 的 DaemonSet 和 Go 语言的系统监控都使用类似设计提供一些通用的功能：</p></blockquote><img src="/2024/03/18/go%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/1699621512779.png" class="" width="1699621512779"><p>守护进程是很有效的设计，它在整个系统的生命周期中都会存在，会随着系统的启动而启动，系统的结束而结束。在操作系统和 Kubernetes 中，我们经常会将数据库服务、日志服务以及监控服务等进程作为守护进程运行。</p><p>Go 语言的系统监控也起到了很重要的作用，它在内部启动了一个不会中止的循环，在循环的内部会轮询网络、抢占长期运行或者处于系统调用的 Goroutine 以及触发垃圾回收，通过这些行为，它能够让系统的运行状态变得更健康。</p><h1 id="监控循环"><a href="#监控循环" class="headerlink" title="监控循环"></a>监控循环</h1><p>当 Go 语言程序启动时，运行时会在第一个 Goroutine 中调用 <a href="https://draveness.me/golang/tree/runtime.main"><code>runtime.main</code></a> 启动主程序，该函数会在系统栈中创建新的线程：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token keyword">if</span> GOARCH <span class="token operator">!=</span> <span class="token string">"wasm"</span> <span class="token punctuation">{</span>        <span class="token function">systemstack</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">newm</span><span class="token punctuation">(</span>sysmon<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p><a href="https://draveness.me/golang/tree/runtime.newm"><code>runtime.newm</code></a> 会创建一个存储待执行函数和处理器的新结构体 <a href="https://draveness.me/golang/tree/runtime.m"><code>runtime.m</code></a>。运行时执行系统监控不需要处理器，系统监控的 Goroutine 会直接在创建的线程上运行：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">newm</span><span class="token punctuation">(</span>fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _p_ <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mp <span class="token operator">:=</span> <span class="token function">allocm</span><span class="token punctuation">(</span>_p_<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>    mp<span class="token punctuation">.</span>nextp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>_p_<span class="token punctuation">)</span>    mp<span class="token punctuation">.</span>sigmask <span class="token operator">=</span> initSigmask    <span class="token operator">...</span>    <span class="token function">newm1</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><a href="https://draveness.me/golang/tree/runtime.newm1"><code>runtime.newm1</code></a> 会调用特定平台的 <a href="https://draveness.me/golang/tree/runtime.newosproc"><code>runtime.newosproc</code></a> 通过系统调用 <code>clone</code> 创建一个新的线程并在新的线程中执行 <a href="https://draveness.me/golang/tree/runtime.mstart"><code>runtime.mstart</code></a>：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">newosproc</span><span class="token punctuation">(</span>mp <span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    stk <span class="token operator">:=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span>g0<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>hi<span class="token punctuation">)</span>    <span class="token keyword">var</span> oset sigset    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>_SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sigset_all<span class="token punctuation">,</span> <span class="token operator">&amp;</span>oset<span class="token punctuation">)</span>    ret <span class="token operator">:=</span> <span class="token function">clone</span><span class="token punctuation">(</span>cloneFlags<span class="token punctuation">,</span> stk<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span>g0<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token function">funcPC</span><span class="token punctuation">(</span>mstart<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>_SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>oset<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p>在新创建的线程中，我们会执行存储在 <a href="https://draveness.me/golang/tree/runtime.m"><code>runtime.m</code></a> 中的 <a href="https://draveness.me/golang/tree/runtime.sysmon"><code>runtime.sysmon</code></a> 启动系统监控：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">sysmon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sched<span class="token punctuation">.</span>nmsys<span class="token operator">++</span>    <span class="token function">checkdead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    lasttrace <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    idle <span class="token operator">:=</span> <span class="token number">0</span>    delay <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> idle <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            delay <span class="token operator">=</span> <span class="token number">20</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> idle <span class="token operator">></span> <span class="token number">50</span> <span class="token punctuation">{</span>            delay <span class="token operator">*=</span> <span class="token number">2</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> delay <span class="token operator">></span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">{</span>            delay <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span>        <span class="token punctuation">}</span>        <span class="token function">usleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当运行时刚刚调用上述函数时，会先通过 <a href="https://draveness.me/golang/tree/runtime.checkdead"><code>runtime.checkdead</code></a> 检查是否存在死锁，然后进入核心的监控循环；系统监控在每次循环开始时都会通过 <code>usleep</code> 挂起当前线程，该函数的参数是微秒，运行时会遵循以下的规则决定休眠时间：</p><ul><li>初始的休眠时间是 20μs；</li><li>最长的休眠时间是 10ms；</li><li>当系统监控在 50 个循环中都没有唤醒 Goroutine 时，休眠时间在每个循环都会倍增；</li></ul><p>当程序趋于稳定之后，系统监控的触发时间就会稳定在 10ms。它除了会检查死锁之外，还会在循环中完成以下的工作：</p><ul><li>运行计时器 — 获取下一个需要被触发的计时器；</li><li>轮询网络 — 获取需要处理的到期文件描述符；</li><li>抢占处理器 — 抢占运行时间较长的或者处于系统调用的 Goroutine；</li><li>垃圾回收 — 在满足条件时触发垃圾收集回收内存；</li></ul><p>我们在这一节中会依次介绍系统监控是如何完成上述几种不同工作的。</p><h2 id="检查死锁"><a href="#检查死锁" class="headerlink" title="检查死锁"></a>检查死锁</h2><p>系统监控通过 <a href="https://draveness.me/golang/tree/runtime.checkdead"><code>runtime.checkdead</code></a> 检查运行时是否发生了死锁，我们可以将检查死锁的过程分成以下三个步骤：</p><ol><li>检查是否存在正在运行的线程；</li><li>检查是否存在正在运行的 Goroutine；</li><li>检查处理器上是否存在计时器；</li></ol><p>该函数首先会检查 Go 语言运行时中正在运行的线程数量，我们通过调度器中的多个字段计算该值的结果：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">checkdead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> run0 <span class="token builtin">int32</span>    run <span class="token operator">:=</span> <span class="token function">mcount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> sched<span class="token punctuation">.</span>nmidle <span class="token operator">-</span> sched<span class="token punctuation">.</span>nmidlelocked <span class="token operator">-</span> sched<span class="token punctuation">.</span>nmsys    <span class="token keyword">if</span> run <span class="token operator">></span> run0 <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> run <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"runtime: checkdead: nmidle="</span><span class="token punctuation">,</span> sched<span class="token punctuation">.</span>nmidle<span class="token punctuation">,</span> <span class="token string">" nmidlelocked="</span><span class="token punctuation">,</span> sched<span class="token punctuation">.</span>nmidlelocked<span class="token punctuation">,</span> <span class="token string">" mcount="</span><span class="token punctuation">,</span> <span class="token function">mcount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" nmsys="</span><span class="token punctuation">,</span> sched<span class="token punctuation">.</span>nmsys<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"checkdead: inconsistent counts"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><ol><li><a href="https://draveness.me/golang/tree/runtime.mcount"><code>runtime.mcount</code></a> 根据下一个待创建的线程 id 和释放的线程数得到系统中存在的线程数；</li><li><code>nmidle</code> 是处于空闲状态的线程数量；</li><li><code>nmidlelocked</code> 是处于锁定状态的线程数量；</li><li><code>nmsys</code> 是处于系统调用的线程数量；</li></ol><p>利用上述几个线程相关数据，我们可以得到正在运行的线程数，如果线程数量大于 0，说明当前程序不存在死锁；如果线程数小于 0，说明当前程序的状态不一致；如果线程数等于 0，我们需要进一步检查程序的运行状态：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">checkdead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    grunning <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>allgs<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        gp <span class="token operator">:=</span> allgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token function">isSystemGoroutine</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        s <span class="token operator">:=</span> <span class="token function">readgstatus</span><span class="token punctuation">(</span>gp<span class="token punctuation">)</span>        <span class="token keyword">switch</span> s <span class="token operator">&amp;^</span> _Gscan <span class="token punctuation">{</span>        <span class="token keyword">case</span> _Gwaiting<span class="token punctuation">,</span> _Gpreempted<span class="token punctuation">:</span>            grunning<span class="token operator">++</span>        <span class="token keyword">case</span> _Grunnable<span class="token punctuation">,</span> _Grunning<span class="token punctuation">,</span> _Gsyscall<span class="token punctuation">:</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"runtime: checkdead: find g "</span><span class="token punctuation">,</span> gp<span class="token punctuation">.</span>goid<span class="token punctuation">,</span> <span class="token string">" in status "</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>            <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"checkdead: runnable g"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>allglock<span class="token punctuation">)</span>    <span class="token keyword">if</span> grunning <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"no goroutines (main called runtime.Goexit) - deadlock!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><ol><li>当存在 Goroutine 处于 <code>_Grunnable</code>、<code>_Grunning</code> 和 <code>_Gsyscall</code> 状态时，意味着程序发生了死锁；</li><li>当所有的 Goroutine 都处于 <code>_Gidle</code>、<code>_Gdead</code> 和 <code>_Gcopystack</code> 状态时，意味着主程序调用了 <a href="https://draveness.me/golang/tree/runtime.goexit"><code>runtime.goexit</code></a>；</li></ol><p>当运行时存在等待的 Goroutine 并且不存在正在运行的 Goroutine 时，我们会检查处理器中存在的计时器<a href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sysmon/#fn:1">1</a>：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">checkdead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> _p_ <span class="token operator">:=</span> <span class="token keyword">range</span> allp <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>_p_<span class="token punctuation">.</span>timers<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"all goroutines are asleep - deadlock!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>如果处理器中存在等待的计时器，那么所有的 Goroutine 陷入休眠状态是合理的，不过如果不存在等待的计时器，运行时会直接报错并退出程序。</p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>在最后，系统监控还会决定是否需要触发强制垃圾回收，<a href="https://draveness.me/golang/tree/runtime.sysmon"><code>runtime.sysmon</code></a> 会构建 <a href="https://draveness.me/golang/tree/runtime.gcTrigger"><code>runtime.gcTrigger</code></a> 并调用 <a href="https://draveness.me/golang/tree/runtime.gcTrigger.test"><code>runtime.gcTrigger.test</code></a> 方法判断是否需要触发垃圾回收：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">sysmon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>        <span class="token keyword">if</span> t <span class="token operator">:=</span> <span class="token punctuation">(</span>gcTrigger<span class="token punctuation">{</span>kind<span class="token punctuation">:</span> gcTriggerTime<span class="token punctuation">,</span> now<span class="token punctuation">:</span> now<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>forcegc<span class="token punctuation">.</span>idle<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>forcegc<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>            forcegc<span class="token punctuation">.</span>idle <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">var</span> list gList            list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>forcegc<span class="token punctuation">.</span>g<span class="token punctuation">)</span>            <span class="token function">injectglist</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span>            <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>forcegc<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果需要触发垃圾回收，我们会将用于垃圾回收的 Goroutine 加入全局队列，让调度器选择合适的处理器去执行。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>运行时通过系统监控来触发线程的抢占、网络的轮询和垃圾回收，保证 Go 语言运行时的可用性。系统监控能够很好地解决尾延迟的问题，减少调度器调度 Goroutine 的饥饿问题并保证计时器在尽可能准确的时间触发。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go泛型</title>
      <link href="/2024/03/18/go%E8%AF%AD%E8%A8%80%E6%B3%9B%E5%9E%8B/"/>
      <url>/2024/03/18/go%E8%AF%AD%E8%A8%80%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-1-18-泛型"><a href="#Go-1-18-泛型" class="headerlink" title="Go 1.18 泛型"></a>Go 1.18 泛型</h1><blockquote><p>2022年3月15日，争议非常大但同时也备受期待的泛型终于伴随着Go1.18发布了。</p></blockquote><p>参考文档: <a href="https://go.dev/ref/spec">Go 编程语言规范 - Go 编程语言</a></p><span id="more"></span><p><strong>Go还引入了非常多全新的概念：</strong></p><ul><li>类型形参 (Type parameter)</li><li>类型实参(Type argument)</li><li>类型形参列表( Type parameter list)</li><li>类型约束(Type constraint)</li><li>实例化(Instantiations)</li><li>泛型类型(Generic type)</li><li>泛型接收器(Generic receiver)</li><li>泛型函数(Generic function)</li></ul><h2 id="类型形参，类型实参，类型约束，泛型类型"><a href="#类型形参，类型实参，类型约束，泛型类型" class="headerlink" title="类型形参，类型实参，类型约束，泛型类型"></a>类型形参，类型实参，类型约束，泛型类型</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> IntSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">var</span> a IntSlice <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 正确</span><span class="token keyword">var</span> b IntSlice <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float32</span><span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// ✗ 错误，因为IntSlice的底层类型是[]int，浮点类型的切片无法赋值</span></code></pre><p>这里定义了一个新的类型 <code>IntSlice</code> ，它的底层类型是 <code>[]int</code> ，理所当然只有int类型的切片能赋值给 <code>IntSlice</code> 类型的变量。</p><p>接下来如果我们想要定义一个可以容纳 <code>float32</code> 或 <code>string</code> 等其他类型的切片的话该怎么办？</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> StringSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">type</span> Float32Slie <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float32</span><span class="token keyword">type</span> Float64Slice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span></code></pre><p>但是这样做的问题显而易见，它们结构都是一样的只是成员类型不同就需要重新定义这么多新类型。那么有没有一个办法能只定义一个类型就能代表上面这所有的类型呢？</p><pre class=" language-Go"><code class="language-Go">type Slice[T int|float32|float64 ] []T</code></pre><h2 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token keyword">func</span> Add<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">float32</span> <span class="token operator">|</span> <span class="token builtin">float64</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a T<span class="token punctuation">,</span> b T<span class="token punctuation">)</span> T <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言调用外部程序</title>
      <link href="/2024/03/18/go%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>/2024/03/18/go%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于最近开发碰到了需要调用外部软件程序的任务，对此有一定的兴趣，所以本人翻阅互联网，寻找如何操作，得此文章。</p></blockquote><h1 id="Go语言调用外部程序"><a href="#Go语言调用外部程序" class="headerlink" title="Go语言调用外部程序"></a>Go语言调用外部程序</h1><p><code>os/exec</code>包中的exec.Commad()</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"os/exec"</span>    <span class="token string">"runtime"</span>    <span class="token string">"syscall"</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token string">"D:\\tools\\wangyiyun\\CloudMusic\\cloudmusic.exe"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注意一第一个参数，其实就是你要运行的 .exe程序</span>    cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> runtime<span class="token punctuation">.</span>GOOS <span class="token operator">==</span> <span class="token string">"windows"</span> <span class="token punctuation">{</span>        cmd<span class="token punctuation">.</span>SysProcAttr <span class="token operator">=</span> <span class="token operator">&amp;</span>syscall<span class="token punctuation">.</span>SysProcAttr<span class="token punctuation">{</span>HideWindow<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>syscall</code>包下的CreateProcess()创建子进程来运行</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"syscall"</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token string">"D:\\tools\\wangyiyun\\CloudMusic\\cloudmusic.exe"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//cmd := exec.Command(path)</span>    <span class="token comment" spellcheck="true">//if runtime.GOOS == "windows" {</span>    <span class="token comment" spellcheck="true">//cmd.SysProcAttr = &amp;syscall.SysProcAttr{HideWindow: true}</span>    <span class="token comment" spellcheck="true">//}</span>    <span class="token comment" spellcheck="true">//err := cmd.Run()</span>    <span class="token comment" spellcheck="true">//fmt.Println(err.Error())</span>    <span class="token keyword">var</span> sI syscall<span class="token punctuation">.</span>StartupInfo    <span class="token keyword">var</span> pI syscall<span class="token punctuation">.</span>ProcessInformation    argv<span class="token punctuation">,</span> err2 <span class="token operator">:=</span> syscall<span class="token punctuation">.</span><span class="token function">UTF16PtrFromString</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    err <span class="token operator">:=</span> syscall<span class="token punctuation">.</span><span class="token function">CreateProcess</span><span class="token punctuation">(</span>        <span class="token boolean">nil</span><span class="token punctuation">,</span>        argv<span class="token punctuation">,</span>        <span class="token boolean">nil</span><span class="token punctuation">,</span>        <span class="token boolean">nil</span><span class="token punctuation">,</span>        <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token boolean">nil</span><span class="token punctuation">,</span>        <span class="token boolean">nil</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>sI<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>pI<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Return: %d\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>这是一个使用Go语言编写的Windows系统调用函数，用于创建一个新的进程。以下是代码的详细解释：</p><ol><li><code>func CreateProcess(appName *uint16, commandLine *uint16, procSecurity *SecurityAttributes, threadSecurity *SecurityAttributes, inheritHandles bool, creationFlags uint32, env *uint16, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation) (err error)</code>：定义了一个名为<code>CreateProcess</code>的函数，该函数接受10个参数，返回一个错误值（<code>err</code>）。这些参数的含义如下：<ul><li><code>appName *uint16</code>：指向应用程序名称的字符串指针。</li><li><code>commandLine *uint16</code>：指向命令行参数的字符串指针。</li><li><code>procSecurity *SecurityAttributes</code>：指向进程安全属性的指针。</li><li><code>threadSecurity *SecurityAttributes</code>：指向线程安全属性的指针。</li><li><code>inheritHandles bool</code>：一个布尔值，表示是否继承句柄。</li><li><code>creationFlags uint32</code>：表示创建进程的标志。</li><li><code>env *uint16</code>：指向环境变量的指针。</li><li><code>currentDir *uint16</code>：指向当前目录的字符串指针。</li><li><code>startupInfo *StartupInfo</code>：指向启动信息的指针。</li><li><code>outProcInfo *ProcessInformation</code>：指向进程信息的指针。</li></ul></li><li><code>var _p0 uint32</code>：定义了一个名为<code>_p0</code>的变量，其类型为<code>uint32</code>。这个变量用于存储<code>inheritHandles</code>变量的值，如果<code>inheritHandles</code>为<code>true</code>，则将其设置为<code>1</code>，否则设置为<code>0</code>。</li><li><code>if inheritHandles {</code>：如果<code>inheritHandles</code>为<code>true</code>，执行以下操作：<ul><li><code>_p0 = 1</code>：将<code>_p0</code>设置为<code>1</code>。</li></ul></li><li><code>r1, _, e1 := Syscall12(procCreateProcessW.Addr(), 10, uintptr(unsafe.Pointer(appName)), uintptr(unsafe.Pointer(commandLine)), uintptr(unsafe.Pointer(procSecurity)), uintptr(unsafe.Pointer(threadSecurity)), uintptr(_p0), uintptr(creationFlags), uintptr(unsafe.Pointer(env)), uintptr(unsafe.Pointer(currentDir)), uintptr(unsafe.Pointer(startupInfo)), uintptr(unsafe.Pointer(outProcInfo)), 0, 0)</code>：使用<code>Syscall12</code>函数调用Windows系统调用的地址（<code>procCreateProcessW.Addr()</code>），传递10个参数。这些参数的含义如下：<ul><li><code>procCreateProcessW.Addr()</code>：表示<code>CreateProcess</code>系统调用的地址。</li><li><code>10</code>：表示参数的数量。</li><li><code>uintptr(unsafe.Pointer(appName))</code>：表示<code>appName</code>参数的地址。</li><li><code>uintptr(unsafe.Pointer(commandLine))</code>：表示<code>commandLine</code>参数的地址。</li><li><code>uintptr(unsafe.Pointer(procSecurity))</code>：表示<code>procSecurity</code>参数的地址。</li><li><code>uintptr(unsafe.Pointer(threadSecurity))</code>：表示<code>threadSecurity</code>参数的地址。</li><li><code>uintptr(_p0)</code>：表示<code>_p0</code>参数的地址。</li><li><code>uintptr(creationFlags)</code>：表示<code>creationFlags</code>参数的地址。</li><li><code>uintptr(unsafe.Pointer(env))</code>：表示<code>env</code>参数的地址。</li><li><code>uintptr(unsafe.Pointer(currentDir))</code>：表示<code>currentDir</code>参数的地址。</li><li><code>uintptr(unsafe.Pointer(startupInfo))</code>：表示<code>startupInfo</code>参数的地址。</li><li><code>uintptr(unsafe.Pointer(outProcInfo))</code>：表示<code>outProcInfo</code>参数的地址。</li><li><code>0</code>：表示<code>_p0</code>参数的长度。</li><li><code>0</code>：表示<code>_p0</code>参数的字节顺序。</li></ul></li><li><code>if r1 == 0 {</code>：如果<code>Syscall12</code>函数返回的第一个返回值为`0</li></ol></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">CreateProcess</span><span class="token punctuation">(</span>appName <span class="token operator">*</span><span class="token builtin">uint16</span><span class="token punctuation">,</span> commandLine <span class="token operator">*</span><span class="token builtin">uint16</span><span class="token punctuation">,</span> procSecurity <span class="token operator">*</span>SecurityAttributes<span class="token punctuation">,</span> threadSecurity <span class="token operator">*</span>SecurityAttributes<span class="token punctuation">,</span> inheritHandles <span class="token builtin">bool</span><span class="token punctuation">,</span> creationFlags <span class="token builtin">uint32</span><span class="token punctuation">,</span> env <span class="token operator">*</span><span class="token builtin">uint16</span><span class="token punctuation">,</span> currentDir <span class="token operator">*</span><span class="token builtin">uint16</span><span class="token punctuation">,</span> startupInfo <span class="token operator">*</span>StartupInfo<span class="token punctuation">,</span> outProcInfo <span class="token operator">*</span>ProcessInformation<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _p0 <span class="token builtin">uint32</span>    <span class="token keyword">if</span> inheritHandles <span class="token punctuation">{</span>        _p0 <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    r1<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> e1 <span class="token operator">:=</span> <span class="token function">Syscall12</span><span class="token punctuation">(</span>procCreateProcessW<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>commandLine<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>procSecurity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>threadSecurity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>_p0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>creationFlags<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>currentDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>startupInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>outProcInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> r1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        err <span class="token operator">=</span> <span class="token function">errnoErr</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello-World</title>
      <link href="/2024/03/18/hello-world/"/>
      <url>/2024/03/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>这里是摘要</p><blockquote><p>自我介绍环节</p><blockquote><p>你不需要一开始很厉害，你需要开始才能很厉害！</p></blockquote></blockquote><span id="more"></span><ul><li>一名懒惰的死宅</li><li>是名大学生</li><li>loving life &amp; loving coding</li><li>在为找工作努力学习ing</li><li>主要技术栈：<ul><li>golang</li><li>react</li><li>vue</li><li>java</li></ul></li><li>邮箱:<a href="mailto:2493381254@qq.com">2493381254@qq.com</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes</title>
      <link href="/2024/03/18/k8s/"/>
      <url>/2024/03/18/k8s/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Kubernetes, also known as K8s, is an open source system for managing <a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/">containerized applications</a> across multiple hosts. It provides basic mechanisms for the deployment, maintenance, and scaling of applications.</p></blockquote><span id="more"></span><h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><h2 id="Kubernets基础"><a href="#Kubernets基础" class="headerlink" title="Kubernets基础"></a>Kubernets基础</h2><p><strong>Kubernetes 协调一个高可用计算机集群，每个计算机作为独立单元互相连接工作。</strong> Kubernetes 中的抽象允许你将容器化的应用部署到集群，而无需将它们绑定到某个特定的独立计算机。 为了使用这种新的部署模型，应用需要以将应用与单个主机分离的方式打包：它们需要被容器化。 与过去的那种应用直接以包的方式深度与主机集成的部署模型相比，容器化应用更灵活、更可用。 <strong>Kubernetes 以更高效的方式跨集群自动分发和调度应用容器。</strong> Kubernetes 是一个开源平台，并且可应用于生产环境。</p><p>一个 Kubernetes 集群包含两种类型的资源：</p><ul><li><strong>控制面</strong>调度整个集群</li><li><strong>节点</strong>负责运行应用</li></ul><p><strong>集群图</strong></p><img src="/2024/03/18/k8s/1704269961726.png" class="" width="1704269961726"><p><strong>控制面负责管理整个集群。</strong> 控制面协调集群中的所有活动，例如调度应用、维护应用的所需状态、应用扩容以及推出新的更新。</p><p><strong>节点是一个虚拟机或者物理机，它在 Kubernetes 集群中充当工作机器的角色。</strong> 每个节点都有 Kubelet，它管理节点而且是节点与控制面通信的代理。 节点还应该具有用于处理容器操作的工具，例如 Docker 或 rkt。 处理生产级流量的 Kubernetes 集群至少应具有三个节点，因为如果一个节点出现故障其对应的 <a href="https://kubernetes.io/zh-cn/docs/concepts/overview/components/#etcd">etcd</a> 成员和控制面实例都会丢失， 并且冗余会受到影响。你可以通过添加更多控制面节点来降低这种风险。</p><p>在 Kubernetes 上部署应用时，你告诉控制面启动应用容器。 控制面就编排容器在集群的节点上运行。 <strong>节点使用控制面暴露的 Kubernetes API 与控制面通信。</strong>终端用户也可以使用 Kubernetes API 与集群交互。</p><ul><li>使用<strong>minikube</strong>模拟<a href="https://kubernetes.io/zh-cn/docs/tutorials/hello-minikube/">https://kubernetes.io/zh-cn/docs/tutorials/hello-minikube/</a></li></ul><h2 id="kubectl的基本命令"><a href="#kubectl的基本命令" class="headerlink" title="kubectl的基本命令"></a>kubectl的基本命令</h2><blockquote><p>说明：</p><p>有关 <code>kubectl</code> 命令的更多信息，请参阅 <a href="https://kubernetes.io/zh-cn/docs/reference/kubectl/">kubectl 概述</a>。</p></blockquote><p>1.使用 <code>kubectl create</code> 命令创建管理 Pod 的 Deployment。该 Pod 根据提供的 Docker 镜像运行容器。</p><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 运行包含 Web 服务器的测试容器镜像</span>kubectl create deployment hello<span class="token operator">-</span>node <span class="token operator">--</span>image=registry<span class="token punctuation">.</span>k8s<span class="token punctuation">.</span>io<span class="token operator">/</span>e2e<span class="token operator">-</span>test<span class="token operator">-</span>images<span class="token operator">/</span>agnhost:2<span class="token punctuation">.</span>39 <span class="token operator">--</span> <span class="token operator">/</span>agnhost netexec <span class="token operator">--</span>http<span class="token operator">-</span>port=8080</code></pre><p>2.查看 Deployment：</p><pre class=" language-powershell"><code class="language-powershell">kubectl get deployment</code></pre><p>3.查看pod</p><pre class=" language-powershell"><code class="language-powershell">kubectl get pods</code></pre><p>4.查看集群事件：</p><pre class=" language-shell"><code class="language-shell">kubectl get events</code></pre><p>5.查看 <code>kubectl</code> 配置：</p><pre class=" language-shell"><code class="language-shell">kubectl config view</code></pre><p>6.查看 Pod 中容器的应用程序日志。</p><pre class=" language-shell"><code class="language-shell">kubectl logs hello-node-5f76cf6ccf-br9b5</code></pre><h2 id="部署第一个应用在Kubernetes"><a href="#部署第一个应用在Kubernetes" class="headerlink" title="部署第一个应用在Kubernetes"></a>部署第一个应用在Kubernetes</h2><img src="/2024/03/18/k8s/1704271828818.png" class="" width="1704271828818"><p>采用国内源启动：</p><pre class=" language-powershell"><code class="language-powershell"></code></pre>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka的基本使用</title>
      <link href="/2024/03/18/kafka/"/>
      <url>/2024/03/18/kafka/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Kafka 结合了三个关键功能，因此您可以使用 一个经过实战检验的解决方案来实现端到端事件流的 <a href="https://kafka.apache.org/powered-by">用例：</a></p><ol><li>发布（写入）和<strong>订阅（读取）</strong>事件流，包括从其他系统持续导入/导出数据。</li><li>根据需要持久可靠地存储事件 流<strong>。</strong></li><li>在事件发生时或回顾性地 <strong>处理</strong> 事件流。</li></ol></blockquote><span id="more"></span><h2 id="Kafka启动"><a href="#Kafka启动" class="headerlink" title="Kafka启动"></a>Kafka启动</h2><p><strong>拉取镜像</strong></p><pre class=" language-shell"><code class="language-shell">docker pull bitnami/kafka</code></pre><p><strong>启动kafka</strong></p><p>参考：<a href="https://hub.docker.com/r/bitnami/kafka">https://hub.docker.com/r/bitnami/kafka</a></p><p>第一步：创建网络</p><pre class=" language-shell"><code class="language-shell">docker network create kafka-learn --driver bridge </code></pre><p>第二步：启动 kafka 服务器实例(windows powershell)注意此处是使用kraft模式</p><p><strong>集群的部署</strong></p><p>docker-compose up -d</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">kafka1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/bitnami/kafka<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka1    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 19092<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token punctuation">-</span> 19093<span class="token punctuation">:</span><span class="token number">9093</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> D<span class="token punctuation">:</span>\docker\data\kafka\kafka1\data<span class="token punctuation">:</span>/bitnami/data    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#是否使用KRaft模式</span>      <span class="token key atrule">KAFKA_ENABLE_KRAFT</span><span class="token punctuation">:</span> yes      <span class="token key atrule">KAFKA_CFG_PROCESS_ROLES</span><span class="token punctuation">:</span> broker<span class="token punctuation">,</span>controller      <span class="token key atrule">KAFKA_CFG_CONTROLLER_LISTENER_NAMES</span><span class="token punctuation">:</span> CONTROLLER      <span class="token key atrule">KAFKA_CFG_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>CONTROLLER<span class="token punctuation">:</span>//<span class="token punctuation">:</span><span class="token number">9093</span>      <span class="token key atrule">KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP</span><span class="token punctuation">:</span> CONTROLLER<span class="token punctuation">:</span>PLAINTEXT<span class="token punctuation">,</span>PLAINTEXT<span class="token punctuation">:</span>PLAINTEXT      <span class="token key atrule">KAFKA_KRAFT_CLUSTER_ID</span><span class="token punctuation">:</span> VaW86rUCTMmoxIcDiER_lA      <span class="token key atrule">KAFKA_CFG_CONTROLLER_QUORUM_VOTERS</span><span class="token punctuation">:</span> 1@kafka1<span class="token punctuation">:</span><span class="token number">9093</span><span class="token punctuation">,</span>2@kafka2<span class="token punctuation">:</span><span class="token number">9093</span><span class="token punctuation">,</span>3@kafka3<span class="token punctuation">:</span><span class="token number">9093</span>      <span class="token key atrule">ALLOW_PLAINTEXT_LISTENER</span><span class="token punctuation">:</span> yes      <span class="token key atrule">KAFKA_HEAP_OPTS</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>Xmx512M <span class="token punctuation">-</span>Xms256M      <span class="token key atrule">KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token comment" spellcheck="true">#broker单独配置</span>      <span class="token key atrule">KAFKA_CFG_NODE_ID</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">KAFKA_CFG_ADVERTISED_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">19092</span>    <span class="token key atrule">kafka2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/bitnami/kafka<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka2    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 29092<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token punctuation">-</span> 29093<span class="token punctuation">:</span><span class="token number">9093</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> D<span class="token punctuation">:</span>\docker\data\kafka\kafka2\data<span class="token punctuation">:</span>/bitnami/data    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">KAFKA_ENABLE_KRAFT</span><span class="token punctuation">:</span> yes      <span class="token key atrule">KAFKA_CFG_PROCESS_ROLES</span><span class="token punctuation">:</span> broker<span class="token punctuation">,</span>controller      <span class="token key atrule">KAFKA_CFG_CONTROLLER_LISTENER_NAMES</span><span class="token punctuation">:</span> CONTROLLER      <span class="token key atrule">KAFKA_CFG_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>CONTROLLER<span class="token punctuation">:</span>//<span class="token punctuation">:</span><span class="token number">9093</span>      <span class="token key atrule">KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP</span><span class="token punctuation">:</span> CONTROLLER<span class="token punctuation">:</span>PLAINTEXT<span class="token punctuation">,</span>PLAINTEXT<span class="token punctuation">:</span>PLAINTEXT      <span class="token key atrule">KAFKA_KRAFT_CLUSTER_ID</span><span class="token punctuation">:</span> VaW86rUCTMmoxIcDiER_lA      <span class="token key atrule">KAFKA_CFG_CONTROLLER_QUORUM_VOTERS</span><span class="token punctuation">:</span> 1@kafka1<span class="token punctuation">:</span><span class="token number">9093</span><span class="token punctuation">,</span>2@kafka2<span class="token punctuation">:</span><span class="token number">9093</span><span class="token punctuation">,</span>3@kafka3<span class="token punctuation">:</span><span class="token number">9093</span>      <span class="token key atrule">ALLOW_PLAINTEXT_LISTENER</span><span class="token punctuation">:</span> yes      <span class="token key atrule">KAFKA_HEAP_OPTS</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>Xmx512M <span class="token punctuation">-</span>Xms256M      <span class="token key atrule">KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token comment" spellcheck="true">#broker单独配置</span>      <span class="token key atrule">KAFKA_CFG_NODE_ID</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">KAFKA_CFG_ADVERTISED_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">29092</span>  <span class="token key atrule">kafka3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/bitnami/kafka<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka3    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 39092<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token punctuation">-</span> 39093<span class="token punctuation">:</span><span class="token number">9093</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> D<span class="token punctuation">:</span>\docker\data\kafka\kafka3\data<span class="token punctuation">:</span>/bitnami/data    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">KAFKA_ENABLE_KRAFT</span><span class="token punctuation">:</span> yes      <span class="token key atrule">KAFKA_CFG_PROCESS_ROLES</span><span class="token punctuation">:</span> broker<span class="token punctuation">,</span>controller      <span class="token key atrule">KAFKA_CFG_CONTROLLER_LISTENER_NAMES</span><span class="token punctuation">:</span> CONTROLLER      <span class="token key atrule">KAFKA_CFG_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>CONTROLLER<span class="token punctuation">:</span>//<span class="token punctuation">:</span><span class="token number">9093</span>      <span class="token key atrule">KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP</span><span class="token punctuation">:</span> CONTROLLER<span class="token punctuation">:</span>PLAINTEXT<span class="token punctuation">,</span>PLAINTEXT<span class="token punctuation">:</span>PLAINTEXT      <span class="token key atrule">KAFKA_KRAFT_CLUSTER_ID</span><span class="token punctuation">:</span> VaW86rUCTMmoxIcDiER_lA      <span class="token key atrule">KAFKA_CFG_CONTROLLER_QUORUM_VOTERS</span><span class="token punctuation">:</span> 1@kafka1<span class="token punctuation">:</span><span class="token number">9093</span><span class="token punctuation">,</span>2@kafka2<span class="token punctuation">:</span><span class="token number">9093</span><span class="token punctuation">,</span>3@kafka3<span class="token punctuation">:</span><span class="token number">9093</span>      <span class="token key atrule">ALLOW_PLAINTEXT_LISTENER</span><span class="token punctuation">:</span> yes      <span class="token key atrule">KAFKA_HEAP_OPTS</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>Xmx512M <span class="token punctuation">-</span>Xms256M      <span class="token key atrule">KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token comment" spellcheck="true">#broker单独配置</span>      <span class="token key atrule">KAFKA_CFG_NODE_ID</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">KAFKA_CFG_ADVERTISED_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">39092</span>        <span class="token key atrule">kafka-ui</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> provectuslabs/kafka<span class="token punctuation">-</span>ui<span class="token punctuation">:</span>latest    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>learn    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>ui    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 19091<span class="token punctuation">:</span><span class="token number">8080</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> D<span class="token punctuation">:</span>\docker\data\kafka<span class="token punctuation">-</span>ui<span class="token punctuation">:</span>/etc/localtime    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 集群名称</span>      <span class="token punctuation">-</span> KAFKA_CLUSTERS_0_NAME=local      <span class="token comment" spellcheck="true"># 集群地址</span>      <span class="token punctuation">-</span> KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>kafka2<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>kafka3<span class="token punctuation">:</span><span class="token number">9092</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">default</span><span class="token punctuation">:</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>learn</code></pre><p><strong>单机的部署</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">kafka-server</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> bitnami/kafka<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>server    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>server    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> kafka<span class="token punctuation">-</span>learn    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9092:9092"</span>      <span class="token punctuation">-</span> <span class="token string">"9093:9093"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> KAFKA_CFG_NODE_ID=0      <span class="token punctuation">-</span> KAFKA_CFG_PROCESS_ROLES=controller<span class="token punctuation">,</span>broker      <span class="token punctuation">-</span> KAFKA_CFG_LISTENERS=PLAINTEXT<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>CONTROLLER<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9093</span>      <span class="token punctuation">-</span> KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT<span class="token punctuation">:</span>PLAINTEXT<span class="token punctuation">,</span>CONTROLLER<span class="token punctuation">:</span>PLAINTEXT      <span class="token punctuation">-</span> KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka<span class="token punctuation">-</span>server<span class="token punctuation">:</span><span class="token number">9093</span>      <span class="token punctuation">-</span> KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">default</span><span class="token punctuation">:</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>learn</code></pre><p><strong>docker run启动</strong></p><pre class=" language-powershell"><code class="language-powershell">docker run <span class="token operator">-</span>d <span class="token operator">--</span>name kafka<span class="token operator">-</span>server <span class="token operator">--</span>hostname kafka<span class="token operator">-</span>server <span class="token operator">--</span>network kafka<span class="token operator">-</span>learn `     <span class="token operator">-</span>p 9092:9092 `     <span class="token operator">-</span>p 9093:9093 `     <span class="token operator">-</span>e KAFKA_CFG_NODE_ID=0 `     <span class="token operator">-</span>e KAFKA_CFG_PROCESS_ROLES=controller<span class="token punctuation">,</span>broker `     <span class="token operator">-</span>e KAFKA_CFG_LISTENERS=PLAINTEXT:<span class="token operator">/</span><span class="token operator">/</span>localhost:9092<span class="token punctuation">,</span>CONTROLLER:<span class="token operator">/</span><span class="token operator">/</span>localhost:9093 `     <span class="token operator">-</span>e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT<span class="token punctuation">,</span>CONTROLLER:PLAINTEXT `     <span class="token operator">-</span>e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka<span class="token operator">-</span>server:9093 `     <span class="token operator">-</span>e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER `     bitnami<span class="token operator">/</span>kafka:latest</code></pre><p><strong>kafka-ui</strong></p><p>docker-compose.yaml文件集群模式</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">kafka-ui</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> provectuslabs/kafka<span class="token punctuation">-</span>ui<span class="token punctuation">:</span>latest    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>learn    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>ui    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 19091<span class="token punctuation">:</span><span class="token number">8080</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> D<span class="token punctuation">:</span>\docker\data\kafka<span class="token punctuation">-</span>ui<span class="token punctuation">:</span>/etc/localtime    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 集群名称</span>      <span class="token punctuation">-</span> KAFKA_CLUSTERS_0_NAME=local      <span class="token comment" spellcheck="true"># 集群地址</span>      <span class="token punctuation">-</span> KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>kafka2<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>kafka3<span class="token punctuation">:</span><span class="token number">9092</span></code></pre><p>单kafka模式</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">kafka-single-broker</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> confluentinc/cp<span class="token punctuation">-</span>kafka<span class="token punctuation">:</span>latest <span class="token comment" spellcheck="true"># 确保使用的镜像版本支持KRaft模式</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>single<span class="token punctuation">-</span>broker    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> kafka    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9092:9092"</span>      <span class="token punctuation">-</span> <span class="token string">"9093:9093"</span> <span class="token comment" spellcheck="true"># Kafka内部使用的控制器监听端口</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">KAFKA_BROKER_ID</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">KAFKA_TRANSACTION_STATE_LOG_MIN_ISR</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">KAFKA_DELETE_TOPIC_ENABLE</span><span class="token punctuation">:</span> <span class="token string">"true"</span>      <span class="token key atrule">KAFKA_INTER_BROKER_PROTOCOL_VERSION</span><span class="token punctuation">:</span> <span class="token string">"2.8"</span> <span class="token comment" spellcheck="true"># 根据你的Kafka版本选择合适的协议版本</span>      <span class="token key atrule">KAFKA_AUTO_LEADER_REBALANCE_ENABLE</span><span class="token punctuation">:</span> <span class="token string">"false"</span>      <span class="token key atrule">KAFKA_DEFAULT_REPLICATION_FACTOR</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>PLAINTEXT<span class="token punctuation">,</span>CONTROLLER<span class="token punctuation">:</span>PLAINTEXT      <span class="token key atrule">KAFKA_ADVERTISED_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//kafka<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>CONTROLLER<span class="token punctuation">:</span>//kafka<span class="token punctuation">:</span><span class="token number">9093</span>      <span class="token key atrule">KAFKA_CONTROLLER_LISTENER_NAMES</span><span class="token punctuation">:</span> CONTROLLER      <span class="token key atrule">KAFKA_BOOTSTRAP_SERVERS</span><span class="token punctuation">:</span> kafka<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token key atrule">KAFKA_KRAFT_CLUSTER_ID</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>id <span class="token comment" spellcheck="true"># 设置唯一的Kafka Raft集群ID</span>      <span class="token key atrule">KAFKA_NUM_PARTITIONS</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">kafka-ui</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> provectuslabs/kafka<span class="token punctuation">-</span>ui    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>ui    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">KAFKA_CLUSTERS_0_NAME</span><span class="token punctuation">:</span> Local Kafka Cluster      <span class="token key atrule">KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>single<span class="token punctuation">-</span>broker<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token comment" spellcheck="true"># 如果需要安全认证，请在此处添加相关配置</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">default</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>net</code></pre><p><strong>创建网络</strong></p><pre class=" language-powershell"><code class="language-powershell">docker network create app<span class="token operator">-</span>tier <span class="token operator">--</span>driver bridge</code></pre><p><strong>启动服务</strong></p><pre class=" language-powershell"><code class="language-powershell">docker run <span class="token operator">-</span>d <span class="token operator">--</span>name kafka<span class="token operator">-</span>server <span class="token operator">--</span>hostname kafka<span class="token operator">-</span>server `    <span class="token operator">--</span>network app<span class="token operator">-</span>tier `    <span class="token operator">-</span>e KAFKA_CFG_NODE_ID=0 `    <span class="token operator">-</span>e KAFKA_CFG_PROCESS_ROLES=controller<span class="token punctuation">,</span>broker `    <span class="token operator">-</span>e KAFKA_CFG_LISTENERS=PLAINTEXT:<span class="token operator">/</span><span class="token operator">/</span>:9092<span class="token punctuation">,</span>CONTROLLER:<span class="token operator">/</span><span class="token operator">/</span>:9093 `    <span class="token operator">-</span>e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT<span class="token punctuation">,</span>PLAINTEXT:PLAINTEXT `    <span class="token operator">-</span>e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka<span class="token operator">-</span>server:9093 `    <span class="token operator">-</span>e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER `    bitnami<span class="token operator">/</span>kafka:latest</code></pre><p><strong>kafka客户端</strong></p><pre class=" language-powershell"><code class="language-powershell">docker run <span class="token operator">-</span>it <span class="token operator">--</span><span class="token function">rm</span> `<span class="token operator">--</span>network app<span class="token operator">-</span>tier `bitnami<span class="token operator">/</span>kafka:latest kafka<span class="token operator">-</span>topics<span class="token punctuation">.</span>sh <span class="token operator">--</span>list  <span class="token operator">--</span>bootstrap<span class="token operator">-</span>server kafka<span class="token operator">-</span>server:9092</code></pre><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>Apache Kafka 是一款开源分布式流处理平台。可以用来发布和订阅数据以及对数据进行实时或者离线处理。</p></blockquote><p><strong>特点</strong></p><p><strong>高吞吐量、低延迟</strong>：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒，每个topic可以分多个partition, consumer group 对partition进行consume操作；</p><p><strong>扩展性强</strong>：支持分布式集群部署，且kafka集群支持热扩展；</p><p><strong>持久性、可靠性</strong>：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失；</p><p><strong>容错性强</strong>：允许集群中节点失败。（最多允许n-1个节点失败）；</p><p><strong>高并发</strong>：支持多个客户端同时读写；</p><p><strong>支持实时在线处理和离线处理</strong>：可以使用storm实时流处理系统对消息进行实时处理，同时还支持hadoop这种批处理系统进行离线处理；</p><p><strong>多客户端支持</strong>：比如java、golang等；</p><p><strong>主要应用场景</strong></p><p>消息系统：常规的消息队列中间件，实现异步解耦、削峰等功能</p><p>日志收集：Kafka可以收集各种服务的log，通过kafka以统一接口服务的方式开放给各种consumer，例如Hadoop、Hbase、Solr等；</p><p>数据监控：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告；</p><p>流式处理：比如spark streaming和storm；</p><p>Kafka经常被用来记录web用户或者app用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过订阅这些topic来做实时的监控分析，或者装载到Hadoop、数据仓库中做离线分析和挖掘；</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><p>每个Broker即一个kafka服务实例，多个broker构成一个kafka集群。生产者发布的消息保存在broker中，消费者从broker获取消息进行消费。</p><p>在集群中，根据每个kafka实例担任的角色可分为leader(controller)和broker。</p><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>kafka中将消息分类，每一类消息称为一个Topic，生产者通过指定Topic将消息发送到broker中，消费者通过指定Topic可以针对不同的Topic采取不同的消费逻辑。Topic有点类似于数据库的表。</p><h3 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h3><p>一个Topic可以分为多个Partition，每个Partition是一个有序队列，在Partition中每条消息都存在一个有序的偏移量offset代表这条消息在paitition中的位置。在一个Topic的多个partition中，分为leader和follower，只有leader进行读写操作，follower仅进行复制，客户端无法感知。</p><p>在一个集群中，同一个topic的不同partition可分布在不同的broker中，以保证数据安全可用。</p><img src="/2024/03/18/kafka/1704789749698.png" class="" width="1704789749698"><h3 id="Replica"><a href="#Replica" class="headerlink" title="Replica"></a>Replica</h3><p>为了保证数据安全，partition有多个副本，至少会有一个leader副本和多个follower副本。leader负责处理客户端的读写请求，follower副本只复制leader副本的数据。当leader宕机时，follower会自动接替leader副本的工作，从而保证数据的可用性。</p><h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><p>生产者，负责生产消息，并发送到broker。 </p><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>消费者，负责消费broker中topic消息，每个consumer归属于一个consumer group。</p><p>​p><h3 id="各组件关系"><a href="#各组件关系" class="headerlink" title="各组件关系"></a>各组件关系</h3><img src="/2024/03/18/kafka/1704788969382.png" class="" width="1704788969382"><h2 id="Kafka版本变更（重点）"><a href="#Kafka版本变更（重点）" class="headerlink" title="Kafka版本变更（重点）"></a>Kafka版本变更（重点）</h2><blockquote><p>在kafka版本2.8以前，kafka集群通过zookeeper进行集群管理，从2.8.0版本开始，kafka提供了另一种管理模式：KRaft。</p></blockquote><h3 id="KRaft模式"><a href="#KRaft模式" class="headerlink" title="KRaft模式"></a>KRaft模式</h3><p>KRaft 是 “Kafka” 和 “Raft” 的组合词，其中 Raft 是一个用于管理复制日志的分布式一致性算法。在 KRaft 模式中，Kafka 使用 Raft 协议来实现集群的元数据管理，包括主题配置、分区副本分配、访问控制列表等。</p><p>在 KRaft 模式下，Kafka 集群中的一个或多个 broker 将被指定为 controller，它们负责管理集群的元数据。当一个 controller 出现故障时，其他的 broker 可以通过 Raft 协议的领导者选举机制来选举出一个新的 controller。</p><p>它使得 Kafka 能够在没有 Apache ZooKeeper 的情况下运行。KRaft 模式的主要目标是简化 Kafka 的架构，提高其性能和稳定性。</p><h3 id="两种模式对比"><a href="#两种模式对比" class="headerlink" title="两种模式对比"></a>两种模式对比</h3><h4 id="架构复杂性及性能"><a href="#架构复杂性及性能" class="headerlink" title="架构复杂性及性能"></a>架构复杂性及性能</h4><p><strong>zookeeper模式</strong>：部署kafka集群时，必然要部署对应的zookeeper集群，既增加了系统的复杂性，同时也需要对zookeeper进行维护。kafka的性能不仅受到本身资源的限制，也受到zookeeper本身的限制以及kafka与zookeeper通信之间的限制。</p><p><strong>KRaft模式</strong>：KRaft模式消除了kafka集群对zookeeper的依赖，降低了kafka部署及维护的难度；同时也消除了因zookeeper本身限制、通信方面的瓶颈以及由于引入zookeeper带来的系统风险，提高了kafka集群的性能和稳定性。</p><h4 id="leader选举"><a href="#leader选举" class="headerlink" title="leader选举"></a>leader选举</h4><p>在 Kafka 集群中，Controller 是一个非常重要的角色。Kafka 集群会选举出一个 Broker 作为 Controller，这个 Controller 主要负责管理和协调整个 Kafka 集群中的分区和副本。</p><ol><li><strong>分区 Leader 的选举</strong>：当某个分区的 Leader 副本发生故障时，Controller 负责从该分区的 Follower 副本中选举出一个新的 Leader。</li><li><strong>副本状态的管理</strong>：Controller 负责跟踪所有副本的状态，并在副本状态发生变化时进行相应的处理。例如，当一个新的副本加入到集群时，Controller 会将其状态设置为 “ReplicaOnline”。</li><li><strong>Topic 和分区的管理</strong>：当创建或删除 Topic 时，Controller 负责在各个 Broker 上创建或删除相应的分区。</li><li><strong>Broker 状态的监控</strong>：Controller 会持续监控集群中所有 Broker 的状态。当某个 Broker 发生故障时，Controller 会将其上的所有 Leader 分区迁移到其他健康的 Broker 上。</li><li><strong>集群元数据的维护</strong>：Controller 负责维护 Kafka 集群的元数据，包括 Topic 配置、分区副本分配、访问控制列表等。</li></ol><p><strong>zookeeper模式</strong>：在zookeeper模式中，kafka的leader由zookeeper自行选举，用户无法指定。</p><p><strong>KRaft模式</strong>： 在KRaft模式中，可以通过配置文件直接指定broker节点的角色（controller、broker），也可以由集群自己完成。</p><h2 id="gin中接入kafka"><a href="#gin中接入kafka" class="headerlink" title="gin中接入kafka"></a>gin中接入kafka</h2><blockquote><p>在 Gin 框架中接入 Kafka 主要涉及两个部分：编写生产者（Producer）用于向 Kafka 发送消息，以及编写消费者（Consumer）用于从 Kafka 接收消息。以下是一个简单的示例流程：</p></blockquote><ul><li>参考库: <a href="https://github.com/confluentinc/confluent-kafka-go?spm=5176.28103460.0.0.231c3f99xjyESY">confluentinc/confluent-kafka-go: Confluent’s Apache Kafka Golang client (github.com)</a></li><li>参考库: <a href="https://github.com/IBM/sarama?spm=5176.28103460.0.0.231c3f99xjyESY">IBM/sarama: Sarama is a Go library for Apache Kafka. (github.com)</a></li></ul><p><strong>定义消费者</strong></p><p>consumer.go</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> consumer<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/IBM/sarama"</span>    <span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">type</span> KafKaConsumer <span class="token keyword">struct</span> <span class="token punctuation">{</span>    consumer sarama<span class="token punctuation">.</span>Consumer    topics   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewKafkaConsumer</span><span class="token punctuation">(</span>brokers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> topics <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>KafKaConsumer<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    config <span class="token operator">:=</span> sarama<span class="token punctuation">.</span><span class="token function">NewConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>Consumer<span class="token punctuation">.</span>Group<span class="token punctuation">.</span>Rebalance<span class="token punctuation">.</span>Strategy <span class="token operator">=</span> sarama<span class="token punctuation">.</span>BalanceStrategyRoundRobin    config<span class="token punctuation">.</span>Consumer<span class="token punctuation">.</span>Offsets<span class="token punctuation">.</span>Initial <span class="token operator">=</span> sarama<span class="token punctuation">.</span>OffsetOldest    config<span class="token punctuation">.</span>Version <span class="token operator">=</span> sarama<span class="token punctuation">.</span>V3_6_0_0    consumer<span class="token punctuation">,</span> err <span class="token operator">:=</span> sarama<span class="token punctuation">.</span><span class="token function">NewConsumer</span><span class="token punctuation">(</span>brokers<span class="token punctuation">,</span> config<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>KafKaConsumer<span class="token punctuation">{</span>consumer<span class="token punctuation">:</span> consumer<span class="token punctuation">,</span> topics<span class="token punctuation">:</span> topics<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kc <span class="token operator">*</span>KafKaConsumer<span class="token punctuation">)</span> <span class="token function">ConsumeMessages</span><span class="token punctuation">(</span>handler <span class="token keyword">func</span><span class="token punctuation">(</span>message <span class="token operator">*</span>sarama<span class="token punctuation">.</span>ConsumerMessage<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> topic <span class="token operator">:=</span> <span class="token keyword">range</span> kc<span class="token punctuation">.</span>topics <span class="token punctuation">{</span>        partitionList<span class="token punctuation">,</span> err <span class="token operator">:=</span> kc<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span><span class="token function">Partitions</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> partition <span class="token operator">:=</span> <span class="token keyword">range</span> partitionList <span class="token punctuation">{</span>            pc<span class="token punctuation">,</span> err <span class="token operator">:=</span> kc<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span><span class="token function">ConsumePartition</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> partition<span class="token punctuation">,</span> sarama<span class="token punctuation">.</span>OffsetNewest<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> err            <span class="token punctuation">}</span>            <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>pc sarama<span class="token punctuation">.</span>PartitionConsumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">defer</span> pc<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> msg <span class="token operator">:=</span> <span class="token keyword">range</span> pc<span class="token punctuation">.</span><span class="token function">Messages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">handler</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Error handling message:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p><strong>定义producer</strong></p><p>producer.go</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> producer<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"github.com/IBM/sarama"</span><span class="token punctuation">)</span><span class="token keyword">type</span> KafkaProducer <span class="token keyword">struct</span> <span class="token punctuation">{</span>    producer sarama<span class="token punctuation">.</span>SyncProducer<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewKafkaProducer</span><span class="token punctuation">(</span>brokers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>KafkaProducer<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    config <span class="token operator">:=</span> sarama<span class="token punctuation">.</span><span class="token function">NewConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>Producer<span class="token punctuation">.</span>Return<span class="token punctuation">.</span>Successes <span class="token operator">=</span> <span class="token boolean">true</span>    config<span class="token punctuation">.</span>Version <span class="token operator">=</span> sarama<span class="token punctuation">.</span>V3_6_0_0 <span class="token comment" spellcheck="true">// 设置 Kafka 版本兼容性</span>    p<span class="token punctuation">,</span> err <span class="token operator">:=</span> sarama<span class="token punctuation">.</span><span class="token function">NewSyncProducer</span><span class="token punctuation">(</span>brokers<span class="token punctuation">,</span> config<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>KafkaProducer<span class="token punctuation">{</span>producer<span class="token punctuation">:</span> p<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 发送消息到 Kafka</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kp <span class="token operator">*</span>KafkaProducer<span class="token punctuation">)</span> <span class="token function">SendMessage</span><span class="token punctuation">(</span>topic <span class="token builtin">string</span><span class="token punctuation">,</span> message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    msg <span class="token operator">:=</span> <span class="token operator">&amp;</span>sarama<span class="token punctuation">.</span>ProducerMessage<span class="token punctuation">{</span>        Topic<span class="token punctuation">:</span> topic<span class="token punctuation">,</span>        Value<span class="token punctuation">:</span> sarama<span class="token punctuation">.</span><span class="token function">StringEncoder</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    partition<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> err <span class="token operator">:=</span> kp<span class="token punctuation">.</span>producer<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Message was produced to topic %s partition %d at offset %d\n"</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> partition<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p><strong>main.go</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"github.com/IBM/sarama"</span>    <span class="token string">"github.com/gin-gonic/gin"</span>    <span class="token string">"kafka-learn/consumer"</span>    <span class="token string">"kafka-learn/producer"</span>    <span class="token string">"log"</span>    <span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    kafkaProducer<span class="token punctuation">,</span> err <span class="token operator">:=</span> producer<span class="token punctuation">.</span><span class="token function">NewKafkaProducer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"localhost:19092"</span><span class="token punctuation">,</span>        <span class="token string">"localhost:29092"</span><span class="token punctuation">,</span> <span class="token string">"localhost:39092"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// producer</span>    router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/send-to-kafka"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        message <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span>        topic <span class="token operator">:=</span> <span class="token string">"my-topic"</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> kafkaProducer<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Message sent to Kafka"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    kafkaConsumer<span class="token punctuation">,</span> err <span class="token operator">:=</span> consumer<span class="token punctuation">.</span><span class="token function">NewKafkaConsumer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"localhost:19092"</span><span class="token punctuation">,</span> <span class="token string">"localhost:29092"</span><span class="token punctuation">,</span> <span class="token string">"localhost:39092"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"my-topic"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// consumer</span>    handler <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg <span class="token operator">*</span>sarama<span class="token punctuation">.</span>ConsumerMessage<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Received message from topic %s partition %d offset %d: %s\n"</span><span class="token punctuation">,</span>            msg<span class="token punctuation">.</span>Topic<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>Partition<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>Offset<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 在这里处理消息逻辑...</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> kafkaConsumer<span class="token punctuation">.</span><span class="token function">ConsumeMessages</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"Error consuming messages:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么学GO？GO是什么？怎么学GO？</title>
      <link href="/2024/03/18/WWH-01/"/>
      <url>/2024/03/18/WWH-01/</url>
      
        <content type="html"><![CDATA[<h1 id="我为什么学GO"><a href="#我为什么学GO" class="headerlink" title="我为什么学GO"></a>我为什么学GO</h1><blockquote><p>首先申明，我是一名大三的学生！以下学习GO的观点属于个人观点，只提供参考。</p></blockquote><p> <strong>第一次听说go的契机</strong></p><p>  契机：就是由于听到同学在学，然后当时了解到的Docker的容器化技术是Go语言编写的，于是开始对于Go有了一些兴趣。</p><p><strong>隔壁的哥哥推荐</strong></p><p>  推荐：由于在大二寒假的时候，对于技术的热爱(当时可能就只是想学更多东西吧)，询问了他如何学习，他和我分享了许多如何提升自己，还有一些基础知识十分重要和设计模式的重要性。并且他还推荐我学习Go语言。</p><p><strong>网络上的说法</strong>（当然网络上众说风云）</p><blockquote><p>学习GO语言主要是因为它在安全领域的应用，它是区块链最主流的编程语言，同时也是当前最具发展潜力的语言。它支持数据处理和大并发处理能力，能有效解决我的很多问题。Go语言是Google公司创造的语言，也是Google主推的语言。国外如Google、AWS、Cloudflare、CoreOS等，国内如七牛、阿里、小米、京东等都已经开始大规模使用Golang开发其云计算相关产品。</p></blockquote><p>以下是一些参考</p><ul><li><a href="https://bbs.huaweicloud.com/blogs/279117">https://bbs.huaweicloud.com/blogs/279117</a></li><li><a href="https://zhuanlan.zhihu.com/p/333295213">为什么要学go语言，golang的优势有哪些？ - 知乎 (zhihu.com)</a></li></ul><h1 id="Go是什么？"><a href="#Go是什么？" class="headerlink" title="Go是什么？"></a>Go是什么？</h1><blockquote><p>Go is a new language. Although it borrows ideas from existing languages, it has unusual properties that make effective Go programs different in character from programs written in its relatives. A straightforward translation of a C++ or Java program into Go is unlikely to produce a satisfactory result—Java programs are written in Java, not Go. On the other hand, thinking about the problem from a Go perspective could produce a successful but quite different program. In other words, to write Go well, it’s important to understand its properties and idioms. It’s also important to know the established conventions for programming in Go, such as naming, formatting, program construction, and so on, so that programs you write will be easy for other Go programmers to understand.</p></blockquote><p>Go 是一门新语言。尽管它借鉴了现有语言的思想，但它具有不寻常的特性，这使得有效的 Go 程序在性质上与用其亲戚编写的程序不同。将 C++ 或 Java 程序直接翻译成 Go 不太可能产生令人满意的结果——Java 程序是用 Java 编写的，而不是用 Go 编写的。另一方面，从 Go 的角度思考问题可能会产生一个成功但完全不同的程序。换句话说，要写好 Go，了解它的属性和习语很重要。了解 Go 编程的既定约定也很重要，例如命名、格式、程序构造等，以便您编写的程序易于其他 Go 程序员理解。</p>]]></content>
      
      
      <categories>
          
          <category> why? what? how? </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canal</title>
      <link href="/2024/03/18/canal/"/>
      <url>/2024/03/18/canal/</url>
      
        <content type="html"><![CDATA[<h1 id="canal"><a href="#canal" class="headerlink" title="canal"></a>canal</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><img src="/2024/03/18/canal/1705492794227.png" class="" width="1705492794227"><p>**canal [kə’næl]**，译意为水道/管道/沟渠，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费</p><p>早期阿里巴巴因为杭州和美国双机房部署，存在跨机房同步的业务需求，实现方式主要是基于业务 trigger 获取增量变更。从 2010 年开始，业务逐步尝试数据库日志解析获取增量变更进行同步，由此衍生出了大量的数据库增量订阅和消费业务。</p><p>基于日志增量订阅和消费的业务包括</p><ul><li>数据库镜像</li><li>数据库实时备份</li><li>索引构建和实时维护(拆分异构索引、倒排索引等)</li><li>业务 cache 刷新</li><li>带业务逻辑的增量数据处理</li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><strong>MySQL主备复制原理</strong></p><ul><li>MySQL master 将数据变更写入二进制日志( binary log, 其中记录叫做二进制日志事件binary log events，可以通过 show binlog events 进行查看)</li><li>MySQL slave 将 master 的 binary log events 拷贝到它的中继日志(relay log)</li><li>MySQL slave 重放 relay log 中事件，将数据变更反映它自己的数据</li></ul><p><strong>canal工作原理</strong></p><ul><li>canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议</li><li>MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )</li><li>canal 解析 binary log 对象(原始为 byte 流)</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>这里我们使用docker启动</p><p><strong>首先创建网络</strong></p><pre class=" language-powershell"><code class="language-powershell">docker network create canal<span class="token operator">-</span>test</code></pre><p><strong>启动mysql</strong></p><pre class=" language-powershell"><code class="language-powershell">docker run <span class="token operator">-</span>d <span class="token operator">--</span>name mysql<span class="token operator">-</span>server `  <span class="token operator">-</span>p 3306:3306 `  <span class="token operator">-</span>v <span class="token operator">/</span>D<span class="token operator">/</span>docker<span class="token operator">/</span>go<span class="token operator">-</span>zero<span class="token operator">-</span>12306<span class="token operator">/</span>mysql<span class="token operator">/</span>conf:<span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d `  <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD=123456 `  <span class="token operator">--</span>network=canal<span class="token operator">-</span>test `  mysql:8</code></pre><p><strong>启动canal</strong></p><pre class=" language-powershell"><code class="language-powershell">docker run <span class="token operator">-</span>d <span class="token operator">--</span>name canal<span class="token operator">-</span>instance `  <span class="token operator">--</span>network=canal<span class="token operator">-</span>test `  <span class="token operator">-</span>e CANAL_INSTANCE_MASTER_ADDRESS=mysql<span class="token operator">-</span>server `  <span class="token operator">-</span>e CANAL_INSTANCE_DBUSERNAME=root `  <span class="token operator">-</span>e CANAL_INSTANCE_DBPASSWORD=123456 `  <span class="token operator">-</span>e CANAL_INSTANCE_CONNECTIONCHARSET=UTF<span class="token operator">-</span>8 `  <span class="token operator">-</span>e CANAL_INSTANCE_TSDB_ENABLE=true `  <span class="token operator">-</span>e CANAL_INSTANCE_GTIDON=false `  <span class="token operator">-</span>e CANAL_INSTANCE_FILTER_REGEX=<span class="token string">".*\\\\..*"</span> `  canal<span class="token operator">/</span>canal<span class="token operator">-</span>server:v1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1</code></pre><p><strong>cp容器中canal的配置文件</strong></p><pre class=" language-powershell"><code class="language-powershell">docker <span class="token function">cp</span> canal<span class="token operator">-</span>instance:<span class="token operator">/</span>home<span class="token operator">/</span>canal<span class="token operator">/</span>conf<span class="token operator">/</span>instance<span class="token punctuation">.</span>properties D:\docker\go<span class="token operator">-</span>zero<span class="token operator">-</span>12306\canal\</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cron</title>
      <link href="/2024/03/18/cron/"/>
      <url>/2024/03/18/cron/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    在使用定时调度任务的时候，我们最常用的，就是cron表达式了。通过cron表达式来指定任务在某个时间点或者周期性的执行。cron表达式配置起来简洁方便，无论是Spring的@Scheduled还是用Quartz框架，都支持cron表达式。但是理解cron表达式，还是需要花上几分钟的时间来学习的。</p><p>本次主要实在asynq的定时任务中又重新看到了，所以想把他掌握了，不再是去网上查查查。</p></blockquote><span id="more"></span><h1 id="cron-表达式的组成"><a href="#cron-表达式的组成" class="headerlink" title="cron 表达式的组成"></a>cron 表达式的组成</h1><p>​cron表达式是一个字符串，由6到7个字段组成，用空格分隔。其中前6个字段是必须的，最后一个是可选的。每个字段的含义如图所示：</p><img src="/2024/03/18/cron/1703904801683.png" class="" width="1703904801683"><p>从左到右，依次对每个字段指定相应的值，就可以确定一个任务的执行时间点和周期了。</p><p>值可以由数字配合字符来组合。</p><h2 id="99-的情况下会用到的字符"><a href="#99-的情况下会用到的字符" class="headerlink" title="99%的情况下会用到的字符"></a>99%的情况下会用到的字符</h2><p>在大部分使用cron的场景下， - * / ? 这几个常用字符就可以满足我们的需求了。</p><ul><li>【*】：每的意思。在不同的字段上，就代表每秒，每分，每小时等。</li><li>【-】：指定值的范围。比如[1-10]，在秒字段里就是每分钟的第1到10秒，在分就是每小时的第1到10分钟，以此类推。</li><li>【,】：指定某几个值。比如[2,4,5]，在秒字段里就是每分钟的第2，第4，第5秒，以此类推。</li><li>【/】：指定值的起始和增加幅度。比如[3/5]，在秒字段就是每分钟的第3秒开始，每隔5秒生效一次，也就是第3秒、8秒、13秒，以此类推。</li><li>【?】：仅用于【日】和【周】字段。因为在指定某日和周几的时候，这两个值实际上是冲突的，所以需要用【?】标识不生效的字段。比如【0 1 * * * ?】就代表每年每月每日每小时的1分0秒触发任务。这里的周就没有效果了。</li></ul><img src="/2024/03/18/cron/1703905216029.png" class="" width="1703905216029">]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter Android 打包</title>
      <link href="/2024/03/18/flutter%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F/"/>
      <url>/2024/03/18/flutter%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="构建和发布为-Android-应用"><a href="#构建和发布为-Android-应用" class="headerlink" title="构建和发布为 Android 应用"></a>构建和发布为 Android 应用</h1></blockquote><p>呜呜呜，好麻烦啊，不想写。</p><span id="more"></span><p>呜呜呜</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go时间处理</title>
      <link href="/2024/03/18/go%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
      <url>/2024/03/18/go%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于在项目中对于时间的处理总是能看到不同的处理方式，Java中和go中都有不同的处理方式。每个人对于时间的处理方式也尽相同，主要记录go中对于时间的处理方式。</p></blockquote><h1 id="go在web项目中的时间处理"><a href="#go在web项目中的时间处理" class="headerlink" title="go在web项目中的时间处理"></a>go在web项目中的时间处理</h1><img src="/2024/03/18/go%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/18318_79872813992.jpg" class="" title="心海酱-珊瑚宫心海竖图-触站"><span id="more"></span><h2 id="关于我在项目中看到的对于时间的表示"><a href="#关于我在项目中看到的对于时间的表示" class="headerlink" title="关于我在项目中看到的对于时间的表示"></a>关于我在项目中看到的对于时间的表示</h2><p><strong>在gin项目中使用gorm的时候</strong></p><img src="/2024/03/18/go%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/1703563674285.png" class="" width="1703563674285"><p><strong>gorm中主要使用time.Time来表示时间和计算</strong></p><p><strong>在go-zero-looklook中</strong></p><p>使用 int64–&gt;转换成time.Time</p><img src="/2024/03/18/go%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/1703563914914.png" class="" width="1703563914914"><img src="/2024/03/18/go%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/1703563934954.png" class="" width="1703563934954"><h2 id="go中时间处理常用方法"><a href="#go中时间处理常用方法" class="headerlink" title="go中时间处理常用方法"></a>go中时间处理常用方法</h2><h2 id="时间的表示"><a href="#时间的表示" class="headerlink" title="时间的表示"></a>时间的表示</h2><blockquote><p> Go 语言中时间的表示方式是通过 time.Time 结构体来表示的。time.Time 类型代表了一个时刻，它包含了年月日时分秒和纳秒等信息。</p></blockquote><p>我们可以使用 time.Now() 函数获取当前时间，或者使用 time.Date() 函数创建一个指定的时间。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取当前时间</span>    t1 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"当前时间:"</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 创建指定时间</span>    t2 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Local<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"指定时间:"</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-powershell"><code class="language-powershell">hello world当前时间: 2023<span class="token operator">-</span>12<span class="token operator">-</span>26 13:53:31<span class="token punctuation">.</span>5605696 <span class="token operator">+</span>0800 CST m=<span class="token operator">+</span>0<span class="token punctuation">.</span>003511101指定时间: 2023<span class="token operator">-</span>12<span class="token operator">-</span>26 14:00:00 <span class="token operator">+</span>0800 CST</code></pre><p>我们可以看到，当前时间和指定时间的格式都是 <code>年-月-日 时:分:秒.纳秒 时区</code> 的形式。</p><p>在Go语言中，还提供了一些常用的时间常量，如 <code>time.RFC3339</code> 和 <code>time.RFC822</code> 等。这些常量可以用于解析或格式化时间字符串，如下所示：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    t1<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>RFC3339<span class="token punctuation">,</span> <span class="token string">"2023-12-26T14:00:00+08:00"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"解析字符串:"</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 格式化时间</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"格式化时间:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>RFC3339<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-powershell"><code class="language-powershell">解析字符串: 2023<span class="token operator">-</span>12<span class="token operator">-</span>26 14:00:00 <span class="token operator">+</span>0800 CST格式化时间: 2023<span class="token operator">-</span>12<span class="token operator">-</span>26T13:59:22<span class="token operator">+</span>08:00</code></pre><p>注意事项：</p><ul><li><code>time.Time</code> 类型是一个值类型，不能使用指针来传递或比较。</li><li>Go 语言中的时间默认使用的是 UTC 时间，如果需要使用本地时间，可以使用 <code>time.Local</code> 来指定时区。</li></ul><h2 id="时间的计算"><a href="#时间的计算" class="headerlink" title="时间的计算"></a>时间的计算</h2><p>在 Go 语言中，时间的计算是通过 time.Duration 类型来表示的。time.Duration 类型代表了一段时间，可以表示一段时间的长度，例如 5 分钟、10 小时等。</p><p>time.Duration 类型可以使用 time.ParseDuration() 函数从字符串中解析出来，也可以使用 time.Duration 类型的常量来表示，例如 5 * time.Minute 表示 5 分钟。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"time"</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    now2 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    d <span class="token operator">:=</span> now2<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>    t3 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Add 10 minutes:"</span><span class="token punctuation">,</span> t3<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-powershell"><code class="language-powershell">5<span class="token punctuation">.</span>0008615sAdd 10 minutes: 2023<span class="token operator">-</span>12<span class="token operator">-</span>26 14:16:41<span class="token punctuation">.</span>1629327 <span class="token operator">+</span>0800 CST m=<span class="token operator">+</span>605<span class="token punctuation">.</span>003923301</code></pre><p>注意事项：</p><ul><li>time.Duration 类型的值可以是正数、负数或零，可以进行加减运算。</li><li>time.Time 类型的 Add() 方法可以用于时间的加法运算，可以接收一个 time.Duration 类型的参数，也可以使用负数表示时间的减法运算。</li></ul><h2 id="时间的比较"><a href="#时间的比较" class="headerlink" title="时间的比较"></a>时间的比较</h2><p>在 Go 语言中，可以使用 time.Before()、time.After() 和 time.Equal() 等方法来比较两个时间的先后顺序以及是否相等。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">"fmt"</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 时间比较</span>    t1 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Local<span class="token punctuation">)</span>    t2 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">567890123</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Local<span class="token punctuation">)</span>    <span class="token keyword">if</span> t1<span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"t1 在 t2 之前"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> t1<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"t1 在 t2 之后"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> t1<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"t1 和 t2 相等"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"t1 和 t2 不相等"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意事项：</p><ul><li>time.Time 类型可以直接使用 &lt;、&gt; 和 == 等操作符进行比较，也可以使用 Before()、After() 和 Equal() 等方法来比较。</li><li>在比较两个时间是否相等时，尽量使用 Equal() 方法，而不是直接使用 == 操作符，因为 time.Time 类型是一个结构体类型，使用 == 操作符比较的是结构体的内存地址，而不是结构体的内容。</li></ul><h2 id="时区和时间的格式化"><a href="#时区和时间的格式化" class="headerlink" title="时区和时间的格式化"></a>时区和时间的格式化</h2><blockquote><p>在 Go 语言中，可以使用 time.LoadLocation() 函数来加载时区信息，以便将本地时间转换为指定时区的时间。同时，还可以使用 time.Parse() 函数来将字符串解析成时间对象，并使用 time.Format() 函数将时间对象格式化成指定格式的字符串。</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"time"</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取时区</span>    location<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">LoadLocation</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将本地时间转换成指定时区</span>    t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"当前时间（相对于上海）:"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 解析字符串为时间对象</span>    layout <span class="token operator">:=</span> <span class="token string">"2006-01-02 15:04:05"</span>    str <span class="token operator">:=</span> <span class="token string">"2023-12-26 14:00:00"</span>    parse<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> str<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"解析字符串:"</span><span class="token punctuation">,</span> parse<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将时间对象解析为字符串</span>    layout2 <span class="token operator">:=</span> <span class="token string">"2006年01月02日 15时04分05秒"</span>    str2 <span class="token operator">:=</span> parse<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>layout2<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"格式化时间:"</span><span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-shell"><code class="language-shell">当前时间（相对于上海）: 2023-12-26 17:29:01.6119526 +0800 CST解析字符串: 2023-12-26 14:00:00 +0000 UTC格式化时间: 2023年12月26日 14时00分00秒 </code></pre><p>在上面的示例代码中，我们加载了纽约时区的信息，并将当前时间转换为纽约时区的时间。接着，我们使用 <code>time.Parse()</code> 函数将一个时间字符串解析成时间对象，再使用 <code>time.Format()</code> 函数将时间对象格式化成指定格式的字符串。</p><p>需要注意的是，时间格式字符串中的格式化符号必须是固定的，不能随意指定。常用的格式化符号如下：</p><img src="/2024/03/18/go%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/1703583004741.png" class="" width="1703583004741">]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis线程模型</title>
      <link href="/2024/03/18/Redis%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
      <url>/2024/03/18/Redis%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis线程模型"><a href="#Redis线程模型" class="headerlink" title="Redis线程模型"></a>Redis线程模型</h1><blockquote><p>redis 内部使用<strong>文件事件处理器 file event handler</strong>，它是单线程的，所以redis才叫做单线程模型。它采用<strong>IO多路复用机制</strong>同时监听多个 socket，将产生事件的 socket 压入内存队列中，事件分派器根据 socket 上的事件类型来选择对应的事件处理器进行处理。</p></blockquote><h5 id="文件事件处理器的结构："><a href="#文件事件处理器的结构：" class="headerlink" title="文件事件处理器的结构："></a>文件事件处理器的结构：</h5><ul><li>多个 socket</li><li>IO 多路复用程序</li><li>文件事件分派器</li><li>事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）</li></ul><span id="more"></span><h2 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h2><p>多个 socket 可能会并发产生不同的操作，每个操作对应不同的文件事件，但是 IO多路复用程序会监听多个 socket，会将产生事件的 socket 放入队列中排队，事件分派器每次从队列中取出一个 socket，根据 socket 的事件类型交给对应的事件处理器进行处理。</p><img src="/2024/03/18/Redis%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/1699943712338.png" class="" width="1699943712338"><h2 id="一次客户端与redis的完整通信过程"><a href="#一次客户端与redis的完整通信过程" class="headerlink" title="一次客户端与redis的完整通信过程"></a>一次客户端与redis的完整通信过程</h2><h1 id="深入学习redis-的线程模型"><a href="#深入学习redis-的线程模型" class="headerlink" title="深入学习redis 的线程模型"></a><a href="https://www.cnblogs.com/mrmirror/p/13587311.html">深入学习redis 的线程模型</a></h1><h2 id="一、redis-的线程模型"><a href="#一、redis-的线程模型" class="headerlink" title="一、redis 的线程模型#"></a>一、redis 的线程模型<a href="https://www.cnblogs.com/mrmirror/p/13587311.html#2457934768">#</a></h2><hr><blockquote><p>redis 内部使用<strong>文件事件处理器 file event handler</strong>，它是单线程的，所以redis才叫做单线程模型。它采用<strong>IO多路复用机制</strong>同时监听多个 socket，将产生事件的 socket 压入内存队列中，事件分派器根据 socket 上的事件类型来选择对应的事件处理器进行处理。</p></blockquote><h5 id="文件事件处理器的结构：-1"><a href="#文件事件处理器的结构：-1" class="headerlink" title="文件事件处理器的结构："></a>文件事件处理器的结构：</h5><ul><li>多个 socket</li><li>IO 多路复用程序</li><li>文件事件分派器</li><li>事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）</li></ul><h5 id="线程模型-1"><a href="#线程模型-1" class="headerlink" title="线程模型"></a>线程模型</h5><p>多个 socket 可能会并发产生不同的操作，每个操作对应不同的文件事件，但是 IO多路复用程序会监听多个 socket，会将产生事件的 socket 放入队列中排队，事件分派器每次从队列中取出一个 socket，根据 socket 的事件类型交给对应的事件处理器进行处理。<br><a href="https://img2020.cnblogs.com/blog/2136379/202008/2136379-20200830233359116-1537526582.png"><img src="/2024/03/18/Redis%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/2136379-20200830233359116-1537526582.png" class="" title="img"></a></p><p> </p><h2 id="二、一次客户端与redis的完整通信过程"><a href="#二、一次客户端与redis的完整通信过程" class="headerlink" title="二、一次客户端与redis的完整通信过程"></a>二、一次客户端与redis的完整通信过程</h2><h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><ol><li>首先，redis 服务端进程初始化的时候，会将 server socket 的 AE_READABLE 事件与连接应答处理器关联。</li><li>客户端 socket01 向 redis 进程的 server socket 请求建立连接，此时 server socket 会产生一个 AE_READABLE 事件，IO 多路复用程序监听到 server socket 产生的事件后，将该 socket 压入队列中。</li><li>文件事件分派器从队列中获取 socket，交给连接应答处理器。</li><li>连接应答处理器会创建一个能与客户端通信的 socket01，并将该 socket01 的 AE_READABLE 事件与命令请求处理器关联。</li></ol><h3 id="执行一个set请求"><a href="#执行一个set请求" class="headerlink" title="执行一个set请求"></a>执行一个set请求</h3><ol><li>客户端发送了一个 set key value 请求，此时 redis 中的 socket01 会产生 AE_READABLE 事件，IO 多路复用程序将 socket01 压入队列，</li><li>此时事件分派器从队列中获取到 socket01 产生的 AE_READABLE 事件，由于前面 socket01 的 AE_READABLE 事件已经与命令请求处理器关联，</li><li>因此事件分派器将事件交给命令请求处理器来处理。命令请求处理器读取 socket01 的 key value 并在自己内存中完成 key value 的设置。</li><li>操作完成后，它会将 socket01 的 AE_WRITABLE 事件与命令回复处理器关联。</li><li>如果此时客户端准备好接收返回结果了，那么 redis 中的 socket01 会产生一个 AE_WRITABLE 事件，同样压入队列中，</li><li>事件分派器找到相关联的命令回复处理器，由命令回复处理器对 socket01 输入本次操作的一个结果，比如 ok，之后解除 socket01 的 AE_WRITABLE 事件与命令回复处理器的关联。</li></ol><img src="/2024/03/18/Redis%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/1699944441421.png" class="" width="1699944441421">]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML--类图</title>
      <link href="/2024/03/18/UML/"/>
      <url>/2024/03/18/UML/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​统一建模语言(Unified Modeling Language，UML)是一种为<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2262089?fromModule=lemma_inlink">面向对象</a>系统的产品进行说明、可视化和<a href="https://baike.baidu.com/item/%E7%BC%96%E5%88%B6/9907954?fromModule=lemma_inlink">编制</a>文档的一种标准语言，是非专利的第三代建模和规约语言。UML是面向对象设计的建模工具，独立于任何具体程序设计语言。</p></blockquote><h1 id="UML-—-类图-Class-Diagram"><a href="#UML-—-类图-Class-Diagram" class="headerlink" title="UML —> 类图 (Class Diagram)"></a>UML —&gt; 类图 (Class Diagram)</h1><span id="more"></span><blockquote><p>​类图是描述系统中的类，以及各个类之间的关系的静态视图。能够让开发人员在正确编写代码以前对系统有一个全面的认识。类图是一种模型类型，确切地说，是一种静态模型类型。类图表示类、接口和它们之间的协作关系。</p></blockquote><h2 id="类的表示法"><a href="#类的表示法" class="headerlink" title="类的表示法"></a>类的表示法</h2><p>类图标由<strong>三个部分</strong>组成：第一个部分是<strong>类名</strong>，第二个部分是<strong>属性</strong>，第三个部分是<strong>操作</strong>。</p><img src="/2024/03/18/UML/1704985968883.png" class="" width="1704985968883"><p><strong>类名</strong>在它的命名空间中唯一。类名以<strong>大写字母开头</strong>，省略多个单词之间的空格。</p><p><strong>属性和操作</strong>在类的范围内必须无二义。属性和操作是<strong>以小写字母开头</strong>，<strong>后续单词的首字母大写</strong>，且同样省略空格。</p><p><strong>抽象类</strong>和<strong>抽象操作</strong>用<strong>斜体</strong>表示。</p><ul><li><strong>属性</strong>规格说明格式：</li></ul><p>可见性 属性名称：类型 [多重性] = 默认值 {特性字符串}</p><ul><li><strong>操作</strong>规格说明格式：</li></ul><p>可见性 操作名称（参数名称：类型）：返回值 {特性字符串}</p><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><ul><li><strong>公有</strong>可见性（+）：对能看到这个类的任何元素都可见。</li><li><strong>保护</strong>可见性（#）：对这个类及其子类的其他元素可见。</li><li><strong>私有</strong>可见性（-）：对这个类的其他元素可见。</li><li><strong>包</strong>可见性（~）：对同一个包中的其他元素可见。</li></ul><img src="/2024/03/18/UML/1704986243995.png" class="" width="1704986243995"><h2 id="类关系"><a href="#类关系" class="headerlink" title="类关系"></a>类关系</h2><p>类的基本联系包括<strong>关联、泛化、聚合和组合</strong>。</p><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>关联用<strong>不带箭头的实线</strong>表示。</p><img src="/2024/03/18/UML/1704986328713.png" class="" width="1704986328713"><p>关联连接了两个类，体现了一种<strong>语义关系</strong>。</p><p>关联通常用<strong>名词词组</strong>来标注，如下图中的Analyzes，以说明关系的实质。</p><p>类可能与它自己有关联（称为<strong>自关联</strong>），如PlanAnalyst类的实例之间的协作。注意，这里同时使用了<strong>关联端名称</strong>和<strong>关联名称</strong>，目的是提供清晰性。</p><img src="/2024/03/18/UML/1704986440350.png" class="" width="1704986440350"><p>关联可以进一步通过<strong>多重性</strong>来修饰（没有也可以）。多重性的语法如下：</p><ul><li>精确到1个。</li><li>数目不限（0个或多个）。</li><li>0..*：0个或多个。</li><li>1..*：1个多多个。</li><li>0..1：0个或1个。</li><li>3..7：指定范围（3~7个，包含3和7）</li></ul><p>多重性应用于关联的目标端，说明<strong>源类的每个实例与目标类实例的连接个数</strong>。除非显式说明，否则关系的多重性就是未指定的。</p><h3 id="高级概念：关联的方向性。"><a href="#高级概念：关联的方向性。" class="headerlink" title="高级概念：关联的方向性。"></a>高级概念：关联的方向性。</h3><p>在分析时，我们认为关联是分析类之间的双向逻辑连接。在设计时，我们将关注的焦点转到关联的导航性上。</p><p>从<strong>GrainCrop</strong>类到<strong>GrainYieldPredictor</strong>类的单向关联通常意味着<strong>GrainCrop</strong>类的某些方法在实现时使用了<strong>GrainYieldPredictor</strong>类的服务。注意，<strong>GrainCrop</strong>类和<strong>GrainYieldPredictor</strong>类之间的关联端名称的可见性，<strong>GrainCrop</strong>对<strong>GrainYieldPredictor</strong>类似私有的。</p><img src="/2024/03/18/UML/1704986526322.png" class="" width="1704986526322"><h3 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h3><p>泛化描述的“<strong>是一种</strong>”的关系。</p><p>泛化用<strong>带有封闭箭头的实线</strong>表示。<strong>箭头指向超类，关联的另一端是子类</strong>。</p><p>子类继承超类的结构和行为。根据这些规则，一个类可以有一个（单继承）或多个（多继承）超类，超类间的名字冲突也可以根据所选语言的规则来处理。</p><p>泛化关系<strong>不能有多重性指定</strong>。</p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>聚合表明一种<strong>整体-部分</strong>的层次结构。</p><p>聚合用<strong>带有一个空心菱形的实线</strong>表示。<strong>菱形所在的一端是聚合体（整体），另一端的类代表它的实例构成了聚合对象的部分</strong>。</p><p>自聚合和循环聚合关系是可能的。这种整体-部分的层次关系<strong>并不意味着物理上的包容</strong>：一个专业协会有一些成员，但不表示协会拥有它的成员。就如汽车和轮胎，当汽车销毁的时候，并不意味着轮胎也销毁了。即<strong>两个对象的生命周期是相互独立的</strong>。</p><p>聚合关系末端的*（0个或多个）<strong>多重性</strong>进一步突出了这不是物理包容关系。</p><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>组合则是关联更强的聚合。<strong>部分与整体共存亡</strong>，是物理包容。</p><p>组合用<strong>带有一个实心菱形的实线</strong>表示。<strong>菱形所在的一端是整体，另外一端是部分</strong>。</p><p><strong>整体</strong>所在的一端的<strong>多重性是1</strong>，因为根据定义，<strong>部分在整体之外就没有任何意义，整体拥有部分，部分的生命周期与整体式一样的</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT</title>
      <link href="/2024/03/18/JWT/"/>
      <url>/2024/03/18/JWT/</url>
      
        <content type="html"><![CDATA[<blockquote><p>了解什么是JWT</p></blockquote><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h2 id="什么是JWT？"><a href="#什么是JWT？" class="headerlink" title="什么是JWT？"></a>什么是JWT？</h2><p>JWT （JSON Web Token） 是目前最流行的跨域认证解决方案，是一种基于 Token 的认证授权机制。 从 JWT 的全称可以看出，JWT 本身也是 Token，一种规范化之后的 JSON 结构的 Token。</p><p>JWT 自身包含了身份验证所需要的所有信息，因此，我们的服务器不需要存储 Session 信息。这显然增加了系统的可用性和伸缩性，大大减轻了服务端的压力。</p><p>可以看出，<strong>JWT 更符合设计 RESTful API 时的「Stateless（无状态）」原则</strong> 。</p><p>并且， 使用 JWT 认证可以有效避免 CSRF 攻击，因为 JWT 一般是存在在 localStorage 中，使用 JWT 进行身份验证的过程中是不会涉及到 Cookie 的。</p><span id="more"></span><p>下面是 <a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a> 对 JWT 做的较为正式的定义。</p><blockquote><p>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted. ——<a href="https://tools.ietf.org/html/rfc7519">JSON Web Token (JWT)</a></p></blockquote><h2 id="JWT由哪些部分组成"><a href="#JWT由哪些部分组成" class="headerlink" title="JWT由哪些部分组成"></a>JWT由哪些部分组成</h2><img src="/2024/03/18/JWT/1697961927099.png" class="" width="1697961927099"><p>JWT 本质上就是一组字串，通过（<code>.</code>）切分成三个为 Base64 编码的部分：</p><ul><li><strong>Header</strong> : 描述 JWT 的元数据，定义了生成签名的算法以及 <code>Token</code> 的类型。</li><li><strong>Payload</strong> : 用来存放实际需要传递的数据</li><li><strong>Signature（签名）</strong>：服务器通过 Payload、Header 和一个密钥(Secret)使用 Header 里面指定的签名算法（默认是 HMAC SHA256）生成。</li></ul><p>JWT 通常是这样的：<code>xxxxx.yyyyy.zzzzz</code>。</p><p>示例：</p><pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</code></pre><p>你可以在 <a href="https://jwt.io/">jwt.io</a> 这个网站上对其 JWT 进行解码，解码之后得到的就是 Header、Payload、Signature 这三部分。</p><p>Header 和 Payload 都是 JSON 格式的数据，Signature 由 Payload、Header 和 Secret(密钥)通过特定的计算公式和加密算法得到。</p><img src="/2024/03/18/JWT/1697962095463.png" class="" width="1697962095463"><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header 通常由两部分组成：</p><ul><li><code>typ</code>（Type）：令牌类型，也就是 JWT。</li><li><code>alg</code>（Algorithm）：签名算法，比如 HS256。</li></ul><p>示例：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>  <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">}</span></code></pre><p>JSON 形式的 Header 被转换成 Base64 编码，成为 JWT 的第一部分。</p><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>Payload 也是 JSON 格式数据，其中包含了 Claims(声明，包含 JWT 的相关信息)。</p><p>Claims 分为三种类型：</p><ul><li><strong>Registered Claims（注册声明）</strong>：预定义的一些声明，建议使用，但不是强制性的。</li><li><strong>Public Claims（公有声明）</strong>：JWT 签发方可以自定义的声明，但是为了避免冲突，应该在 <a href="https://www.iana.org/assignments/jwt/jwt.xhtml">IANA JSON Web Token Registry</a> 中定义它们。</li><li><strong>Private Claims（私有声明）</strong>：JWT 签发方因为项目需要而自定义的声明，更符合实际项目场景使用。</li></ul><p>下面是一些常见的注册声明：</p><ul><li><code>iss</code>（issuer）：JWT 签发方。</li><li><code>iat</code>（issued at time）：JWT 签发时间。</li><li><code>sub</code>（subject）：JWT 主题。</li><li><code>aud</code>（audience）：JWT 接收方。</li><li><code>exp</code>（expiration time）：JWT 的过期时间。</li><li><code>nbf</code>（not before time）：JWT 生效时间，早于该定义的时间的 JWT 不能被接受处理。</li><li><code>jti</code>（JWT ID）：JWT 唯一标识。</li></ul><p>示例：</p><pre><code>{  "uid": "ff1212f5-d8d1-4496-bf41-d2dda73de19a",  "sub": "1234567890",  "name": "John Doe",  "exp": 15323232,  "iat": 1516239022,  "scope": ["admin", "user"]}</code></pre><p>Payload 部分默认是不加密的，<strong>一定不要将隐私信息存放在 Payload 当中！！！</strong></p><p>JSON 形式的 Payload 被转换成 Base64 编码，成为 JWT 的第二部分。</p><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>Signature 部分是对前两部分的签名，作用是防止 JWT（主要是 payload） 被篡改。</p><p>这个签名的生成需要用到：</p><ul><li>Header + Payload。</li><li>存放在服务端的密钥(一定不要泄露出去)。</li><li>签名算法。</li></ul><p>签名的计算公式如下：</p><pre><code>HMACSHA256(  base64UrlEncode(header) + "." +  base64UrlEncode(payload),  secret)</code></pre><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（<code>.</code>）分隔，这个字符串就是 JWT 。</p><h2 id="如何基于JWT进行身份验证"><a href="#如何基于JWT进行身份验证" class="headerlink" title="如何基于JWT进行身份验证"></a>如何基于JWT进行身份验证</h2><p>在基于 JWT 进行身份验证的的应用程序中，服务器通过 Payload、Header 和 Secret(密钥)创建 JWT 并将 JWT 发送给客户端。客户端接收到 JWT 之后，会将其保存在 Cookie 或者 localStorage 里面，以后客户端发出的所有请求都会携带这个令牌。</p><img src="/2024/03/18/JWT/1697962369926.png" class="" width="1697962369926"><p>简化后的步骤如下：</p><ol><li>用户向服务器发送用户名、密码以及验证码用于登陆系统。</li><li>如果用户用户名、密码以及验证码校验正确的话，服务端会返回已经签名的 Token，也就是 JWT。</li><li>用户以后每次向后端发请求都在 Header 中带上这个 JWT 。</li><li>服务端检查 JWT 并从中获取用户相关信息。</li></ol><p>两点建议：</p><ol><li>建议将 JWT 存放在 localStorage 中，放在 Cookie 中会有 CSRF 风险。</li><li>请求服务端并携带 JWT 的常见做法是将其放在 HTTP Header 的 <code>Authorization</code> 字段中（<code>Authorization: Bearer Token</code>）。</li></ol><h2 id="如何防止JWT被篡改"><a href="#如何防止JWT被篡改" class="headerlink" title="如何防止JWT被篡改"></a>如何防止JWT被篡改</h2><p>有了签名之后，即使 JWT 被泄露或者截获，黑客也没办法同时篡改 Signature、Header、Payload。</p><p>这是为什么呢？因为服务端拿到 JWT 之后，会解析出其中包含的 Header、Payload 以及 Signature 。服务端会根据 Header、Payload、密钥再次生成一个 Signature。拿新生成的 Signature 和 JWT 中的 Signature 作对比，如果一样就说明 Header 和 Payload 没有被修改。</p><p>不过，如果服务端的秘钥也被泄露的话，黑客就可以同时篡改 Signature、Header、Payload 了。黑客直接修改了 Header 和 Payload 之后，再重新生成一个 Signature 就可以了。</p><p><strong>密钥一定保管好，一定不要泄露出去。JWT 安全的核心在于签名，签名安全的核心在密钥。</strong></p><h2 id="如何加强JWT的安全性"><a href="#如何加强JWT的安全性" class="headerlink" title="如何加强JWT的安全性"></a>如何加强JWT的安全性</h2><ol><li>使用安全系数高的加密算法。</li><li>使用成熟的开源库，没必要造轮子。</li><li>JWT 存放在 localStorage 中而不是 Cookie 中，避免 CSRF 风险。</li><li>一定不要将隐私信息存放在 Payload 当中。</li><li>密钥一定保管好，一定不要泄露出去。JWT 安全的核心在于签名，签名安全的核心在密钥。</li><li>Payload 要加入 <code>exp</code> （JWT 的过期时间），永久有效的 JWT 不合理。并且，JWT 的过期时间不易过长。</li><li>……</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jaeger</title>
      <link href="/2024/03/18/Jaeger/"/>
      <url>/2024/03/18/Jaeger/</url>
      
        <content type="html"><![CDATA[<blockquote><p>分布式追踪系统</p></blockquote><h1 id="Jaeger"><a href="#Jaeger" class="headerlink" title="Jaeger"></a>Jaeger</h1><span id="more"></span><img src="/2024/03/18/Jaeger/1697972801877.png" class="" width="1697972801877"><p>Jaeger 受到<a href="https://research.google.com/pubs/pub36356.html">Dapper</a>和<a href="https://zipkin.io/">OpenZipkin的启发，是由</a><a href="https://uber.github.io/">Uber Technologies</a>创建 。</p><p>可用于监控基于微服务的分布式系统：</p><ul><li>分布式上下文传播</li><li>分布式事务监控</li><li>根本原因分析</li><li>服务依赖分析</li><li>性能/延迟优化</li></ul><h2 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h2><p>采用dcoker启动</p><pre class=" language-shell"><code class="language-shell">docker run --rm --name jaeger \  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \  -p 6831:6831/udp \  -p 6832:6832/udp \  -p 5778:5778 \  -p 16686:16686 \  -p 4317:4317 \  -p 4318:4318 \  -p 14250:14250 \  -p 14268:14268 \  -p 14269:14269 \  -p 9411:9411 \  jaegertracing/all-in-one:1.53</code></pre><p>windows上启动时:</p><pre class=" language-pow"><code class="language-pow">docker run -d --name 12306-jaeger `  --network go-zero-12306 `  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 `  -p 6831:6831/udp `  -p 6832:6832/udp `  -p 5778:5778 `  -p 16686:16686 `  -p 4317:4317 `  -p 4318:4318 `  -p 14250:14250 `  -p 14268:14268 `  -p 14269:14269 `  -p 9411:9411 `  jaegertracing/all-in-one:1.53</code></pre><p>启动后访问<a href="http://localhost:16686，如下">http://localhost:16686，如下</a></p><img src="/2024/03/18/Jaeger/1697973439846.png" class="" width="1697973439846"><p>在go-zero中，添加链路追踪即可</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#链路追踪</span><span class="token key atrule">Telemetry</span><span class="token punctuation">:</span>  <span class="token key atrule">Name</span><span class="token punctuation">:</span> template<span class="token punctuation">-</span>api  <span class="token key atrule">Endpoint</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>14268/api/traces  <span class="token key atrule">Sampler</span><span class="token punctuation">:</span> <span class="token number">1.0</span>  <span class="token key atrule">Batcher</span><span class="token punctuation">:</span> jaeger</code></pre><img src="/2024/03/18/Jaeger/1705205490517.png" class="" width="1705205490517"><h2 id="服务性能监控"><a href="#服务性能监控" class="headerlink" title="服务性能监控"></a>服务性能监控</h2><p>在 Jaeger UI 中作为“Monitor”选项卡出现，此功能的动机是帮助识别有趣的跟踪（例如高 QPS、缓慢或错误的请求），而无需预先知道服务或操作名称。</p><p>它本质上是通过聚合跨度数据以生成 RED（请求、错误、持续时间）指标来实现的。</p><p>潜在的用例包括：</p><ul><li>对整个组织或请求链中已知的依赖服务进行部署后健全性检查。</li><li>在收到问题警报时进行监控并找出根本原因。</li><li>为 Jaeger UI 新用户提供更好的入门体验。</li><li>QPS、错误和延迟的长期趋势分析。</li><li>容量规划。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/2024/03/18/React/"/>
      <url>/2024/03/18/React/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>复习React的相关知识</strong></p></blockquote><span id="more"></span><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="1-创建和嵌套组件"><a href="#1-创建和嵌套组件" class="headerlink" title="1. 创建和嵌套组件"></a>1. 创建和嵌套组件</h3><p>React 应用程序是由 <strong>组件</strong> 组成的。一个组件是 UI（用户界面）的一部分，它拥有自己的逻辑和外观。组件可以小到一个按钮，也可以大到整个页面。</p><p>React 组件是返回标签的 JavaScript 函数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>         <span class="token operator">&lt;</span>button<span class="token operator">></span>I'm a button<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>至此，你已经声明了 <code>MyButton</code>，现在把它嵌套到另一个组件中：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>Welcome to my app<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>MyButton <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h3 id="2-使用JSX编写标签"><a href="#2-使用JSX编写标签" class="headerlink" title="2. 使用JSX编写标签"></a>2. 使用JSX编写标签</h3><p>上面所使用的标签语法被称为 <em>JSX</em>。它是可选的，但大多数 React 项目会使用 JSX，主要是它很方便。所有 <a href="https://react.docschina.org/learn/installation">我们推荐的本地开发工具</a> 都开箱即用地支持 JSX。</p><p>JSX 比 HTML 更加严格。你必须闭合标签，如 <code>&lt;br /&gt;</code>。你的组件也不能返回多个 JSX 标签。你必须将它们包裹到一个共享的父级中，比如 <code>&lt;div&gt;...&lt;/div&gt;</code> 或使用空的 <code>&lt;&gt;...&lt;/&gt;</code> 包裹：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">AboutPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello there<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>How <span class="token keyword">do</span> you <span class="token keyword">do</span><span class="token operator">?</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你有大量的 HTML 需要移植到 JSX 中，你可以使用 <a href="https://transform.tools/html-to-jsx">在线转换器</a>。</p><h3 id="3-添加样式"><a href="#3-添加样式" class="headerlink" title="3. 添加样式"></a>3. 添加样式</h3><p>在 React 中，你可以使用 <code>className</code> 来指定一个 CSS 的 class。它与 HTML 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/class"><code>class</code></a> 属性的工作方式相同：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h3 id="4-显示数据"><a href="#4-显示数据" class="headerlink" title="4. 显示数据"></a>4. 显示数据</h3><p>JSX 会让你把标签放到 JavaScript 中。而大括号会让你 “回到” JavaScript 中，这样你就可以从你的代码中嵌入一些变量并展示给用户。例如，这将显示 <code>user.name</code>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>    <span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>你还可以将 JSX 属性 “转义到 JavaScript”，但你必须使用大括号 <strong>而非</strong> 引号。例如，<code>className="avatar"</code> 是将 <code>"avatar"</code> 字符串传递给 <code>className</code>，作为 CSS 的 class。但 <code>src={user.imageUrl}</code> 会读取 JavaScript 的 <code>user.imageUrl</code> 变量，然后将该值作为 <code>src</code> 属性传递：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>    <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span>    <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>imageUrl<span class="token punctuation">}</span></span>  <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>你也可以把更为复杂的表达式放入 JSX 的大括号内，例如 <a href="https://javascript.info/operators#string-concatenation-with-binary">字符串拼接</a>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Hedy Lamarr'</span><span class="token punctuation">,</span>  imageUrl<span class="token punctuation">:</span> <span class="token string">'https://i.imgur.com/yXOvdOSs.jpg'</span><span class="token punctuation">,</span>  imageSize<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span>        <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>imageUrl<span class="token punctuation">}</span></span>        <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token string">'Photo of '</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span>        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>          width<span class="token punctuation">:</span> user<span class="token punctuation">.</span>imageSize<span class="token punctuation">,</span>          height<span class="token punctuation">:</span> user<span class="token punctuation">.</span>imageSize        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>      <span class="token punctuation">/></span></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在上面示例中，<code>style={{}}</code> 并不是一个特殊的语法，而是 <code>style={ }</code> JSX 大括号内的一个普通 <code>{}</code> 对象。当你的样式依赖于 JavaScript 变量时，你可以使用 <code>style</code> 属性。</p><h3 id="5-条件渲染"><a href="#5-条件渲染" class="headerlink" title="5. 条件渲染"></a>5. 条件渲染</h3><p>React 没有特殊的语法来编写条件语句，因此你使用的就是普通的 JavaScript 代码。例如使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else"><code>if</code></a> 语句根据条件引入 JSX：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">let</span> content<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  content <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AdminPanel</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  content <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginForm</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">{</span>content<span class="token punctuation">}</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果你喜欢更为紧凑的代码，可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">条件 <code>?</code> 运算符</a>。与 <code>if</code> 不同的是，它工作于 JSX 内部：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">{</span>isLoggedIn <span class="token operator">?</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AdminPanel</span> <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginForm</span> <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>当你不需要 <code>else</code> 分支时，你还可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation">逻辑 <code>&amp;&amp;</code> 语法</a>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">{</span>isLoggedIn <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AdminPanel</span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>所有这些方法也适用于有条件地指定属性。如果你对 JavaScript 语法不熟悉，你可以从一直使用 <code>if...else</code> 开始。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> products <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'Cabbage'</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'Garlic'</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>在你的组件中，使用 <code>map()</code> 函数将这个数组转换为 <code>&lt;li&gt;</code> 标签构成的列表:</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> listItems <span class="token operator">=</span> products<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>product <span class="token operator">=</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">{</span>product<span class="token punctuation">.</span>title<span class="token punctuation">}</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意， <code>&lt;li&gt;</code> 有一个 <code>key</code> 属性。对于列表中的每一个元素，你都应该传递一个字符串或者数字给 <code>key</code>，用于在其兄弟节点中唯一标识该元素。通常 key 来自你的数据，比如数据库中的 ID。如果你在后续插入、删除或重新排序这些项目，React 将依靠你提供的 key 来思考发生了什么。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> products <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'Cabbage'</span><span class="token punctuation">,</span> isFruit<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'Garlic'</span><span class="token punctuation">,</span> isFruit<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> isFruit<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ShoppingList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> listItems <span class="token operator">=</span> products<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>product <span class="token operator">=</span><span class="token operator">></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>      <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span>      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>        color<span class="token punctuation">:</span> product<span class="token punctuation">.</span>isFruit <span class="token operator">?</span> <span class="token string">'magenta'</span> <span class="token punctuation">:</span> <span class="token string">'darkgreen'</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>    <span class="token punctuation">></span></span>      <span class="token punctuation">{</span>product<span class="token punctuation">.</span>title<span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="6-响应事件"><a href="#6-响应事件" class="headerlink" title="6. 响应事件"></a>6. 响应事件</h3><p>可以通过在组件中声明 <strong>事件处理</strong> 函数来响应事件：</p><pre class=" language-JSX"><code class="language-JSX">function MyButton() {  function handleClick() {    alert('You clicked me!');  }  return (    <button onClick={handleClick}>      Click me    </button>  );}</code></pre><p>注意，<code>onClick={handleClick}</code> 的结尾没有小括号！不要 <strong>调用</strong> 事件处理函数：你只需 <strong>把函数传递给事件</strong> 即可。当用户点击按钮时 React 会调用你传递的事件处理函数。</p><h3 id="7-更新界面"><a href="#7-更新界面" class="headerlink" title="7. 更新界面"></a>7. 更新界面</h3><p>通常你会希望你的组件 “记住” 一些信息并展示出来，比如一个按钮被点击的次数。要做到这一点，你需要在你的组件中添加 <strong>state</strong>。</p><p>首先，从 React 引入 <a href="https://react.docschina.org/reference/react/useState"><code>useState</code></a>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span></code></pre><p>现在你可以在你的组件中声明一个 <strong>state 变量</strong>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span></code></pre><p>你将从 <code>useState</code> 中获得两样东西：当前的 state（<code>count</code>），以及用于更新它的函数（<code>setCount</code>）。你可以给它们起任何名字，但按照惯例会像 <code>[something, setSomething]</code> 这样为它们命名。</p><p>第一次显示按钮时，<code>count</code> 的值为 <code>0</code>，因为你把 <code>0</code> 传给了 <code>useState()</code>。当你想改变 state 时，调用 <code>setCount()</code> 并将新的值传递给它。点击该按钮计数器将递增：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      Clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>React 将再次调用你的组件函数。第一次 <code>count</code> 变成 <code>1</code>。接着点击会变成 <code>2</code>。继续点击会逐步递增。</p><p>如果你多次渲染同一个组件，每个组件都会拥有自己的 state。你可以尝试点击不同的按钮：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Counters that update separately<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyButton</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyButton</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      Clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="8-使用Hook"><a href="#8-使用Hook" class="headerlink" title="8. 使用Hook"></a>8. 使用Hook</h3><p>以 <code>use</code> 开头的函数被称为 <strong>Hook</strong>。<code>useState</code> 是 React 提供的一个内置 Hook。你可以在 <a href="https://react.docschina.org/reference/react">React API 参考</a> 中找到其他内置的 Hook。你也可以通过组合现有的 Hook 来编写属于你自己的 Hook。</p><p>Hook 比普通函数更为严格。你只能在你的组件（或其他 Hook）的 <strong>顶层</strong> 调用 Hook。如果你想在一个条件或循环中使用 <code>useState</code>，请提取一个新的组件并在组件内部使用它。</p><h3 id="9-组件间共享数据"><a href="#9-组件间共享数据" class="headerlink" title="9. 组件间共享数据"></a>9. 组件间共享数据</h3><p>在前面的示例中，每个 <code>MyButton</code> 都有自己独立的 <code>count</code>，当每个按钮被点击时，只有被点击按钮的 <code>count</code> 才会发生改变：</p><img src="/2024/03/18/React/1697176588929.png" class="" width="1697176588929"><p>然而，你经常需要组件 <strong>共享数据并一起更新</strong>。</p><p>为了使得 <code>MyButton</code> 组件显示相同的 <code>count</code> 并一起更新，你需要将各个按钮的 state “向上” 移动到最接近包含所有按钮的组件之中。</p><p>在这个示例中，它是 <code>MyApp</code>：</p><img src="/2024/03/18/React/1697176616321.png" class="" width="1697176616321"><p>此刻，当你点击任何一个按钮时，<code>MyApp</code> 中的 <code>count</code> 都将改变，同时会改变 <code>MyButton</code> 中的两个 count。具体代码如下：</p><p>首先，将 <code>MyButton</code> 的 <strong>state 上移到</strong> <code>MyApp</code> 中：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Counters that update separately<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyButton</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyButton</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ... we're moving code from here ...</span><span class="token punctuation">}</span></code></pre><p>接着，将 <code>MyApp</code> 中的点击事件处理函数以及 <strong>state 一同向下传递到</strong> 每个 <code>MyButton</code> 中。你可以使用 JSX 的大括号向 <code>MyButton</code> 传递信息。就像之前向 <code>&lt;img&gt;</code> 等内置标签所做的那样:</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Counters that update together<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyButton</span> <span class="token attr-name">count</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyButton</span> <span class="token attr-name">count</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用这种方式传递的信息被称作 <strong>prop</strong>。此时 <code>MyApp</code> 组件包含了 <code>count</code> state 以及 <code>handleClick</code> 事件处理函数，并将它们作为 <strong>prop 传递给</strong> 了每个按钮。</p><p>最后，改变 <code>MyButton</code> 以 <strong>读取</strong> 从父组件传递来的 prop：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">,</span> onClick <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      Clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当你点击按钮时，<code>onClick</code> 处理程序会启动。每个按钮的 <code>onClick</code> prop 会被设置为 <code>MyApp</code> 内的 <code>handleClick</code> 函数，所以函数内的代码会被执行。该代码会调用 <code>setCount(count + 1)</code>，使得 state 变量 <code>count</code> 递增。新的 <code>count</code> 值会被作为 prop 传递给每个按钮，因此它们每次展示的都是最新的值。这被称为“状态提升”。通过向上移动 state，我们实现了在组件间共享它。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Counters that update together<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyButton</span> <span class="token attr-name">count</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyButton</span> <span class="token attr-name">count</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">,</span> onClick <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      Clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="安装React"><a href="#安装React" class="headerlink" title="安装React"></a>安装React</h2><h3 id="启动一个新的React项目"><a href="#启动一个新的React项目" class="headerlink" title="启动一个新的React项目"></a>启动一个新的React项目</h3><blockquote><p><strong>你需要安装 Node.js 用于本地开发</strong>。你也可以选择在生产环境中使用 Node.js，但你不一定要这样。许多 React 框架支持导出 HTML/CSS/JS 等静态文件。</p></blockquote><h4 id="生产级的React框架"><a href="#生产级的React框架" class="headerlink" title="生产级的React框架"></a>生产级的React框架</h4><h5 id="1-Next-js"><a href="#1-Next-js" class="headerlink" title="1. Next.js"></a>1. Next.js</h5><p><strong>Next.js 是一个全栈式的 React 框架</strong>。它用途广泛，可以让你创建任意规模的 React 应用——可以是静态博客，也可以是复杂的动态应用。要创建一个新的 Next.js 项目，请在你的终端运行：</p><pre class=" language-powershell"><code class="language-powershell">npx create<span class="token operator">-</span>next<span class="token operator">-</span>app@latest</code></pre><h5 id="2-Remix"><a href="#2-Remix" class="headerlink" title="2. Remix"></a>2. Remix</h5><p><strong>Remix 是一个具有嵌套路由的全栈式 React 框架</strong>。它可以把你的应用分成嵌套部分，该嵌套部分可以并行加载数据并响应用户操作进行刷新。要创建一个新的 Remix 项目，请运行：</p><pre class=" language-powershell"><code class="language-powershell">npx create<span class="token operator">-</span>remix</code></pre><h5 id="3-Gatsby"><a href="#3-Gatsby" class="headerlink" title="3. Gatsby"></a>3. Gatsby</h5><p><strong>Gatsby 是一个快速的支持 CMS 的网站的 React 框架</strong>。其丰富的插件生态系统和 GraphQL 数据层简化了将内容、API 和服务整合到一个网站的过程。要创建一个新的 Gatsby 项目，请运行：</p><pre class=" language-pow"><code class="language-pow">npx create-gatsby</code></pre><h5 id="4-Expo-用于原生应用"><a href="#4-Expo-用于原生应用" class="headerlink" title="4. Expo(用于原生应用)"></a>4. Expo(用于原生应用)</h5><p> <strong>Expo 是一个 React 框架，可以让你创建具有真正原生 UI 的应用，包括 Android、iOS，以及 Web 应用</strong>。它为 <a href="https://reactnative.dev/">React Native</a> 提供了 SDK，使原生部分更容易使用。要创建一个新的 Expo 项目，请运行：</p><pre class=" language-Pow"><code class="language-Pow">npx create-expo-app</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis源码阅读0</title>
      <link href="/2024/03/18/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%970/"/>
      <url>/2024/03/18/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%970/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主要记录我对于redis7.2.3源码的阅读</p></blockquote><p>What is Redis?</p><blockquote><p>Redis is often referred to as a <em>data structures</em> server. What this means is that Redis provides access to mutable data structures via a set of commands, which are sent using a <em>server-client</em> model with TCP sockets and a simple protocol. So different processes can query and modify the same data structures in a shared way.</p></blockquote><p>Redis通常被称为数据结构服务器。这意味着Redis通过一组命令提供对可变数据结构的访问，这些命令使用带有TCP套接字和简单协议的服务器-客户端模型发送。因此，不同的进程可以以共享的方式查询和修改相同的数据结构。</p><blockquote><p>阅读方法采用提出问题 –&gt; 再去探索的思路。</p></blockquote><h2 id="问题一：Redis解析执行命令行命令的流程？"><a href="#问题一：Redis解析执行命令行命令的流程？" class="headerlink" title="问题一：Redis解析执行命令行命令的流程？"></a>问题一：Redis解析执行命令行命令的流程？</h2><span id="more"></span><p>Redis server 和一个客户端建立连接后，会在事件驱动框架中注册可读事件——客户端的命令请求。命令处理对应 4 个阶段：</p><ul><li><code>命令读取</code>：对应 readQueryFromClient 函数</li><li><code>命令解析</code>：对应 processInputBuffer 函数</li><li><code>命令执行</code>：对应 processCommand 函数</li><li><code>结果返回</code>：对应 addReply 函数</li></ul><p>在redis源码的 server.c中定义了一些 dictType</p><p>（位于dict.h）</p><blockquote><p>我的理解是，定义一个所有的命令公共的dictType结构体。</p></blockquote><pre class=" language-c++"><code class="language-c++">typedef struct dictType {    uint64_t (*hashFunction)(const void *key);    void *(*keyDup)(dict *d, const void *key);    void *(*valDup)(dict *d, const void *obj);    int (*keyCompare)(dict *d, const void *key1, const void *key2);    void (*keyDestructor)(dict *d, void *key);    void (*valDestructor)(dict *d, void *obj);    int (*expandAllowed)(size_t moreMem, double usedRatio);    /* Invoked at the start of dict initialization/rehashing (old and new ht are already created) */    void (*rehashingStarted)(dict *d);    /* Invoked at the end of dict initialization/rehashing of all the entries from old to new ht. Both ht still exists     * and are cleaned up after this callback.  */    void (*rehashingCompleted)(dict *d);    /* Flags */    /* The 'no_value' flag, if set, indicates that values are not used, i.e. the     * dict is a set. When this flag is set, it's not possible to access the     * value of a dictEntry and it's also impossible to use dictSetKey(). Entry     * metadata can also not be used. */    unsigned int no_value:1;    /* If no_value = 1 and all keys are odd (LSB=1), setting keys_are_odd = 1     * enables one more optimization: to store a key without an allocated     * dictEntry. */    unsigned int keys_are_odd:1;    /* TODO: Add a 'keys_are_even' flag and use a similar optimization if that     * flag is set. */} dictType;</code></pre><p> <code>dictType</code>是Redis中的一个结构体类型，用于定义字典（dict）的哈希表实现。它包含了一些回调函数指针，这些函数在字典初始化、重新哈希等操作时被调用。以下是各个字段的作用：</p><ol><li><code>hashFunction</code>：哈希函数，用于计算键的哈希值。</li><li><code>keyDup</code>：键复制函数，用于复制字典中的键。</li><li><code>valDup</code>：值复制函数，用于复制字典中的值。</li><li><code>keyCompare</code>：键比较函数，用于比较两个键是否相等。</li><li><code>keyDestructor</code>：键析构函数，用于释放键所占用的内存。</li><li><code>valDestructor</code>：值析构函数，用于释放值所占用的内存。</li><li><code>expandAllowed</code>：扩展允许函数，用于判断是否可以扩展字典的大小。</li><li><code>rehashingStarted</code>：重新哈希开始函数，在字典初始化或重新哈希开始时调用。</li><li><code>rehashingCompleted</code>：重新哈希完成函数，在字典初始化或重新哈希完成后调用。</li><li><code>no_value</code>：无值标志，如果设置为1，表示字典的值不使用，即字典是一个集合。当此标志为1时，无法访问字典条目的值，也无法使用<code>dictSetKey()</code>函数。条目元数据也不能使用。</li><li><code>keys_are_odd</code>：键奇偶标志，如果设置为1且所有键都是奇数（最低有效位为1），则启用一个优化：在存储没有分配的字典条目时存储键。</li></ol><p>在serve.c中运用dictType定义了一些基础命令格式如下：</p><pre class=" language-c++"><code class="language-c++">/* Set dictionary type. Keys are SDS strings, values are not used. */dictType setDictType = {    dictSdsHash,               /* hash function */    NULL,                      /* key dup */    NULL,                      /* val dup */    dictSdsKeyCompare,         /* key compare */    dictSdsDestructor,         /* key destructor */    .no_value = 1,             /* no values in this dict */    .keys_are_odd = 1          /* an SDS string is always an odd pointer */};</code></pre><p>在networking.c中有createClient</p><p>这里给conn设置了ReadHandler</p><pre class=" language-c++"><code class="language-c++">connSetReadHandler(conn, readQueryFromClient);</code></pre><pre class=" language-c++"><code class="language-c++">client *createClient(connection *conn) {    client *c = zmalloc(sizeof(client));    /* passing NULL as conn it is possible to create a non connected client.     * This is useful since all the commands needs to be executed     * in the context of a client. When commands are executed in other     * contexts (for instance a Lua script) we need a non connected client. */    if (conn) {        connEnableTcpNoDelay(conn);        if (server.tcpkeepalive)            connKeepAlive(conn,server.tcpkeepalive);        connSetReadHandler(conn, readQueryFromClient);        connSetPrivateData(conn, c);    }    ...}</code></pre><p>那么我们知道了我们的读取命令的Handler在创建client的时候设置的，接下来我们来看看<strong>readQueryFormClient</strong>的实现</p><p><strong>命令的读取</strong></p><pre class=" language-c++"><code class="language-c++">void readQueryFromClient(connection *conn) {    client *c = connGetPrivateData(conn);    int nread, big_arg = 0;    size_t qblen, readlen;    /* Check if we want to read from the client later when exiting from     * the event loop. This is the case if threaded I/O is enabled. */    if (postponeClientRead(c)) return;    /* Update total number of reads on server */    atomicIncr(server.stat_total_reads_processed, 1);    readlen = PROTO_IOBUF_LEN;    /* If this is a multi bulk request, and we are processing a bulk reply     * that is large enough, try to maximize the probability that the query     * buffer contains exactly the SDS string representing the object, even     * at the risk of requiring more read(2) calls. This way the function     * processMultiBulkBuffer() can avoid copying buffers to create the     * Redis Object representing the argument. */    if (c->reqtype == PROTO_REQ_MULTIBULK && c->multibulklen && c->bulklen != -1        && c->bulklen >= PROTO_MBULK_BIG_ARG)    {        ssize_t remaining = (size_t)(c->bulklen+2)-(sdslen(c->querybuf)-c->qb_pos);        big_arg = 1;        /* Note that the 'remaining' variable may be zero in some edge case,         * for example once we resume a blocked client after CLIENT PAUSE. */        if (remaining > 0) readlen = remaining;        /* Master client needs expand the readlen when meet BIG_ARG(see #9100),         * but doesn't need align to the next arg, we can read more data. */        if (c->flags & CLIENT_MASTER && readlen < PROTO_IOBUF_LEN)            readlen = PROTO_IOBUF_LEN;    }    qblen = sdslen(c->querybuf);    if (!(c->flags & CLIENT_MASTER) && // master client's querybuf can grow greedy.        (big_arg || sdsalloc(c->querybuf) < PROTO_IOBUF_LEN)) {        /* When reading a BIG_ARG we won't be reading more than that one arg         * into the query buffer, so we don't need to pre-allocate more than we         * need, so using the non-greedy growing. For an initial allocation of         * the query buffer, we also don't wanna use the greedy growth, in order         * to avoid collision with the RESIZE_THRESHOLD mechanism. */        c->querybuf = sdsMakeRoomForNonGreedy(c->querybuf, readlen);        /* We later set the peak to the used portion of the buffer, but here we over         * allocated because we know what we need, make sure it'll not be shrunk before used. */        if (c->querybuf_peak < qblen + readlen) c->querybuf_peak = qblen + readlen;    } else {        c->querybuf = sdsMakeRoomFor(c->querybuf, readlen);        /* Read as much as possible from the socket to save read(2) system calls. */        readlen = sdsavail(c->querybuf);    }    nread = connRead(c->conn, c->querybuf+qblen, readlen);    if (nread == -1) {        if (connGetState(conn) == CONN_STATE_CONNECTED) {            return;        } else {            serverLog(LL_VERBOSE, "Reading from client: %s",connGetLastError(c->conn));            freeClientAsync(c);            goto done;        }    } else if (nread == 0) {        if (server.verbosity <= LL_VERBOSE) {            sds info = catClientInfoString(sdsempty(), c);            serverLog(LL_VERBOSE, "Client closed connection %s", info);            sdsfree(info);        }        freeClientAsync(c);        goto done;    }    sdsIncrLen(c->querybuf,nread);    qblen = sdslen(c->querybuf);    if (c->querybuf_peak < qblen) c->querybuf_peak = qblen;    c->lastinteraction = server.unixtime;    if (c->flags & CLIENT_MASTER) {        c->read_reploff += nread;        atomicIncr(server.stat_net_repl_input_bytes, nread);    } else {        atomicIncr(server.stat_net_input_bytes, nread);    }    if (!(c->flags & CLIENT_MASTER) && sdslen(c->querybuf) > server.client_max_querybuf_len) {        sds ci = catClientInfoString(sdsempty(),c), bytes = sdsempty();        bytes = sdscatrepr(bytes,c->querybuf,64);        serverLog(LL_WARNING,"Closing client that reached max query buffer length: %s (qbuf initial bytes: %s)", ci, bytes);        sdsfree(ci);        sdsfree(bytes);        freeClientAsync(c);        atomicIncr(server.stat_client_qbuf_limit_disconnections, 1);        goto done;    }    /* There is more data in the client input buffer, continue parsing it     * and check if there is a full command to execute. */    if (processInputBuffer(c) == C_ERR)         c = NULL;done:    beforeNextClient(c);}</code></pre><blockquote><p>这段代码是Redis服务器的一部分，用于处理客户端的请求。它首先获取客户端连接的私有数据，然后根据客户端请求的类型和长度，确定是否需要读取更多的数据。如果需要，它会尝试从客户端读取更多的数据，并将其存储在查询缓冲区中。然后，它会检查客户端是否发送了完整的命令，如果是，则处理该命令。最后，它会更新服务器的统计信息，并在必要时关闭客户端连接。</p></blockquote><p>获取数据：client *c = connGetPrivateData(conn);</p><pre class=" language-c++"><code class="language-c++">/* Get the associated private data pointer */static inline void *connGetPrivateData(connection *conn) {    return conn->private_data;}</code></pre><p><strong>命令解析processInputBuffer</strong></p><pre class=" language-c++"><code class="language-c++">int processInputBuffer(client *c) {    /* Keep processing while there is something in the input buffer */    while(c->qb_pos < sdslen(c->querybuf)) {        /* Immediately abort if the client is in the middle of something. */        if (c->flags & CLIENT_BLOCKED) break;        /* Don't process more buffers from clients that have already pending         * commands to execute in c->argv. */        if (c->flags & CLIENT_PENDING_COMMAND) break;        /* Don't process input from the master while there is a busy script         * condition on the slave. We want just to accumulate the replication         * stream (instead of replying -BUSY like we do with other clients) and         * later resume the processing. */        if (isInsideYieldingLongCommand() && c->flags & CLIENT_MASTER) break;        /* CLIENT_CLOSE_AFTER_REPLY closes the connection once the reply is         * written to the client. Make sure to not let the reply grow after         * this flag has been set (i.e. don't process more commands).         *         * The same applies for clients we want to terminate ASAP. */        if (c->flags & (CLIENT_CLOSE_AFTER_REPLY|CLIENT_CLOSE_ASAP)) break;        /* Determine request type when unknown. */        if (!c->reqtype) {            if (c->querybuf[c->qb_pos] == '*') {                c->reqtype = PROTO_REQ_MULTIBULK;            } else {                c->reqtype = PROTO_REQ_INLINE;            }        }        if (c->reqtype == PROTO_REQ_INLINE) {            if (processInlineBuffer(c) != C_OK) break;        } else if (c->reqtype == PROTO_REQ_MULTIBULK) {            if (processMultibulkBuffer(c) != C_OK) break;        } else {            serverPanic("Unknown request type");        }        /* Multibulk processing could see a <= 0 length. */        if (c->argc == 0) {            resetClient(c);        } else {            /* If we are in the context of an I/O thread, we can't really             * execute the command here. All we can do is to flag the client             * as one that needs to process the command. */            if (io_threads_op != IO_THREADS_OP_IDLE) {                serverAssert(io_threads_op == IO_THREADS_OP_READ);                c->flags |= CLIENT_PENDING_COMMAND;                break;            }            /* We are finally ready to execute the command. */            if (processCommandAndResetClient(c) == C_ERR) {                /* If the client is no longer valid, we avoid exiting this                 * loop and trimming the client buffer later. So we return                 * ASAP in that case. */                return C_ERR;            }        }    }    if (c->flags & CLIENT_MASTER) {        /* If the client is a master, trim the querybuf to repl_applied,         * since master client is very special, its querybuf not only         * used to parse command, but also proxy to sub-replicas.         *         * Here are some scenarios we cannot trim to qb_pos:         * 1. we don't receive complete command from master         * 2. master client blocked cause of client pause         * 3. io threads operate read, master client flagged with CLIENT_PENDING_COMMAND         *         * In these scenarios, qb_pos points to the part of the current command         * or the beginning of next command, and the current command is not applied yet,         * so the repl_applied is not equal to qb_pos. */        if (c->repl_applied) {            sdsrange(c->querybuf,c->repl_applied,-1);            c->qb_pos -= c->repl_applied;            c->repl_applied = 0;        }    } else if (c->qb_pos) {        /* Trim to pos */        sdsrange(c->querybuf,c->qb_pos,-1);        c->qb_pos = 0;    }    /* Update client memory usage after processing the query buffer, this is     * important in case the query buffer is big and wasn't drained during     * the above loop (because of partially sent big commands). */    if (io_threads_op == IO_THREADS_OP_IDLE)        updateClientMemUsageAndBucket(c);    return C_OK;}</code></pre><blockquote><p>这段代码是一个名为<code>processInputBuffer</code>的函数，它接收一个指向客户端结构体的指针<code>c</code>作为参数。这个函数的主要目的是处理客户端发送到服务器的命令缓冲区。</p><p>函数首先检查客户端是否处于阻塞状态、是否有待处理的命令或者是否在执行主服务器上的脚本。如果满足这些条件之一，函数将立即终止循环并返回。</p><p>接下来，函数根据客户端请求的类型（单行或多行）来处理输入缓冲区。如果请求类型未知，函数将尝试确定请求类型。然后，根据请求类型调用相应的处理函数（<code>processInlineBuffer</code>或<code>processMultibulkBuffer</code>）。</p><p>在处理完输入缓冲区后，函数会检查客户端是否需要执行命令。如果需要，它将调用<code>processCommandAndResetClient</code>函数来执行命令并重置客户端。如果客户端不再有效，函数将提前返回错误。</p><p>最后，函数会根据客户端类型更新查询缓冲区的大小。对于主服务器客户端，它会将查询缓冲区裁剪到已应用的位置；对于其他类型的客户端，它会将查询缓冲区裁剪到当前位置。</p><p>在整个过程中，函数还会更新客户端的内存使用情况，这在某些情况下是很重要的，例如当查询缓冲区很大且在上述循环中没有被完全消耗时。</p><p>总之，这个函数的作用是处理客户端发送到服务器的命令缓冲区，并根据请求类型执行相应的操作。</p></blockquote><p><strong>执行命令processCommand</strong></p><p>在上述函数中我们回调用processCommandAndResetClient函数，在这里面掉用了执行命令</p><p><strong>processCommandAndResetClient函数</strong></p><pre class=" language-c++"><code class="language-c++">int processCommandAndResetClient(client *c) {    int deadclient = 0;    client *old_client = server.current_client;    server.current_client = c;    if (processCommand(c) == C_OK) {        commandProcessed(c);        /* Update the client's memory to include output buffer growth following the         * processed command. */        updateClientMemUsageAndBucket(c);    }    if (server.current_client == NULL) deadclient = 1;    /*     * Restore the old client, this is needed because when a script     * times out, we will get into this code from processEventsWhileBlocked.     * Which will cause to set the server.current_client. If not restored     * we will return 1 to our caller which will falsely indicate the client     * is dead and will stop reading from its buffer.     */    server.current_client = old_client;    /* performEvictions may flush slave output buffers. This may     * result in a slave, that may be the active client, to be     * freed. */    return deadclient ? C_ERR : C_OK;}</code></pre><blockquote><p>函数首先将当前服务器的客户端设置为传入的客户端<code>c</code>。然后调用<code>processCommand(c)</code>来处理命令，如果处理成功，则调用<code>commandProcessed(c)</code>来标记命令已处理。接下来，调用<code>updateClientMemUsageAndBucket(c)</code>来更新客户端的内存使用情况和存储桶。</p><p>在处理完命令后，函数检查当前服务器的客户端是否为空，如果为空，则将<code>deadclient</code>标志设置为1，表示客户端已死亡。</p><p>为了确保在脚本超时时能够正确恢复旧的客户端状态，函数将服务器的当前客户端还原为之前保存的旧客户端<code>old_client</code>。</p><p>最后，函数根据<code>deadclient</code>标志的值返回相应的结果。如果客户端已死亡，则返回<code>C_ERR</code>；否则返回<code>C_OK</code>。</p></blockquote><p>重点来了，执行命令</p><p><strong>processCommand</strong></p><pre class=" language-c++"><code class="language-c++">int processCommand(client *c) {    if (!scriptIsTimedout()) {        /* Both EXEC and scripts call call() directly so there should be         * no way in_exec or scriptIsRunning() is 1.         * That is unless lua_timedout, in which case client may run         * some commands. */        serverAssert(!server.in_exec);        serverAssert(!scriptIsRunning());    }    /* in case we are starting to ProcessCommand and we already have a command we assume     * this is a reprocessing of this command, so we do not want to perform some of the actions again. */    int client_reprocessing_command = c->cmd ? 1 : 0;    /* only run command filter if not reprocessing command */    if (!client_reprocessing_command) {        moduleCallCommandFilters(c);        reqresAppendRequest(c);    }    /* Handle possible security attacks. */    if (!strcasecmp(c->argv[0]->ptr,"host:") || !strcasecmp(c->argv[0]->ptr,"post")) {        securityWarningCommand(c);        return C_ERR;    }    /* If we're inside a module blocked context yielding that wants to avoid     * processing clients, postpone the command. */    if (server.busy_module_yield_flags != BUSY_MODULE_YIELD_NONE &&        !(server.busy_module_yield_flags & BUSY_MODULE_YIELD_CLIENTS))    {        blockPostponeClient(c);        return C_OK;    }    /* Now lookup the command and check ASAP about trivial error conditions     * such as wrong arity, bad command name and so forth.     * In case we are reprocessing a command after it was blocked,     * we do not have to repeat the same checks */    if (!client_reprocessing_command) {        c->cmd = c->lastcmd = c->realcmd = lookupCommand(c->argv,c->argc);        sds err;        if (!commandCheckExistence(c, &err)) {            rejectCommandSds(c, err);            return C_OK;        }        if (!commandCheckArity(c, &err)) {            rejectCommandSds(c, err);            return C_OK;        }        /* Check if the command is marked as protected and the relevant configuration allows it */        if (c->cmd->flags & CMD_PROTECTED) {            if ((c->cmd->proc == debugCommand && !allowProtectedAction(server.enable_debug_cmd, c)) ||                (c->cmd->proc == moduleCommand && !allowProtectedAction(server.enable_module_cmd, c)))            {                rejectCommandFormat(c,"%s command not allowed. If the %s option is set to \"local\", "                                      "you can run it from a local connection, otherwise you need to set this option "                                      "in the configuration file, and then restart the server.",                                      c->cmd->proc == debugCommand ? "DEBUG" : "MODULE",                                      c->cmd->proc == debugCommand ? "enable-debug-command" : "enable-module-command");                return C_OK;            }        }    }    uint64_t cmd_flags = getCommandFlags(c);    int is_read_command = (cmd_flags & CMD_READONLY) ||                           (c->cmd->proc == execCommand && (c->mstate.cmd_flags & CMD_READONLY));    int is_write_command = (cmd_flags & CMD_WRITE) ||                           (c->cmd->proc == execCommand && (c->mstate.cmd_flags & CMD_WRITE));    int is_denyoom_command = (cmd_flags & CMD_DENYOOM) ||                             (c->cmd->proc == execCommand && (c->mstate.cmd_flags & CMD_DENYOOM));    int is_denystale_command = !(cmd_flags & CMD_STALE) ||                               (c->cmd->proc == execCommand && (c->mstate.cmd_inv_flags & CMD_STALE));    int is_denyloading_command = !(cmd_flags & CMD_LOADING) ||                                 (c->cmd->proc == execCommand && (c->mstate.cmd_inv_flags & CMD_LOADING));    int is_may_replicate_command = (cmd_flags & (CMD_WRITE | CMD_MAY_REPLICATE)) ||                                   (c->cmd->proc == execCommand && (c->mstate.cmd_flags & (CMD_WRITE | CMD_MAY_REPLICATE)));    int is_deny_async_loading_command = (cmd_flags & CMD_NO_ASYNC_LOADING) ||                                        (c->cmd->proc == execCommand && (c->mstate.cmd_flags & CMD_NO_ASYNC_LOADING));    int obey_client = mustObeyClient(c);    if (authRequired(c)) {        /* AUTH and HELLO and no auth commands are valid even in         * non-authenticated state. */        if (!(c->cmd->flags & CMD_NO_AUTH)) {            rejectCommand(c,shared.noautherr);            return C_OK;        }    }    if (c->flags & CLIENT_MULTI && c->cmd->flags & CMD_NO_MULTI) {        rejectCommandFormat(c,"Command not allowed inside a transaction");        return C_OK;    }    /* Check if the user can run this command according to the current     * ACLs. */    int acl_errpos;    int acl_retval = ACLCheckAllPerm(c,&acl_errpos);    if (acl_retval != ACL_OK) {        addACLLogEntry(c,acl_retval,(c->flags & CLIENT_MULTI) ? ACL_LOG_CTX_MULTI : ACL_LOG_CTX_TOPLEVEL,acl_errpos,NULL,NULL);        sds msg = getAclErrorMessage(acl_retval, c->user, c->cmd, c->argv[acl_errpos]->ptr, 0);        rejectCommandFormat(c, "-NOPERM %s", msg);        sdsfree(msg);        return C_OK;    }    /* If cluster is enabled perform the cluster redirection here.     * However we don't perform the redirection if:     * 1) The sender of this command is our master.     * 2) The command has no key arguments. */    if (server.cluster_enabled &&        !mustObeyClient(c) &&        !(!(c->cmd->flags&CMD_MOVABLE_KEYS) && c->cmd->key_specs_num == 0 &&          c->cmd->proc != execCommand))    {        int error_code;        clusterNode *n = getNodeByQuery(c,c->cmd,c->argv,c->argc,                                        &c->slot,&error_code);        if (n == NULL || n != server.cluster->myself) {            if (c->cmd->proc == execCommand) {                discardTransaction(c);            } else {                flagTransaction(c);            }            clusterRedirectClient(c,n,c->slot,error_code);            c->cmd->rejected_calls++;            return C_OK;        }    }    /* Disconnect some clients if total clients memory is too high. We do this     * before key eviction, after the last command was executed and consumed     * some client output buffer memory. */    evictClients();    if (server.current_client == NULL) {        /* If we evicted ourself then abort processing the command */        return C_ERR;    }    /* Handle the maxmemory directive.     *     * Note that we do not want to reclaim memory if we are here re-entering     * the event loop since there is a busy Lua script running in timeout     * condition, to avoid mixing the propagation of scripts with the     * propagation of DELs due to eviction. */    if (server.maxmemory && !isInsideYieldingLongCommand()) {        int out_of_memory = (performEvictions() == EVICT_FAIL);        /* performEvictions may evict keys, so we need flush pending tracking         * invalidation keys. If we don't do this, we may get an invalidation         * message after we perform operation on the key, where in fact this         * message belongs to the old value of the key before it gets evicted.*/        trackingHandlePendingKeyInvalidations();        /* performEvictions may flush slave output buffers. This may result         * in a slave, that may be the active client, to be freed. */        if (server.current_client == NULL) return C_ERR;        int reject_cmd_on_oom = is_denyoom_command;        /* If client is in MULTI/EXEC context, queuing may consume an unlimited         * amount of memory, so we want to stop that.         * However, we never want to reject DISCARD, or even EXEC (unless it         * contains denied commands, in which case is_denyoom_command is already         * set. */        if (c->flags & CLIENT_MULTI &&            c->cmd->proc != execCommand &&            c->cmd->proc != discardCommand &&            c->cmd->proc != quitCommand &&            c->cmd->proc != resetCommand) {            reject_cmd_on_oom = 1;        }        if (out_of_memory && reject_cmd_on_oom) {            rejectCommand(c, shared.oomerr);            return C_OK;        }        /* Save out_of_memory result at command start, otherwise if we check OOM         * in the first write within script, memory used by lua stack and         * arguments might interfere. We need to save it for EXEC and module         * calls too, since these can call EVAL, but avoid saving it during an         * interrupted / yielding busy script / module. */        server.pre_command_oom_state = out_of_memory;    }    /* Make sure to use a reasonable amount of memory for client side     * caching metadata. */    if (server.tracking_clients) trackingLimitUsedSlots();    /* Don't accept write commands if there are problems persisting on disk     * unless coming from our master, in which case check the replica ignore     * disk write error config to either log or crash. */    int deny_write_type = writeCommandsDeniedByDiskError();    if (deny_write_type != DISK_ERROR_TYPE_NONE &&        (is_write_command || c->cmd->proc == pingCommand))    {        if (obey_client) {            if (!server.repl_ignore_disk_write_error && c->cmd->proc != pingCommand) {                serverPanic("Replica was unable to write command to disk.");            } else {                static mstime_t last_log_time_ms = 0;                const mstime_t log_interval_ms = 10000;                if (server.mstime > last_log_time_ms + log_interval_ms) {                    last_log_time_ms = server.mstime;                    serverLog(LL_WARNING, "Replica is applying a command even though "                                          "it is unable to write to disk.");                }            }        } else {            sds err = writeCommandsGetDiskErrorMessage(deny_write_type);            /* remove the newline since rejectCommandSds adds it. */            sdssubstr(err, 0, sdslen(err)-2);            rejectCommandSds(c, err);            return C_OK;        }    }    /* Don't accept write commands if there are not enough good slaves and     * user configured the min-slaves-to-write option. */    if (is_write_command && !checkGoodReplicasStatus()) {        rejectCommand(c, shared.noreplicaserr);        return C_OK;    }    /* Don't accept write commands if this is a read only slave. But     * accept write commands if this is our master. */    if (server.masterhost && server.repl_slave_ro &&        !obey_client &&        is_write_command)    {        rejectCommand(c, shared.roslaveerr);        return C_OK;    }    /* Only allow a subset of commands in the context of Pub/Sub if the     * connection is in RESP2 mode. With RESP3 there are no limits. */    if ((c->flags & CLIENT_PUBSUB && c->resp == 2) &&        c->cmd->proc != pingCommand &&        c->cmd->proc != subscribeCommand &&        c->cmd->proc != ssubscribeCommand &&        c->cmd->proc != unsubscribeCommand &&        c->cmd->proc != sunsubscribeCommand &&        c->cmd->proc != psubscribeCommand &&        c->cmd->proc != punsubscribeCommand &&        c->cmd->proc != quitCommand &&        c->cmd->proc != resetCommand) {        rejectCommandFormat(c,            "Can't execute '%s': only (P|S)SUBSCRIBE / "            "(P|S)UNSUBSCRIBE / PING / QUIT / RESET are allowed in this context",            c->cmd->fullname);        return C_OK;    }    /* Only allow commands with flag "t", such as INFO, REPLICAOF and so on,     * when replica-serve-stale-data is no and we are a replica with a broken     * link with master. */    if (server.masterhost && server.repl_state != REPL_STATE_CONNECTED &&        server.repl_serve_stale_data == 0 &&        is_denystale_command)    {        rejectCommand(c, shared.masterdownerr);        return C_OK;    }    /* Loading DB? Return an error if the command has not the     * CMD_LOADING flag. */    if (server.loading && !server.async_loading && is_denyloading_command) {        rejectCommand(c, shared.loadingerr);        return C_OK;    }    /* During async-loading, block certain commands. */    if (server.async_loading && is_deny_async_loading_command) {        rejectCommand(c,shared.loadingerr);        return C_OK;    }    /* when a busy job is being done (script / module)     * Only allow a limited number of commands.     * Note that we need to allow the transactions commands, otherwise clients     * sending a transaction with pipelining without error checking, may have     * the MULTI plus a few initial commands refused, then the timeout     * condition resolves, and the bottom-half of the transaction gets     * executed, see Github PR #7022. */    if (isInsideYieldingLongCommand() && !(c->cmd->flags & CMD_ALLOW_BUSY)) {        if (server.busy_module_yield_flags && server.busy_module_yield_reply) {            rejectCommandFormat(c, "-BUSY %s", server.busy_module_yield_reply);        } else if (server.busy_module_yield_flags) {            rejectCommand(c, shared.slowmoduleerr);        } else if (scriptIsEval()) {            rejectCommand(c, shared.slowevalerr);        } else {            rejectCommand(c, shared.slowscripterr);        }        return C_OK;    }    /* Prevent a replica from sending commands that access the keyspace.     * The main objective here is to prevent abuse of client pause check     * from which replicas are exempt. */    if ((c->flags & CLIENT_SLAVE) && (is_may_replicate_command || is_write_command || is_read_command)) {        rejectCommandFormat(c, "Replica can't interact with the keyspace");        return C_OK;    }    /* If the server is paused, block the client until     * the pause has ended. Replicas are never paused. */    if (!(c->flags & CLIENT_SLAVE) &&         ((isPausedActions(PAUSE_ACTION_CLIENT_ALL)) ||        ((isPausedActions(PAUSE_ACTION_CLIENT_WRITE)) && is_may_replicate_command)))    {        blockPostponeClient(c);        return C_OK;           }    /* Exec the command */    if (c->flags & CLIENT_MULTI &&        c->cmd->proc != execCommand &&        c->cmd->proc != discardCommand &&        c->cmd->proc != multiCommand &&        c->cmd->proc != watchCommand &&        c->cmd->proc != quitCommand &&        c->cmd->proc != resetCommand)    {        queueMultiCommand(c, cmd_flags);        addReply(c,shared.queued);    } else {        int flags = CMD_CALL_FULL;        if (client_reprocessing_command) flags |= CMD_CALL_REPROCESSING;        call(c,flags);        if (listLength(server.ready_keys) && !isInsideYieldingLongCommand())            handleClientsBlockedOnKeys();    }    return C_OK;}</code></pre><blockquote><p>这段代码是一个名为<code>processCommand</code>的函数，它用于处理客户端发送的命令。函数首先检查命令是否超时，然后根据命令的类型和权限进行相应的处理。接下来，函数会检查命令是否具有可重入性、写权限、读权限等属性，并根据这些属性判断命令是否可以执行。最后，函数会根据命令的类型和执行结果进行相应的操作，如拒绝命令、执行命令等。</p></blockquote><p>​</p><p><strong>返回响应addReply(c,shared.queued);</strong></p><p>在上满执行命令后，我们会返回结果</p><pre class=" language-c++"><code class="language-c++">/* ----------------------------------------------------------------------------- * Higher level functions to queue data on the client output buffer. * The following functions are the ones that commands implementations will call. * -------------------------------------------------------------------------- *//* Add the object 'obj' string representation to the client output buffer. */void addReply(client *c, robj *obj) {    if (prepareClientToWrite(c) != C_OK) return;    if (sdsEncodedObject(obj)) {        _addReplyToBufferOrList(c,obj->ptr,sdslen(obj->ptr));    } else if (obj->encoding == OBJ_ENCODING_INT) {        /* For integer encoded strings we just convert it into a string         * using our optimized function, and attach the resulting string         * to the output buffer. */        char buf[32];        size_t len = ll2string(buf,sizeof(buf),(long)obj->ptr);        _addReplyToBufferOrList(c,buf,len);    } else {        serverPanic("Wrong obj->encoding in addReply()");    }}</code></pre><blockquote><p>这段代码是一个名为<code>addReply</code>的函数，它接受两个参数：一个<code>client</code>指针和一个<code>robj</code>指针。该函数的主要目的是将给定的对象添加到客户端的回复缓冲区或列表中。</p><p>首先，函数调用<code>prepareClientToWrite(c)</code>来准备客户端以进行写操作。如果返回值不是<code>C_OK</code>，则函数直接返回，不执行任何操作。</p><p>接下来，函数检查对象是否为编码过的对象（通过<code>sdsEncodedObject(obj)</code>）。如果是编码过的对象，则使用<code>_addReplyToBufferOrList</code>函数将其添加到客户端的回复缓冲区或列表中。这里使用了<code>obj-&gt;ptr</code>作为要添加的对象，并使用<code>sdslen(obj-&gt;ptr)</code>获取其长度。</p><p>如果对象不是编码过的对象，但对象的编码类型是整数编码（通过<code>obj-&gt;encoding == OBJ_ENCODING_INT</code>），则函数会将整数转换为字符串，并将其添加到客户端的回复缓冲区或列表中。这里使用了优化过的函数<code>ll2string</code>来完成转换，并将结果存储在字符数组<code>buf</code>中。然后，使用<code>_addReplyToBufferOrList</code>函数将转换后的字符串添加到客户端的回复缓冲区或列表中。</p><p>如果对象既不是编码过的对象，也不是整数编码的对象，则函数会触发服务器异常，提示”Wrong obj-&gt;encoding in addReply()”。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis源码阅读1</title>
      <link href="/2024/03/18/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%971/"/>
      <url>/2024/03/18/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%971/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里我想了解Redis的一些基础的类型的具体实现，所有尝试阅读Redis的源码，从源码中学习这些类型的实现。</p></blockquote><ul><li><strong>Strings</strong></li><li><strong>JSON</strong></li><li><strong>Lists</strong></li><li><strong>Sets</strong></li><li><strong>Hashes</strong></li><li><strong>Sorted sets</strong></li><li><strong>Streams</strong></li><li><strong>Geospatial</strong></li><li><strong>Bitmaps</strong></li><li><strong>Bitfields</strong></li><li><strong>Probabilistic</strong></li><li><strong>Time series</strong></li></ul><blockquote><p>Redis is a data structure server. At its core, Redis provides a collection of native data types that help you solve a wide variety of problems, from caching to queuing to event processing. Below is a short description of each data type, with links to broader overviews and command references.</p></blockquote><p>Redis是一个数据结构服务器。Redis的核心是提供了一组本地数据类型，可以帮助你解决各种各样的问题，从缓存到队列再到事件处理。下面是每种数据类型的简短描述，并提供了更广泛概述和命令参考的链接。</p><span id="more"></span><h2 id="data-types"><a href="#data-types" class="headerlink" title="data types"></a>data types</h2><p>Redis的type定义在server.h中如下</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* Objects encoding. Some kind of objects like Strings and Hashes can be * internally represented in multiple ways. The 'encoding' field of the object * is set to one of this fields for this object. */</span><span class="token macro property">#<span class="token directive keyword">define</span> OBJ_ENCODING_RAW 0     </span><span class="token comment" spellcheck="true">/* Raw representation */</span><span class="token macro property">#<span class="token directive keyword">define</span> OBJ_ENCODING_INT 1     </span><span class="token comment" spellcheck="true">/* Encoded as integer */</span><span class="token macro property">#<span class="token directive keyword">define</span> OBJ_ENCODING_HT 2      </span><span class="token comment" spellcheck="true">/* Encoded as hash table */</span><span class="token macro property">#<span class="token directive keyword">define</span> OBJ_ENCODING_ZIPMAP 3  </span><span class="token comment" spellcheck="true">/* No longer used: old hash encoding. */</span><span class="token macro property">#<span class="token directive keyword">define</span> OBJ_ENCODING_LINKEDLIST 4 </span><span class="token comment" spellcheck="true">/* No longer used: old list encoding. */</span><span class="token macro property">#<span class="token directive keyword">define</span> OBJ_ENCODING_ZIPLIST 5 </span><span class="token comment" spellcheck="true">/* No longer used: old list/hash/zset encoding. */</span><span class="token macro property">#<span class="token directive keyword">define</span> OBJ_ENCODING_INTSET 6  </span><span class="token comment" spellcheck="true">/* Encoded as intset */</span><span class="token macro property">#<span class="token directive keyword">define</span> OBJ_ENCODING_SKIPLIST 7  </span><span class="token comment" spellcheck="true">/* Encoded as skiplist */</span><span class="token macro property">#<span class="token directive keyword">define</span> OBJ_ENCODING_EMBSTR 8  </span><span class="token comment" spellcheck="true">/* Embedded sds string encoding */</span><span class="token macro property">#<span class="token directive keyword">define</span> OBJ_ENCODING_QUICKLIST 9 </span><span class="token comment" spellcheck="true">/* Encoded as linked list of listpacks */</span><span class="token macro property">#<span class="token directive keyword">define</span> OBJ_ENCODING_STREAM 10 </span><span class="token comment" spellcheck="true">/* Encoded as a radix tree of listpacks */</span><span class="token macro property">#<span class="token directive keyword">define</span> OBJ_ENCODING_LISTPACK 11 </span><span class="token comment" spellcheck="true">/* Encoded as a listpack */</span></code></pre><h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><blockquote><p>Redis的Strings类型，其实底层是由三种数据结构组成</p><p>1.int:<strong>整数且小于二十位整数以下的数字数据才会使用这个类型</strong></p><p>2.embstr（embedded string，表示嵌入式的String):<strong>代表embstr格式的SDS</strong>（Simple Dynamic String 简单动态字符串），<strong>保存长度小于44字节的字符串。</strong></p><p>3.raw:<strong>保存长度大于44的字符串</strong></p></blockquote><p><strong>测试</strong></p><img src="/2024/03/18/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%971/1699873673102.png" class="" width="1699873673102"><p>这就是redis中，Strings类型没有直接复用C语言的字符串，而是<strong>新建了属于自己的结构————SDS（简单动态字符串）</strong>。在Redis数据库里，<strong>包含字符串的键值对都是由SDS实现的，Redis中所有的值对象包含的字符串对象底层也是由SDS实现</strong>！</p><p>sds.h</p><blockquote><p>这段代码是C语言编写的，用于处理Redis的字符串数据结构SDS（Simple Dynamic String）。SDS是一种动态分配和释放内存的字符串数据结构，它提供了一种高效的方式来存储和操作字符串。</p><p>代码中定义了一些宏和类型，以及一些函数，用于操作SDS字符串。例如，<code>hi_sdslen</code>函数返回SDS字符串的长度，<code>hi_sdssetlen</code>函数设置SDS字符串的长度，<code>hi_sdsnew</code>函数创建一个新的SDS字符串，等等。</p><p>此外，代码还包含了一些辅助函数，如<code>hi_sdscat</code>、<code>hi_sdsdup</code>、<code>hi_sdsfree</code>等，用于对SDS字符串进行各种操作，如连接、复制、释放等。</p><p>最后，代码还包含了一些用于处理SDS字符串的函数，如<code>hi_sdstrim</code>、<code>hi_sdsrange</code>等，用于对SDS字符串进行修剪、范围查询等操作。</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* SDSLib 2.0 -- A C dynamic strings library * * Copyright (c) 2006-2015, Salvatore Sanfilippo &lt;antirez at gmail dot com> * Copyright (c) 2015, Oran Agra * Copyright (c) 2015, Redis Labs, Inc * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are met: * *   * Redistributions of source code must retain the above copyright notice, *     this list of conditions and the following disclaimer. *   * Redistributions in binary form must reproduce the above copyright *     notice, this list of conditions and the following disclaimer in the *     documentation and/or other materials provided with the distribution. *   * Neither the name of Redis nor the names of its contributors may be used *     to endorse or promote products derived from this software without *     specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. */</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> HIREDIS_SDS_H</span><span class="token macro property">#<span class="token directive keyword">define</span> HIREDIS_SDS_H</span><span class="token macro property">#<span class="token directive keyword">define</span> HI_SDS_MAX_PREALLOC (1024*1024)</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _MSC_VER</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ssize_t<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> SSIZE_MAX (LLONG_MAX >> 1)</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __clang__</span><span class="token macro property">#<span class="token directive keyword">define</span> __attribute__(x)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">char</span> <span class="token operator">*</span>hisds<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Note: sdshdr5 is never used, we just access the flags byte directly. * However is here to document the layout of type 5 SDS strings. */</span><span class="token keyword">struct</span> <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> hisdshdr5 <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 3 lsb of type, and 5 msb of string length */</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> hisdshdr8 <span class="token punctuation">{</span>    uint8_t len<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* used */</span>    uint8_t alloc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* excluding the header and null terminator */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 3 lsb of type, 5 unused bits */</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> hisdshdr16 <span class="token punctuation">{</span>    uint16_t len<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* used */</span>    uint16_t alloc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* excluding the header and null terminator */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 3 lsb of type, 5 unused bits */</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> hisdshdr32 <span class="token punctuation">{</span>    uint32_t len<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* used */</span>    uint32_t alloc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* excluding the header and null terminator */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 3 lsb of type, 5 unused bits */</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> hisdshdr64 <span class="token punctuation">{</span>    uint64_t len<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* used */</span>    uint64_t alloc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* excluding the header and null terminator */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 3 lsb of type, 5 unused bits */</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> HI_SDS_TYPE_5  0</span><span class="token macro property">#<span class="token directive keyword">define</span> HI_SDS_TYPE_8  1</span><span class="token macro property">#<span class="token directive keyword">define</span> HI_SDS_TYPE_16 2</span><span class="token macro property">#<span class="token directive keyword">define</span> HI_SDS_TYPE_32 3</span><span class="token macro property">#<span class="token directive keyword">define</span> HI_SDS_TYPE_64 4</span><span class="token macro property">#<span class="token directive keyword">define</span> HI_SDS_TYPE_MASK 7</span><span class="token macro property">#<span class="token directive keyword">define</span> HI_SDS_TYPE_BITS 3</span><span class="token macro property">#<span class="token directive keyword">define</span> HI_SDS_HDR_VAR(T,s) struct hisdshdr##T *sh = (struct hisdshdr##T *)((s)-(sizeof(struct hisdshdr##T)));</span><span class="token macro property">#<span class="token directive keyword">define</span> HI_SDS_HDR(T,s) ((struct hisdshdr##T *)((s)-(sizeof(struct hisdshdr##T))))</span><span class="token macro property">#<span class="token directive keyword">define</span> HI_SDS_TYPE_5_LEN(f) ((f)>>HI_SDS_TYPE_BITS)</span><span class="token keyword">static</span> <span class="token keyword">inline</span> size_t <span class="token function">hi_sdslen</span><span class="token punctuation">(</span><span class="token keyword">const</span> hisds s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> HI_SDS_TYPE_MASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> HI_SDS_TYPE_5<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token function">HI_SDS_TYPE_5_LEN</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_8<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>len<span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_16<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>len<span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_32<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>len<span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_64<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>len<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> size_t <span class="token function">hi_sdsavail</span><span class="token punctuation">(</span><span class="token keyword">const</span> hisds s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>flags<span class="token operator">&amp;</span>HI_SDS_TYPE_MASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> HI_SDS_TYPE_5<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> HI_SDS_TYPE_8<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">HI_SDS_HDR_VAR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> sh<span class="token operator">-></span>alloc <span class="token operator">-</span> sh<span class="token operator">-></span>len<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> HI_SDS_TYPE_16<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">HI_SDS_HDR_VAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> sh<span class="token operator">-></span>alloc <span class="token operator">-</span> sh<span class="token operator">-></span>len<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> HI_SDS_TYPE_32<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">HI_SDS_HDR_VAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> sh<span class="token operator">-></span>alloc <span class="token operator">-</span> sh<span class="token operator">-></span>len<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> HI_SDS_TYPE_64<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">HI_SDS_HDR_VAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> sh<span class="token operator">-></span>alloc <span class="token operator">-</span> sh<span class="token operator">-></span>len<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">hi_sdssetlen</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> size_t newlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>flags<span class="token operator">&amp;</span>HI_SDS_TYPE_MASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> HI_SDS_TYPE_5<span class="token punctuation">:</span>            <span class="token punctuation">{</span>                <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>HI_SDS_TYPE_5 <span class="token operator">|</span> <span class="token punctuation">(</span>newlen <span class="token operator">&lt;&lt;</span> HI_SDS_TYPE_BITS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_8<span class="token punctuation">:</span>            <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>len <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>newlen<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_16<span class="token punctuation">:</span>            <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>len <span class="token operator">=</span> <span class="token punctuation">(</span>uint16_t<span class="token punctuation">)</span>newlen<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_32<span class="token punctuation">:</span>            <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>len <span class="token operator">=</span> <span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span>newlen<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_64<span class="token punctuation">:</span>            <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>len <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>newlen<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">hi_sdsinclen</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> size_t inc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>flags<span class="token operator">&amp;</span>HI_SDS_TYPE_MASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> HI_SDS_TYPE_5<span class="token punctuation">:</span>            <span class="token punctuation">{</span>                <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">unsigned</span> <span class="token keyword">char</span> newlen <span class="token operator">=</span> <span class="token function">HI_SDS_TYPE_5_LEN</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>inc<span class="token punctuation">;</span>                <span class="token operator">*</span>fp <span class="token operator">=</span> HI_SDS_TYPE_5 <span class="token operator">|</span> <span class="token punctuation">(</span>newlen <span class="token operator">&lt;&lt;</span> HI_SDS_TYPE_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_8<span class="token punctuation">:</span>            <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>len <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>inc<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_16<span class="token punctuation">:</span>            <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>len <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>uint16_t<span class="token punctuation">)</span>inc<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_32<span class="token punctuation">:</span>            <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>len <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span>inc<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_64<span class="token punctuation">:</span>            <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>len <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>inc<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* hi_sdsalloc() = hi_sdsavail() + hi_sdslen() */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> size_t <span class="token function">hi_sdsalloc</span><span class="token punctuation">(</span><span class="token keyword">const</span> hisds s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> HI_SDS_TYPE_MASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> HI_SDS_TYPE_5<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token function">HI_SDS_TYPE_5_LEN</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_8<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>alloc<span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_16<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>alloc<span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_32<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>alloc<span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_64<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>alloc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">hi_sdssetalloc</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> size_t newlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>flags<span class="token operator">&amp;</span>HI_SDS_TYPE_MASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> HI_SDS_TYPE_5<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">/* Nothing to do, this type has no total allocation info. */</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_8<span class="token punctuation">:</span>            <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>alloc <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>newlen<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_16<span class="token punctuation">:</span>            <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>alloc <span class="token operator">=</span> <span class="token punctuation">(</span>uint16_t<span class="token punctuation">)</span>newlen<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_32<span class="token punctuation">:</span>            <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>alloc <span class="token operator">=</span> <span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span>newlen<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> HI_SDS_TYPE_64<span class="token punctuation">:</span>            <span class="token function">HI_SDS_HDR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-></span>alloc <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>newlen<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>hisds <span class="token function">hi_sdsnewlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>init<span class="token punctuation">,</span> size_t initlen<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdsnew</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>init<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdsempty</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdsdup</span><span class="token punctuation">(</span><span class="token keyword">const</span> hisds s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span>  <span class="token function">hi_sdsfree</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdsgrowzero</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdscatlen</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdscat</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdscatsds</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> <span class="token keyword">const</span> hisds t<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdscpylen</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdscpy</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdscatvprintf</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> va_list ap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span>hisds <span class="token function">hi_sdscatprintf</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>hisds <span class="token function">hi_sdscatprintf</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>hisds <span class="token function">hi_sdscatfmt</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdstrim</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">hi_sdsrange</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> ssize_t start<span class="token punctuation">,</span> ssize_t end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">hi_sdsupdatelen</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">hi_sdsclear</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">hi_sdscmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> hisds s1<span class="token punctuation">,</span> <span class="token keyword">const</span> hisds s2<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token operator">*</span><span class="token function">hi_sdssplitlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sep<span class="token punctuation">,</span> <span class="token keyword">int</span> seplen<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">hi_sdsfreesplitres</span><span class="token punctuation">(</span>hisds <span class="token operator">*</span>tokens<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">hi_sdstolower</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">hi_sdstoupper</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdsfromlonglong</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdscatrepr</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token operator">*</span><span class="token function">hi_sdssplitargs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>line<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>argc<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdsmapchars</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> size_t setlen<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdsjoin</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdsjoinsds</span><span class="token punctuation">(</span>hisds <span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sep<span class="token punctuation">,</span> size_t seplen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Low level functions exposed to the user API */</span>hisds <span class="token function">hi_sdsMakeRoomFor</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> size_t addlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">hi_sdsIncrLen</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">,</span> <span class="token keyword">int</span> incr<span class="token punctuation">)</span><span class="token punctuation">;</span>hisds <span class="token function">hi_sdsRemoveFreeSpace</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">)</span><span class="token punctuation">;</span>size_t <span class="token function">hi_sdsAllocSize</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">hi_sdsAllocPtr</span><span class="token punctuation">(</span>hisds s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Export the allocator used by SDS to the program using SDS. * Sometimes the program SDS is linked to, may use a different set of * allocators, but may want to allocate or free things that SDS will * respectively free or allocate. */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">hi_sds_malloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">hi_sds_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">hi_sds_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> REDIS_TEST</span><span class="token keyword">int</span> <span class="token function">hi_sdsTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">/* HIREDIS_SDS_H */</span></code></pre><p>它用<br>sdshdr5、(2^5=32byte)<br>sdshdr8、(2 ^ 8=256byte)<br>sdshdr16、(2 ^ 16=65536byte=64KB)<br>sdshdr32、 (2 ^ 32byte=4GB)<br>sdshdr64，2的64次方byte＝17179869184G</p><p>来存储不同长度的字符串，len表示长度，<strong>这样获取字符串长度就可以在O(1)的情况下</strong>，拿到字符串，而不是像C语言一样去遍历。<br>alloc可以计算字符串未被分配的空间，有了这个值就可以引入预分配空间的算法了，而不用去考虑内存分配的问题。<br>buf 表示字符串数组，真存数据的。</p><img src="/2024/03/18/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%971/1699875249758.png" class="" width="1699875249758"><blockquote><p>小结：</p><p>1.只有整数才会使用int，如果是浮点数，就是用字符串保存。</p><p>2.embstr 与 raw 类型底层的数据结构其实都是 SDS (简单动态字符串，Redis 内部定义     sdshdr5， sdshdr8等等)。存储使用的是 char[]的数组。</p></blockquote><h3 id="Hashes"><a href="#Hashes" class="headerlink" title="Hashes"></a>Hashes</h3><blockquote><p>从定义中可以看出#define OBJ_ENCODING_HT 2      /* Encoded as hash table */</p><p>在Redis中hash被定义为 OBJ_ENCODING_HT，接下来让我们看看hash table在Redis中的具体实现</p></blockquote><p>Hash数据类型也和String有相似之处，<strong>到达了一定的阈值之后就会对数据结构进行升级。</strong></p><p>数据结构：<br>1）hashtable 就是和java当中使用的hashtable一样，是一个<strong>数组+链表的结构</strong>。</p><p>2）ziplist 压缩链表</p><p><strong>单节点的结构体定义：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* We use this function to receive information about a ziplist entry. * Note that this is not how the data is actually encoded, is just what we * get filled by a function in order to operate more easily. */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> zlentry <span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> prevrawlensize<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//上一个节点的长度 </span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> prevrawlen<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//存储上一个链表节点长度所需要的的字节数                  </span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> lensize<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前节点所需要的的字节数               </span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前节点占用的长度                                   </span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> headersize<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//当前节点的头大小   </span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> encoding<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//编码方式            </span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//指向当前节点起始位置   </span><span class="token punctuation">}</span> zlentry<span class="token punctuation">;</span></code></pre><p>为什么有链表了，redis还要整出一个压缩链表？<br>1）<strong>普通的双向链表会有两个前后指针</strong>，在存储数据很小的情况下，<strong>我们存储的实际数据大小可能还没有指针占用的内存大。</strong>而ziplist是一个特殊的双向链表，并没有维护前后指针这两个字段，<strong>而是存储上一个entry的长度和当前entry的长度</strong>，通过长度推算下一个元素在什么地方。牺牲读取的性能，获取高效的空间利用率，因为（简短KV键值对）存储指针比存储entry长度更费内存，这是典型的时间换空间。</p><p>2）<strong>链表是不连续的，遍历比较慢，而ziplist却可以解决这个问题</strong>，ziplist将一些必要的偏移量信息都记录在了每一个节点里，使之能跳到上一个节点或者尾节点节点。</p><p>3）头节点里有头结点同时还有一个参数len，和SDS类型类似，这就是用来记录链表长度的。<strong>因此获取链表长度时不再遍历整个链表</strong>，直接拿到len值就可以了，<strong>获取长度的时间复杂度是O（1）。</strong></p><p><strong>遍历过程：</strong><br>通过指向表尾节点的位置指针zltail,减去节点的previous_entry_length，得到前一个节点的起始地址的指针。如此循环，<strong>从表尾节点遍历到表头节点</strong>。</p><blockquote><p>由于都是一些基本的数据结构，这里就不再探索了。感兴趣可以自行阅读Redis的源码去了解。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础</title>
      <link href="/2024/03/18/Docker/"/>
      <url>/2024/03/18/Docker/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录Docker的一些应用</p></blockquote><h1 id="如何编写Dockerfile文件部署go项目"><a href="#如何编写Dockerfile文件部署go项目" class="headerlink" title="如何编写Dockerfile文件部署go项目"></a>如何编写Dockerfile文件部署go项目</h1><blockquote><p>对于项目而言，我们要将所有项目编排在容器中，一般容器与容器之间的交互可以通过ip，<br>但是比较麻烦，所以，这里推荐使用docker的network，将所有容器都存放在一个网络中，<br>这样子容器之间的通信就相对比较容易。</p></blockquote><span id="more"></span><ol><li>如何创建网络，使用命令</li></ol><pre class=" language-Shell"><code class="language-Shell">docker network create networkName</code></pre><ol start="2"><li>使用docker network connect连接到创建的网络</li></ol><pre class=" language-Shell"><code class="language-Shell">docker network connect networkName dockerName</code></pre><ol start="3"><li>我们可以通过以下命令查看该网络下的连接</li></ol><pre class=" language-Shell"><code class="language-Shell">docker network inspect networkName</code></pre><p>通过网络就可以使用容器命进行通信了</p><blockquote><p>已经将我们要的容器添加至同一network中后，就可以开始编写我们的dockerfile了。</p></blockquote><p>Dockerfile操作指令如下</p><pre class=" language-dockerfile"><code class="language-dockerfile">  指令                                            含义FROM 镜像                            指定新镜像所基于的镜像，第一条指令必须为FROM指令,每创建一个镜像就需要一条FROM指令MAINTAINER 名字                      说明新镜像的维护人信息RUN命令                              在所基于的镜像上执行命令，并提交到新的镜像中CMD [”要运行的程序”，”参数1,"参数2 "]   指令启动容器时要运行的命令或者脚本，Dockerfile只能有一条CMD命令， 如果指定多条则只能最后一条被执行EXPOSE 端口号                         指定新镜像加载到Docker时要开启的端口ENV  环境变量  变量值                  设置一个环境变量的值，会被后面的RUN使用ADD 源文件/目录目标文件/目录            将源文件复制到目标文件，源文件要与Dockerfile位于相同目录中，或者是一个URLCOPY 源文件/目录目标文件/目录           将本地主机上的文件/目录复制到目标地点，源文件/目录要与Dockerfile在相同的目录中VOLUME [“目录"]                      在容器中创建一个挂载点USER 用户名/UID                       指定运行容器时的用户WORKDIR 路径（类似cd）                为后续的RUN、CMD、ENTRYPOINT指定工作自录ONBUILD 命令                         指定所生成的镜像作为一个基础镜像时所要运行的命令HEALTHCHECK                         健康检查</code></pre><p><strong>dockerfilke文件如下</strong></p><pre class=" language-dockerfile"><code class="language-dockerfile">FROM golang:1.21 as builderWORKDIR /AppCOPY . .RUN go env -w GO111MODULE=on \    && go env -w GOPROXY=https://goproxy.cn,direct \    && go env -w CGO_ENABLED=0 \    && go env \    && go mod tidy \    && go build -o server .FROM alpine:latestLABEL MAINTAINER="2493381254@qq.com"WORKDIR /AppCOPY --from=0 /App ./COPY --from=0 /App/config.docker.yaml ./EXPOSE 8888ENTRYPOINT ./server -c config.docker.yaml</code></pre><blockquote><p>使用dockerfile文件构建我们的镜像</p></blockquote><p>命令：</p><pre class=" language-powershell"><code class="language-powershell">docker build <span class="token operator">-</span>t qpp<span class="token operator">-</span>demo <span class="token operator">-</span>f <span class="token punctuation">.</span><span class="token operator">/</span>Dockerfile <span class="token punctuation">.</span><span class="token operator">/</span></code></pre><p>-t 指定镜像的名称，如果要指定版本，采用 image:tag 的写法。</p><p>-f 指定Dockerfile文件，默认当前文件夹下的Dockerfile。</p><p>启动镜像</p><pre class=" language-powershell"><code class="language-powershell">docker run <span class="token operator">-</span>d <span class="token operator">--</span>net=app<span class="token operator">-</span>demo<span class="token operator">-</span>net <span class="token operator">-</span>p 8888:8888 <span class="token operator">--</span>name my<span class="token operator">-</span>app<span class="token operator">-</span>docker app<span class="token operator">-</span>demo</code></pre><p>donfig.docker.yaml配置文件如下</p><pre class=" language-yam"><code class="language-yam"># zap logger 的配置zap:  level: info  format: console  prefix: "[Chinese_Learning_App]"  director: log  show-line: true  encode-level: LowercaseColorLevelEncoder  stacktrace-key: stacktrace  log-in-console: true# redis configuration#redis:#  db: 0#  addr: 127.0.0.1:6379#  password: ""# system configurationsystem:  env: public # Change to "develop" to skip authentication for development mode  addr: 8888  db-type: mysql  oss-type: local # 控制oss选择走本地还是 七牛等其他仓 自行增加其他oss仓可以在 server/utils/upload/upload.go 中 NewOss函数配置  use-redis: false # 使用redis  use-multipoint: false  # IP限制次数 一个小时15000次  iplimit-count: 15000  #  IP限制一个小时  iplimit-time: 3600  #  路由全局前缀  router-prefix: ""# mysql connect configuration# 未初始化之前请勿手动修改数据库信息！！！如果一定要手动初始化请看（https://gin-vue-admin.com/docs/first_master）mysql:  path: docker_mysql  port: "3306"  config: "charset=utf8mb4&parseTime=True&loc=Local"  db-name: "Chinese_Learning_DB"  username: "root"  password: "123456"  max-idle-conns: 10  max-open-conns: 100  log-mode: ""  log-zap: false# MinIo的配置minio:  endpoint: my_minio:9001           # minio 的url  accessKey: minio                              # userName  secretKey: minio@123456                       # password  bucketName: "test"  region: us-east-1  useSSL: false</code></pre><h1 id="docker-compose的使用"><a href="#docker-compose的使用" class="headerlink" title="docker compose的使用"></a>docker compose的使用</h1>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter</title>
      <link href="/2024/03/18/Flutter/"/>
      <url>/2024/03/18/Flutter/</url>
      
        <content type="html"><![CDATA[<h1 id="flutter"><a href="#flutter" class="headerlink" title="flutter"></a>flutter</h1><h2 id="网络框架dio-v5-3-3"><a href="#网络框架dio-v5-3-3" class="headerlink" title="网络框架dio v5.3.3"></a>网络框架dio v5.3.3</h2><blockquote><p>dio 是一个强大的 HTTP 网络请求库，支持全局配置、Restful API、FormData、拦截器、 请求取消、Cookie 管理、文件上传/下载、超时、自定义适配器、转换器等。</p></blockquote><span id="more"></span><h3 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h3><p>添加依赖</p><pre class=" language-powershell"><code class="language-powershell">flutter pub add dio</code></pre><p>使用</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:dio/dio.dart'</span><span class="token punctuation">;</span><span class="token keyword">final</span> dio <span class="token operator">=</span> <span class="token function">Dio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">getHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://dart.dev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>GET请求</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:dio/dio.dart'</span><span class="token punctuation">;</span><span class="token keyword">final</span> dio <span class="token operator">=</span> <span class="token function">Dio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  Response response<span class="token punctuation">;</span>  response <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/test?id=12&amp;name=dio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The below request is the same as above.</span>  response <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>    <span class="token string">'/test'</span><span class="token punctuation">,</span>    queryParameters<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'dio'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>POST请求</strong></p><pre class=" language-dart"><code class="language-dart">response <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/test'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'dio'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>发起多个并发的请求</strong></p><pre class=" language-dart"><code class="language-dart">response <span class="token operator">=</span> <span class="token keyword">await</span> Future<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">[</span>dio<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/info'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/token'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>下载文件</strong></p><pre class=" language-dart"><code class="language-dart">response <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>  <span class="token string">'https://www.google.com/'</span><span class="token punctuation">,</span>  <span class="token string">'${(await getTemporaryDirectory()).path}google.html'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>以流的方式接收响应数据：</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> rs <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>  url<span class="token punctuation">,</span>  options<span class="token punctuation">:</span> <span class="token function">Options</span><span class="token punctuation">(</span>responseType<span class="token punctuation">:</span> ResponseType<span class="token punctuation">.</span>stream<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置接收类型为 `stream`</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>data<span class="token punctuation">.</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 响应流</span></code></pre><p><strong>以二进制数组的方式接收响应数据：</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> rs <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>  url<span class="token punctuation">,</span>  options<span class="token punctuation">:</span> <span class="token function">Options</span><span class="token punctuation">(</span>responseType<span class="token punctuation">:</span> ResponseType<span class="token punctuation">.</span>bytes<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置接收类型为 `bytes`</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 类型: List&lt;int></span></code></pre><p><strong>发送 <code>FormData</code>:</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> formData <span class="token operator">=</span> FormData<span class="token punctuation">.</span><span class="token function">fromMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'dio'</span><span class="token punctuation">,</span>  <span class="token string">'date'</span><span class="token punctuation">:</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toIso8601String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/info'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> formData<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>通过 <code>FormData</code> 上传多个文件:</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> formData <span class="token operator">=</span> FormData<span class="token punctuation">.</span><span class="token function">fromMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'dio'</span><span class="token punctuation">,</span>  <span class="token string">'date'</span><span class="token punctuation">:</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toIso8601String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token keyword">await</span> MultipartFile<span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span><span class="token string">'./text.txt'</span><span class="token punctuation">,</span> filename<span class="token punctuation">:</span> <span class="token string">'upload.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">'files'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">await</span> MultipartFile<span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span><span class="token string">'./text1.txt'</span><span class="token punctuation">,</span> filename<span class="token punctuation">:</span> <span class="token string">'text1.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">await</span> MultipartFile<span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span><span class="token string">'./text2.txt'</span><span class="token punctuation">,</span> filename<span class="token punctuation">:</span> <span class="token string">'text2.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/info'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> formData<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>监听发送（上传）数据进度:</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>  <span class="token string">'https://www.dtworkroom.com/doris/1/2.0.0/test'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'aa'</span><span class="token punctuation">:</span> <span class="token string">'bb'</span> <span class="token operator">*</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  onSendProgress<span class="token punctuation">:</span> <span class="token punctuation">(</span>int sent<span class="token punctuation">,</span> int total<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'$sent $total'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>以流的形式提交二进制数据：</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// Binary data</span><span class="token keyword">final</span> postData <span class="token operator">=</span> <span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>  url<span class="token punctuation">,</span>  data<span class="token punctuation">:</span> Stream<span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>postData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 构建 Stream&lt;List&lt;int>></span>  options<span class="token punctuation">:</span> <span class="token function">Options</span><span class="token punctuation">(</span>    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>      Headers<span class="token punctuation">.</span>contentLengthHeader<span class="token punctuation">:</span> postData<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置 content-length.</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Dio-APIs"><a href="#Dio-APIs" class="headerlink" title="Dio APIs"></a>Dio APIs</h3><h4 id="创建一个Dio实例并配置它"><a href="#创建一个Dio实例并配置它" class="headerlink" title="创建一个Dio实例并配置它"></a>创建一个Dio实例并配置它</h4><blockquote><p>建议在项目中使用Dio单例，这样便可对同一个dio实例发起的所有请求进行一些统一的配置， 比如设置公共header、请求基地址、超时时间等。 这里有一个在<a href="https://github.com/cfug/dio/blob/main/example_flutter_app">Flutter工程中使用Dio单例</a> （定义为top level变量）的示例供开发者参考。</p></blockquote><p>你可以使用默认配置或传递一个可选 <code>BaseOptions</code>参数来创建一个Dio实例 :</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> dio <span class="token operator">=</span> <span class="token function">Dio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// With default `Options`.</span><span class="token keyword">void</span> <span class="token function">configureDio</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Update default configs.</span>  dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>baseUrl <span class="token operator">=</span> <span class="token string">'https://api.pub.dev'</span><span class="token punctuation">;</span>  dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>connectTimeout <span class="token operator">=</span> <span class="token function">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>receiveTimeout <span class="token operator">=</span> <span class="token function">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Or create `Dio` with a `BaseOptions` instance.</span>  <span class="token keyword">final</span> options <span class="token operator">=</span> <span class="token function">BaseOptions</span><span class="token punctuation">(</span>    baseUrl<span class="token punctuation">:</span> <span class="token string">'https://api.pub.dev'</span><span class="token punctuation">,</span>    connectTimeout<span class="token punctuation">:</span> <span class="token function">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    receiveTimeout<span class="token punctuation">:</span> <span class="token function">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> anotherDio <span class="token operator">=</span> <span class="token function">Dio</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Dio 的核心 API 是：</p><pre class=" language-dart"><code class="language-dart">Future<span class="token operator">&lt;</span>Response<span class="token operator">&lt;</span>T<span class="token operator">>></span> request<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>  String path<span class="token punctuation">,</span> <span class="token punctuation">{</span>  Object<span class="token operator">?</span> data<span class="token punctuation">,</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">></span><span class="token operator">?</span> queryParameters<span class="token punctuation">,</span>  CancelToken<span class="token operator">?</span> cancelToken<span class="token punctuation">,</span>  Options<span class="token operator">?</span> options<span class="token punctuation">,</span>  ProgressCallback<span class="token operator">?</span> onSendProgress<span class="token punctuation">,</span>  ProgressCallback<span class="token operator">?</span> onReceiveProgress<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>  <span class="token string">'/test'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'dio'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  options<span class="token punctuation">:</span> <span class="token function">Options</span><span class="token punctuation">(</span>method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a>请求配置</h4><p><code>BaseOptions</code> 描述的是 Dio 实例发起网络请求的的公共配置， 而 <code>Options</code> 描述了每一个Http请求的配置信息，每一次请求都可以单独配置， 单次请求的 <code>Options</code> 中的配置信息可以覆盖 <code>BaseOptions</code> 中的配置。 下面是 <code>Options</code> 的配置项：</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// 请求方式。</span>String method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 请求基本地址，可以包含路径例如 https://dart.dev/api/。</span>String<span class="token operator">?</span> baseUrl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// HTTP 请求头。</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">></span><span class="token operator">?</span> headers<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 连接服务器超时时间.</span>Duration<span class="token operator">?</span> connectTimeout<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 两次数据流数据接收的最长间隔时间，注意不是请求的最长接收时间。</span>Duration<span class="token operator">?</span> receiveTimeout<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 请求内容体，可以是任意类型。</span><span class="token keyword">dynamic</span> data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 请求路径，如果以 http(s)开始, 则 [baseURL] 会被忽略，</span><span class="token comment" spellcheck="true">/// 否则将会和 [baseUrl] 拼接出完整的地址。</span>String path <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 请求的 Content-Type。</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// 默认值会由 [ImplyContentTypeInterceptor] 根据请求载荷类型进行推导。</span><span class="token comment" spellcheck="true">/// 可以调用 [Interceptors.removeImplyContentTypeInterceptor] 进行移除。</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// 如果你想以 `application/x-www-form-urlencoded` 格式编码请求数据,</span><span class="token comment" spellcheck="true">/// 可以设置此选项为 `Headers.formUrlEncodedContentType`,</span><span class="token comment" spellcheck="true">/// [Dio] 会自动编码请求体。</span>String<span class="token operator">?</span> contentType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 期望以哪种格式（方式）接受响应数据，包括 `json`、`stream` 和 `plain`。</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// 默认值是 `json`, 当响应头中 content-type 为 `application/json` 时，</span><span class="token comment" spellcheck="true">/// dio 会自动将响应内容转化为 json 对象。</span><span class="token comment" spellcheck="true">/// 如果想以二进制方式接受响应数据，如下载一个二进制文件，那么可以使用 `stream`。</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// 如果想以文本（字符串）格式接收响应数据，请使用 `plain`。</span>ResponseType<span class="token operator">?</span> responseType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// `validateStatus` 决定 HTTP 响应状态码是否被视为请求成功，</span><span class="token comment" spellcheck="true">/// 返回 `true` 请求结果就会按成功处理，否则会按失败处理.</span>ValidateStatus<span class="token operator">?</span> validateStatus<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 用户自定义字段，可以在 [Interceptor]、[Transformer] 和 [Response] 中依次传递。</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">></span><span class="token operator">?</span> extra<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 请求地址的参数。</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> <span class="token comment" spellcheck="true">/*String|Iterable&lt;String>*/</span> <span class="token operator">></span><span class="token operator">?</span> queryParameters<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 请求数据中数组的编码的方式，默认值为 `multiCompatible`。</span>ListFormat<span class="token operator">?</span> listFormat<span class="token punctuation">;</span></code></pre><h4 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h4><p>当请求成功时会返回一个Response对象，它包含如下字段：</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// 响应数据。可能已经被转换了类型, 详情请参考 [ResponseType]。</span>T<span class="token operator">?</span> data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 响应对应的请求配置。</span>RequestOptions requestOptions<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 响应的 HTTP 状态码。</span>int<span class="token operator">?</span> statusCode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 响应对应状态码的详情信息。</span>String<span class="token operator">?</span> statusMessage<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 响应是否被重定向</span>bool isRedirect<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 请求连接经过的重定向列表。如果请求未经过重定向，则列表为空。</span>List<span class="token operator">&lt;</span>RedirectRecord<span class="token operator">></span> redirects<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 在 [RequestOptions] 中构造的自定义字段。</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">></span> extra<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 响应对应的头数据。</span>Headers headers<span class="token punctuation">;</span></code></pre><p>请求成功后，你可以访问到下列字段：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://pub.dev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>requestOptions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意，<code>Response.extra</code> 与 <code>RequestOptions.extra</code> 是不同的实例，互相之间无关。</p><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>每个 Dio 实例都可以添加任意多个拦截器，他们会组成一个队列，拦截器队列的执行顺序是先进先出。 通过使用拦截器，你可以在请求之前、响应之后和发生异常时（未被 <code>then</code> 或 <code>catchError</code> 处理） 做一些统一的预处理操作。</p><pre class=" language-dart"><code class="language-dart">dio<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>  <span class="token function">InterceptorsWrapper</span><span class="token punctuation">(</span>    onRequest<span class="token punctuation">:</span> <span class="token punctuation">(</span>RequestOptions options<span class="token punctuation">,</span> RequestInterceptorHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果你想完成请求并返回一些自定义数据，你可以使用 `handler.resolve(response)`。</span>      <span class="token comment" spellcheck="true">// 如果你想终止请求并触发一个错误，你可以使用 `handler.reject(error)`。</span>      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    onResponse<span class="token punctuation">:</span> <span class="token punctuation">(</span>Response response<span class="token punctuation">,</span> ResponseInterceptorHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果你想终止请求并触发一个错误，你可以使用 `handler.reject(error)`。</span>      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    onError<span class="token punctuation">:</span> <span class="token punctuation">(</span>DioException e<span class="token punctuation">,</span> ErrorInterceptorHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果你想完成请求并返回一些自定义数据，你可以使用 `handler.resolve(response)`。</span>      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一个简单的自定义拦截器示例:</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:dio/dio.dart'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CustomInterceptors</span> <span class="token keyword">extends</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">onRequest</span><span class="token punctuation">(</span>RequestOptions options<span class="token punctuation">,</span> RequestInterceptorHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'REQUEST[${options.method}] => PATH: ${options.path}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRequest</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Response response<span class="token punctuation">,</span> ResponseInterceptorHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'RESPONSE[${response.statusCode}] => PATH: ${response.requestOptions.path}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Future <span class="token function">onError</span><span class="token punctuation">(</span>DioException err<span class="token punctuation">,</span> ErrorInterceptorHandler handler<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'ERROR[${err.response?.statusCode}] => PATH: ${err.requestOptions.path}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="完成和终止请求-响应"><a href="#完成和终止请求-响应" class="headerlink" title="完成和终止请求/响应"></a>完成和终止请求/响应</h4><p>在所有拦截器中，你都可以改变请求执行流， 如果你想完成请求/响应并返回自定义数据，你可以 resolve 一个 <code>Response</code> 对象 或返回 <code>handler.resolve(data)</code> 的结果。 如果你想终止（触发一个错误，上层 <code>catchError</code> 会被调用）一个请求/响应， 那么可以 reject 一个<code>DioException</code> 对象或返回 <code>handler.reject(errMsg)</code> 的结果。</p><pre class=" language-dart"><code class="language-dart">dio<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>  <span class="token function">InterceptorsWrapper</span><span class="token punctuation">(</span>    onRequest<span class="token punctuation">:</span> <span class="token punctuation">(</span>options<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>        <span class="token function">Response</span><span class="token punctuation">(</span>requestOptions<span class="token punctuation">:</span> options<span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token string">'fake data'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'fake data'</span></code></pre><p>如果同时发起多个网络请求，则它们是可以同时进入<code>Interceptor</code> 的（并行的）， 而 <code>QueuedInterceptor</code> 提供了一种串行机制： 它可以保证请求进入拦截器时是串行的（前面的执行完后后面的才会进入拦截器）。</p><p>假设这么一个场景：出于安全原因，我们需要给所有的请求头中添加一个 <code>csrfToken</code>， 如果 <code>csrfToken</code> 不存在，我们先去请求 <code>csrfToken</code>，获取到 <code>csrfToken</code> 后再重试。 假设刚开始的时候 <code>csrfToken</code> 为 null，如果允许请求并发，则这些并发请求并行进入拦截器时 <code>csrfToken</code> 都为 null，所以它们都需要去请求 <code>csrfToken</code>，这会导致 <code>csrfToken</code> 被请求多次。 为了避免不必要的重复请求，可以使用 <code>QueuedInterceptor</code>， 这样只需要第一个请求处理一次即可。</p><p>完整的示例代码请点击 <a href="https://github.com/cfug/dio/blob/main/example/lib/queued_interceptor_crsftoken.dart">这里</a>.</p><h4 id="日志拦截器"><a href="#日志拦截器" class="headerlink" title="日志拦截器"></a>日志拦截器</h4><p>我们可以添加 <code>LogInterceptor</code> 拦截器来自动打印请求和响应等日志：</p><p><strong>注意：</strong> <code>LogInterceptor</code> 应该保持最后一个被添加到拦截器中， 否则在它之后进行处理的拦截器修改的内容将无法体现。</p><h4 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h4><pre class=" language-dart"><code class="language-dart">dio<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">LogInterceptor</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不输出响应内容体</span></code></pre><p><strong>注意：</strong> 默认的 <code>logPrint</code> 只会在 DEBUG 模式（启用了断言） 的情况下输出日志。</p><p>你也可以使用 <code>dart:developer</code> 中的 <code>log</code> 来输出日志（在 Flutter 中也可以使用）。</p><h4 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h4><p>在 Flutter 中你应该使用 <code>debugPrint</code> 来打印日志。</p><p>这样也会让调试日志能够通过 <code>flutter logs</code> 获取到。</p><p><strong>注意：</strong> <code>debugPrint</code> 的意义 <strong>不是只在 DEBUG 模式下打印</strong>， 而是对输出内容进行节流，从而保证输出完整。 请不要在生产模式使用，除非你有意输出相关日志。</p><pre class=" language-dart"><code class="language-dart">dio<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>  <span class="token function">LogInterceptor</span><span class="token punctuation">(</span>    logPrint<span class="token punctuation">:</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">debugPrint</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h4><p>开发者可以通过继承 <code>Interceptor/QueuedInterceptor</code> 类来实现自定义拦截器。 这是一个简单的 <a href="https://github.com/cfug/dio/blob/main/example/lib/custom_cache_interceptor.dart">缓存拦截器</a>。</p><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>当请求过程中发生错误时, Dio 会将 <code>Error/Exception</code> 包装成一个 <code>DioException</code>:</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 404</span>  <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://api.pub.dev/not-exist'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> on DioException <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// The request was made and the server responded with a status code</span>  <span class="token comment" spellcheck="true">// that falls out of the range of 2xx and is also not 304.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>response <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>response<span class="token punctuation">.</span>requestOptions<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Something happened in setting up or sending the request that triggered an Error</span>    <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>requestOptions<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="DioException"><a href="#DioException" class="headerlink" title="DioException"></a>DioException</h4><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// 错误的请求对应的配置。</span>RequestOptions requestOptions<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 错误的请求对应的响应内容。如果请求未完成，响应内容可能为空。</span>Response<span class="token operator">?</span> response<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 错误的类型。</span>DioExceptionType type<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 实际错误的内容。</span>Object<span class="token operator">?</span> error<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 实际错误的堆栈。</span>StackTrace<span class="token operator">?</span> stackTrace<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 错误信息。</span>String<span class="token operator">?</span> message<span class="token punctuation">;</span></code></pre><h4 id="使用-application-x-www-form-urlencoded-编码"><a href="#使用-application-x-www-form-urlencoded-编码" class="headerlink" title="使用 application/x-www-form-urlencoded 编码"></a>使用 application/x-www-form-urlencoded 编码</h4><p>默认情况下, Dio 会将请求数据（除了 <code>String</code> 类型）序列化为 JSON。 如果想要以 <code>application/x-www-form-urlencoded</code> 格式编码, 你可以设置 <code>contentType</code> :</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// Instance level</span>dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>contentType <span class="token operator">=</span> Headers<span class="token punctuation">.</span>formUrlEncodedContentType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// or only works once</span>dio<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>  <span class="token string">'/info'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  options<span class="token punctuation">:</span> <span class="token function">Options</span><span class="token punctuation">(</span>contentType<span class="token punctuation">:</span> Headers<span class="token punctuation">.</span>formUrlEncodedContentType<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="发送-FormData"><a href="#发送-FormData" class="headerlink" title="发送 FormData"></a><a href="https://github.com/cfug/dio/blob/main/dio/README-ZH.md#%E5%8F%91%E9%80%81-formdata">发送 FormData</a></h4><p>Dio 支持发送 <code>FormData</code>, 请求数据将会以 <code>multipart/form-data</code> 方式编码, <code>FormData</code> 中可以包含一个或多个文件。</p><pre><code>final formData = FormData.fromMap({  'name': 'dio',  'date': DateTime.now().toIso8601String(),  'file': await MultipartFile.fromFile('./text.txt',filename: 'upload.txt')});final response = await dio.post('/info', data: formData);</code></pre><blockquote><p>通常情况下只有 POST 方法支持发送 FormData。</p></blockquote><p>这里有一个完整的 <a href="https://github.com/cfug/dio/blob/main/example/lib/formdata.dart">示例</a>。</p><h4 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a><a href="https://github.com/cfug/dio/blob/main/dio/README-ZH.md#%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0">多文件上传</a></h4><p>多文件上传时，通过给 key 加中括号 <code>[]</code> 方式作为文件数组的标记，大多数后台也会通过 <code>key[]</code> 来读取多个文件。 然而 RFC 标准中并没有规定多文件上传必须要使用 <code>[]</code>，关键在于后台与客户端之间保持一致。</p><pre><code>final formData = FormData.fromMap({  'files': [    MultipartFile.fromFileSync('path/to/upload1.txt', filename: 'upload1.txt'),    MultipartFile.fromFileSync('path/to/upload2.txt', filename: 'upload2.txt'),  ],});</code></pre><p>最终编码时会 key 会为 <code>files[]</code>， **如果不想添加 []**，可以通过 <code>Formdata</code> 的 <code>files</code> 来构建：</p><pre><code>final formData = FormData();formData.files.addAll([  MapEntry(   'files',    MultipartFile.fromFileSync('./example/upload.txt',filename: 'upload.txt'),  ),  MapEntry(    'files',    MultipartFile.fromFileSync('./example/upload.txt',filename: 'upload.txt'),  ),]);</code></pre><h4 id="复用-FormData-和-MultipartFile"><a href="#复用-FormData-和-MultipartFile" class="headerlink" title="复用 FormData 和 MultipartFile"></a>复用 <code>FormData</code> 和 <code>MultipartFile</code></h4><p>如果你在重复调用的请求中使用 <code>FormData</code> 或者 <code>MultipartFile</code>，确保你每次使用的都是新实例。 常见的错误做法是将 <code>FormData</code> 赋值给一个共享变量，在每次请求中都使用这个变量。 这样的操作会加大 <strong>无法序列化</strong> 的错误出现的可能性。 你可以像以下的代码一样编写你的请求以避免出现这样的错误：</p><pre><code>Future&lt;void&gt; _repeatedlyRequest() async {  Future&lt;FormData&gt; createFormData() async {    return FormData.fromMap({      'name': 'dio',      'date': DateTime.now().toIso8601String(),      'file': await MultipartFile.fromFile('./text.txt',filename: 'upload.txt'),    });  }    await dio.post('some-url', data: await createFormData());}</code></pre><h4 id="转换器"><a href="#转换器" class="headerlink" title="转换器"></a>转换器</h4><p>转换器 <code>Transformer</code> 用于对请求数据和响应数据进行编解码处理。 Dio 实现了一个默认转换器 <code>DefaultTransformer</code>。 如果你想对请求和响应数据进行自定义编解码处理，可以提供自定义转换器并通过 <code>dio.transformer</code> 设置。</p><blockquote><p><code>Transformer.transformRequest</code> 只在 <code>PUT</code>/<code>POST</code>/<code>PATCH</code> 方法中生效， 只有这些方法可以使用请求内容体 (request body)。 但是 <code>Transformer.transformResponse</code> 可以用于所有请求方法的返回数据。</p></blockquote><h4 id="在-Flutter-中进行设置"><a href="#在-Flutter-中进行设置" class="headerlink" title="在 Flutter 中进行设置"></a>在 Flutter 中进行设置</h4><p>如果你在开发 Flutter 应用，强烈建议通过 <code>compute</code> 在单独的 isolate 中进行 JSON 解码， 从而避免在解析复杂 JSON 时导致的 UI 卡顿。</p><pre><code>/// Map&lt;String, dynamic&gt; _parseAndDecode(String response) {  return jsonDecode(response) as Map&lt;String, dynamic&gt;;}Future&lt;Map&lt;String, dynamic&gt;&gt; parseJson(String text) {  return compute(_parseAndDecode, text);}void main() {  // 自定义 `jsonDecodeCallback`  dio.transformer = DefaultTransformer()..jsonDecodeCallback = parseJson;  runApp(MyApp());}</code></pre><h4 id="其它示例"><a href="#其它示例" class="headerlink" title="其它示例"></a>其它示例</h4><p>这里有一个 <a href="https://github.com/cfug/dio/blob/main/example/lib/transformer.dart">自定义 Transformer 的示例</a>。</p><h4 id="HttpClientAdapter"><a href="#HttpClientAdapter" class="headerlink" title="HttpClientAdapter"></a>HttpClientAdapter</h4><p><code>HttpClientAdapter</code> 是 <code>Dio</code> 和 <code>HttpClient</code> 之间的桥梁。</p><p><code>Dio</code> 实现了一套标准且强大的 API，而 <code>HttpClient</code> 则是真正发起 HTTP 请求的对象。</p><p>我们通过 <code>HttpClientAdapter</code> 将 <code>Dio</code> 和 <code>HttpClient</code> 解耦， 这样一来便可以自由定制 HTTP 请求的底层实现。 Dio 使用 <code>IOHttpClientAdapter</code> 作为原生平台默认的桥梁， <code>BrowserClientAdapter</code> 作为 Web 平台的桥梁。 你可以通过 <code>HttpClientAdapter()</code> 来根据平台创建它们。</p><pre><code>dio.httpClientAdapter = HttpClientAdapter();</code></pre><p>如果你需要单独使用对应平台的适配器：</p><ul><li><p>对于 Web 平台</p><pre><code>import 'package:dio/browser.dart';// ...dio.httpClientAdapter = BrowserClientAdapter();</code></pre></li><li><p>对于原生平台：</p><pre><code>import 'package:dio/io.dart';// ...dio.httpClientAdapter = IOClientAdapter();</code></pre></li></ul><p><a href="https://github.com/cfug/dio/blob/main/example/lib/adapter.dart">示例</a> 中包含了一个简单的自定义桥接。</p><h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a><a href="https://github.com/cfug/dio/blob/main/dio/README-ZH.md#%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86">设置代理</a></h4><p><code>IOHttpClientAdapter</code> 提供了一个 <code>createHttpClient</code> 回调来设置底层 <code>HttpClient</code> 的代理：</p><pre><code>import 'package:dio/io.dart';void initAdapter() {  dio.httpClientAdapter = IOHttpClientAdapter(    createHttpClient: () {      final client = HttpClient();      client.findProxy = (uri) {        // 将请求代理至 localhost:8888。        // 请注意，代理会在你正在运行应用的设备上生效，而不是在宿主平台生效。        return 'PROXY localhost:8888';      };      return client;    },  );}</code></pre><p>完整的示例请查看 <a href="https://github.com/cfug/dio/blob/main/example/lib/proxy.dart">这里</a>。</p><p>Web 平台不支持设置代理。</p><h4 id="HTTPS-证书校验"><a href="#HTTPS-证书校验" class="headerlink" title="HTTPS 证书校验"></a><a href="https://github.com/cfug/dio/blob/main/dio/README-ZH.md#https-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C">HTTPS 证书校验</a></h4><p>HTTPS 证书验证（或公钥固定）是指确保端侧与服务器的 TLS 连接的证书是期望的证书，从而减少中间人攻击的机会。 <a href="https://owasp.org/www-community/controls/Certificate_and_Public_Key_Pinning">OWASP</a> 中解释了该理论。</p><p><strong>服务器响应证书</strong></p><p>与其他方法不同，此方法使用服务器本身的证书。</p><pre><code>void initAdapter() {  const String fingerprint = 'ee5ce1dfa7a53657c545c62b65802e4272878dabd65c0aadcf85783ebb0b4d5c';  dio.httpClientAdapter = IOHttpClientAdapter(    createHttpClient: () {      // Don't trust any certificate just because their root cert is trusted.      final HttpClient client = HttpClient(context: SecurityContext(withTrustedRoots: false));      // You can test the intermediate / root cert here. We just ignore it.      client.badCertificateCallback = (cert, host, port) =&gt; true;      return client;    },    validateCertificate: (cert, host, port) {      // Check that the cert fingerprint matches the one we expect.      // We definitely require _some_ certificate.      if (cert == null) {        return false;      }      // Validate it any way you want. Here we only check that      // the fingerprint matches the OpenSSL SHA256.      return fingerprint == sha256.convert(cert.der).toString();    },  );}</code></pre><p>你可以使用 OpenSSL 读取密钥的 SHA-256：</p><pre><code>openssl s_client -servername pinning-test.badssl.com -connect pinning-test.badssl.com:443 &lt; /dev/null 2&gt;/dev/null \  | openssl x509 -noout -fingerprint -sha256#### SHA256 Fingerprint=EE:5C:E1:DF:A7:A5:36:57:C5:45:C6:2B:65:80:2E:42:72:87:8D:AB:D6:5C:0A:AD:CF:85:78:3E:BB:0B:4D:5C# (remove the formatting, keep only lower case hex characters to match the `sha256` above)</code></pre><p><strong>证书颁发机构验证</strong></p><p>当您的服务器具有自签名证书时，可以用下面的方法，但它们不适用于 AWS 或 Let’s Encrypt 等第三方颁发的证书。</p><p>有两种方法可以校验证书，假设我们的后台服务使用的是自签名证书，证书格式是 PEM 格式，我们将证书的内容保存在本地字符串中， 那么我们的校验逻辑如下：</p><pre><code>void initAdapter() {  String PEM = 'XXXXX'; // root certificate content  dio.httpClientAdapter = IOHttpClientAdapter(    createHttpClient: () {      final client = HttpClient();      client.badCertificateCallback = (X509Certificate cert, String host, int port) {        return cert.pem == PEM; // Verify the certificate.      };      return client;    },  );}</code></pre><p>对于自签名的证书，我们也可以将其添加到本地证书信任链中， 这样证书验证时就会自动通过，而不会再走到 <code>badCertificateCallback</code> 回调中：</p><pre><code>void initAdapter() {  String PEM = 'XXXXX'; // root certificate content  dio.httpClientAdapter = IOHttpClientAdapter(    onHttpClientCreate: (_) {      final SecurityContext sc = SecurityContext();      sc.setTrustedCertificates(File(pathToTheCertificate));      final HttpClient client = HttpClient(context: sc);      return client;    },  );}</code></pre><p>注意，通过 <code>setTrustedCertificates()</code> 设置的证书格式必须为 PEM 或 PKCS12， 如果证书格式为 PKCS12，则需将证书密码传入， 这样则会在代码中暴露证书密码，所以客户端证书校验不建议使用 PKCS12 格式的证书。</p><h4 id="HTTP-2-支持"><a href="#HTTP-2-支持" class="headerlink" title="HTTP/2 支持"></a><a href="https://github.com/cfug/dio/blob/main/dio/README-ZH.md#http2-%E6%94%AF%E6%8C%81">HTTP/2 支持</a></h4><p><a href="https://github.com/cfug/dio/blob/main/plugins/http2_adapter">dio_http2_adapter</a> 提供了一个支持 HTTP/2 的桥接 。</p><h4 id="请求取消"><a href="#请求取消" class="headerlink" title="请求取消"></a>请求取消</h4><p>你可以通过 <code>CancelToken</code> 来取消发起的请求。 一个 <code>CancelToken</code> 可以给多个请求共用， 在共用时调用 <code>cancel()</code> 会取消对应的所有请求：</p><pre><code>final cancelToken = CancelToken();dio.get(url, cancelToken: cancelToken).catchError((DioException err) {  if (CancelToken.isCancel(err)) {    print('Request canceled: ${err.message}');  } else {    // handle error.  }});// Cancel the requests with "cancelled" message.token.cancel('cancelled');</code></pre><p>完整的示例请参考 <a href="https://github.com/cfug/dio/blob/main/example/lib/cancel_request.dart">取消示例</a>.</p><h4 id="继承-Dio-class"><a href="#继承-Dio-class" class="headerlink" title="继承 Dio class"></a>继承 Dio class</h4><p><code>Dio</code> 是一个拥有工厂构造函数的接口类，因此不能直接继承 <code>Dio</code>， 但是可以继承 <code>DioForNative</code> 或 <code>DioForBrowser</code>：</p><pre><code>import 'package:dio/dio.dart';import 'package:dio/io.dart';// 在浏览器中，导入 'package:dio/browser.dart'。class Http extends DioForNative {  Http([BaseOptions options]) : super(options) {    // 构造函数执行  }}</code></pre><p>我们也可以直接实现 <code>Dio</code> 接口类 :</p><pre><code>class MyDio with DioMixin implements Dio {  // ...}</code></pre><h4 id="Web-平台跨域资源共享-CORS"><a href="#Web-平台跨域资源共享-CORS" class="headerlink" title="Web 平台跨域资源共享 (CORS)"></a>Web 平台跨域资源共享 (CORS)</h4><p>在 Web 平台上发送网络请求时，如果请求不是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82">简单请求</a>， 浏览器会自动向服务器发送 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Preflight_request">CORS 预检</a> (Pre-flight requests)， 用于检查服务器是否支持跨域资源共享。</p><p>你可以参考简单请求的定义修改你的请求，或者为你的服务加上 CORS 中间件进行跨域处理。</p>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录我的面试经历</title>
      <link href="/2024/03/18/Go%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/03/18/Go%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录自己的面试过程！！！</p></blockquote><span id="more"></span><h1 id="3月6号，腾讯一面（寄）"><a href="#3月6号，腾讯一面（寄）" class="headerlink" title="3月6号，腾讯一面（寄）"></a>3月6号，腾讯一面（寄）</h1><h2 id="1-使用过分布式锁吗？怎么实现的？"><a href="#1-使用过分布式锁吗？怎么实现的？" class="headerlink" title="1.使用过分布式锁吗？怎么实现的？"></a>1.使用过分布式锁吗？怎么实现的？</h2><p>goredisson</p><p>redis的set nx</p><h2 id="2-分布式锁的使用场景"><a href="#2-分布式锁的使用场景" class="headerlink" title="2.分布式锁的使用场景"></a>2.分布式锁的使用场景</h2><p>对共享资源的保护。</p><h2 id="3-介绍一下子redis集群"><a href="#3-介绍一下子redis集群" class="headerlink" title="3.介绍一下子redis集群"></a>3.介绍一下子redis集群</h2><p>主从，哨兵，切片集群</p><h2 id="4-redis集群的模式"><a href="#4-redis集群的模式" class="headerlink" title="4.redis集群的模式"></a>4.redis集群的模式</h2><ol><li>主从</li><li>哨兵</li><li>切片</li></ol><h2 id="5-说一下缓存雪崩"><a href="#5-说一下缓存雪崩" class="headerlink" title="5.说一下缓存雪崩"></a>5.说一下缓存雪崩</h2><p>缓存雪崩的话，有几种情况： </p><ol><li>缓存的key在同一时间同时失效</li><li>Redis宕机</li></ol><h2 id="6-缓存击穿和缓存穿透有什么区别"><a href="#6-缓存击穿和缓存穿透有什么区别" class="headerlink" title="6.缓存击穿和缓存穿透有什么区别"></a>6.缓存击穿和缓存穿透有什么区别</h2><p>缓存击穿一般是针对于热点key问题，是指，热点key过期的时候，会有大量的并发请求，一瞬间打到MySQL服务器，导致MySQL宕机</p><p>缓存击穿是指，某些非法数据，不存在于数据库中，频繁的访问，不经过缓存，直接打到数据库，且数据库也没有数据，无法被缓存。</p><h2 id="7-说一下go语言中的Context"><a href="#7-说一下go语言中的Context" class="headerlink" title="7.说一下go语言中的Context"></a>7.说一下go语言中的Context</h2><p>context就是上下文的意思。主要记录当前goroutine的上下文，一般用于goroutine之间传递信息，类似于map的key，value存储。</p><p>emptyCtx</p><p>todoCtx</p><p>valueCtx</p><p>cancleCtx</p><h2 id="8-问了一下项目。项目背景。项目难点。你是怎么做的。具体过程。"><a href="#8-问了一下项目。项目背景。项目难点。你是怎么做的。具体过程。" class="headerlink" title="8.问了一下项目。项目背景。项目难点。你是怎么做的。具体过程。"></a>8.问了一下项目。项目背景。项目难点。你是怎么做的。具体过程。</h2><h2 id="9-三个题目"><a href="#9-三个题目" class="headerlink" title="9.三个题目"></a>9.三个题目</h2><ol><li>第一题就是简单的考察二叉树</li></ol><pre class=" language-reStructuredText"><code class="language-reStructuredText">// 1. 输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。//例如，给出//mid->left->right//前序遍历 preorder = [3,9,20,15,7]//left->mid->right//中序遍历 inorder = [9,3,15,20,7]//返回如下的二叉树：//    3//   / \//  9  20//    /  \//   15   7</code></pre><pre class=" language-go"><code class="language-go"></code></pre><ol start="2"><li>考察了二叉树的性质</li></ol><pre class=" language-reStructuredText"><code class="language-reStructuredText">// 2. 对于一棵满二叉排序树深度为K，节点数为 2^K - 1 ；节点值为 1至 (2^K-1)。//  给出K和任意三个节点的值，输出包含该三个节点的最小子树的根节点值//  样例输入：4 10 15 13//  样例输出：12// 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15//</code></pre><pre class=" language-go"><code class="language-go"></code></pre><ol start="3"><li>常见的面试题</li></ol><pre class=" language-reStructuredText"><code class="language-reStructuredText">// 3. 最长回文子串：// 给你一个字符串s，找到 s 中最长的回文子串。// 示例：输入：s = "babad" 输出："bab" 解释："aba" 同样是符合题意的答案。// 输入：s = "cbbd" 输出："bb"</code></pre><pre class=" language-go"><code class="language-go"></code></pre><h1 id="字节面试题"><a href="#字节面试题" class="headerlink" title="字节面试题"></a>字节面试题</h1><h1 id="在浏览器地址栏输入一个URL后回车，背后会进行哪些技术步骤？"><a href="#在浏览器地址栏输入一个URL后回车，背后会进行哪些技术步骤？" class="headerlink" title="在浏览器地址栏输入一个URL后回车，背后会进行哪些技术步骤？"></a>在浏览器地址栏输入一个URL后回车，背后会进行哪些技术步骤？</h1><ol><li>对浏览器的URL进行解析</li><li>通过DNS查询服务，找到URL的IP地址（具体查询过程…）</li><li>通过TCP三次握手简历连接</li><li>通过网卡发送 ==&gt; HTTP请求</li><li>在网络传输中，通过交换机和路由器，将请求发送到服务器</li><li>服务器响应请求，返回数据</li><li>浏览器进行渲染</li></ol><h2 id="如何排查一条慢SQL？可以从哪些方面入手？"><a href="#如何排查一条慢SQL？可以从哪些方面入手？" class="headerlink" title="如何排查一条慢SQL？可以从哪些方面入手？"></a>如何排查一条慢SQL？可以从哪些方面入手？</h2><p>回答：</p><table><thead><tr><th>项目中</th><th>可以采用日志分析这个接口的运行时间</th></tr></thead><tbody><tr><td>sql语句</td><td>采用explain指定去查这个sql的执行计划</td></tr><tr><td>数据库终端</td><td>开启mysql的慢日志查询，设置好时间阈值，进行捕获</td></tr></tbody></table><p>在企业内部对于慢查SQL的优化主要经历以下的几个步骤：</p><img src="/2024/03/18/Go%E9%9D%A2%E8%AF%95%E9%A2%98/1710082767972.png" class="" width="1710082767972"><p>在慢SQL的优化过程中，可以从以下五个角度去思考优化：</p><ol><li>SQL优化：SQL语句优化方式主要是通过选择合适的索引，优化查询语句，避免全表扫描等提高查询效率，减少慢SQL的出现</li><li>资源占用： </li><li>业务改造</li><li>数据减少</li><li>源头替换</li></ol><p><strong>资源占用</strong> </p><ul><li>锁资源等待：在读写很热的表上，通常会发生锁资源争夺，从而导致慢查询情况。<ul><li>谨慎使用 for update；</li><li>增删改尽量使用到索引；</li><li>降低并发，避免对同一条数据进行反复修改。</li></ul></li><li>网络波动：往客户端发送数据时发生网络波动导致的慢查询</li><li>硬件配置：CPU利用率高，磁盘IO经常慢载，导致慢查询</li></ul><p><strong>业务改造</strong></p><ul><li>是不是真的需要全部查出来，还是取其中的top N就能够满足需求了</li><li>查询条件过多的情况下，能否前端页面提示限制过多的查询条件的使用</li><li>针对实时导出的数据，涉及到实时查DB导出大量数据时，限制导出数据量 or 走T+1的离线导出是不是也是可以的</li><li>现在业务上需要做数据搜索，使用了 LIKE “%关键词%” 做全模糊查询，从而导致了慢SQL。是不是可以让业务方妥协下，最右模糊匹配，这样就可以利用上索引了</li></ul><h1 id="3-13-字节日常实习一面"><a href="#3-13-字节日常实习一面" class="headerlink" title="3.13 字节日常实习一面"></a>3.13 字节日常实习一面</h1><h2 id="1-上来问了项目，为什么做这些项目？项目难点？你如何解决的？"><a href="#1-上来问了项目，为什么做这些项目？项目难点？你如何解决的？" class="headerlink" title="1. 上来问了项目，为什么做这些项目？项目难点？你如何解决的？"></a>1. 上来问了项目，为什么做这些项目？项目难点？你如何解决的？</h2><h2 id="2-两道算法题。"><a href="#2-两道算法题。" class="headerlink" title="2. 两道算法题。"></a>2. 两道算法题。</h2><ol><li>求平方根</li><li>子集合问题</li></ol><h2 id="3-Goroutine，GMP模型，还有go的内存分配，谈谈你的看法。"><a href="#3-Goroutine，GMP模型，还有go的内存分配，谈谈你的看法。" class="headerlink" title="3.Goroutine，GMP模型，还有go的内存分配，谈谈你的看法。"></a>3.Goroutine，GMP模型，还有go的内存分配，谈谈你的看法。</h2><h2 id="4-计算机网络，三次握手，四次挥手，四次挥手的客户端最后处于什么状态？什么是MSL？"><a href="#4-计算机网络，三次握手，四次挥手，四次挥手的客户端最后处于什么状态？什么是MSL？" class="headerlink" title="4.计算机网络，三次握手，四次挥手，四次挥手的客户端最后处于什么状态？什么是MSL？"></a>4.计算机网络，三次握手，四次挥手，四次挥手的客户端最后处于什么状态？什么是MSL？</h2><h2 id="5-数据库的索引说一下。"><a href="#5-数据库的索引说一下。" class="headerlink" title="5. 数据库的索引说一下。"></a>5. 数据库的索引说一下。</h2><h2 id="6-最左匹配原则，给了一些例子，问什么时候失效，结合B-树的结构说一下"><a href="#6-最左匹配原则，给了一些例子，问什么时候失效，结合B-树的结构说一下" class="headerlink" title="6.最左匹配原则，给了一些例子，问什么时候失效，结合B+树的结构说一下"></a>6.最左匹配原则，给了一些例子，问什么时候失效，结合B+树的结构说一下</h2><h2 id="7-异步，同步，阻塞，非阻塞说一下你的理解。"><a href="#7-异步，同步，阻塞，非阻塞说一下你的理解。" class="headerlink" title="7.异步，同步，阻塞，非阻塞说一下你的理解。"></a>7.异步，同步，阻塞，非阻塞说一下你的理解。</h2>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop分布式文件系统---HDFS</title>
      <link href="/2024/03/18/Hadoop-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/"/>
      <url>/2024/03/18/Hadoop-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p><strong>HDFS</strong> （<strong>Hadoop Distributed File System</strong>）是 Hadoop 下的分布式文件系统，具有高容错、高吞吐量等特性，可以部署在低成本的硬件上。</p><span id="more"></span><h2 id="二、HDFS设计原理"><a href="#二、HDFS设计原理" class="headerlink" title="二、HDFS设计原理"></a>二、HDFS设计原理</h2><img src="/2024/03/18/Hadoop-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/1697163694831.png" class="" width="1697163694831"><h3 id="2-1-HDFS架构"><a href="#2-1-HDFS架构" class="headerlink" title="2.1 HDFS架构"></a>2.1 HDFS架构</h3><p>HDFS 遵循主/从架构，由单个 NameNode(NN) 和多个 DataNode(DN) 组成：</p><ul><li><strong>NameNode</strong> : 负责执行有关 <code>文件系统命名空间</code> 的操作，例如打开，关闭、重命名文件和目录等。它同时还负责集群元数据的存储，记录着文件中各个数据块的位置信息。</li><li><strong>DataNode</strong>：负责提供来自文件系统客户端的读写请求，执行块的创建，删除等操作。</li></ul><h3 id="2-2-文件系统命名空间"><a href="#2-2-文件系统命名空间" class="headerlink" title="2.2 文件系统命名空间"></a>2.2 文件系统命名空间</h3><p>HDFS 的 <code>文件系统命名空间</code> 的层次结构与大多数文件系统类似 (如 Linux)， 支持目录和文件的创建、移动、删除和重命名等操作，支持配置用户和访问权限，但不支持硬链接和软连接。<code>NameNode</code> 负责维护文件系统名称空间，记录对名称空间或其属性的任何更改。</p><h3 id="2-3-数据复制"><a href="#2-3-数据复制" class="headerlink" title="2.3 数据复制"></a>2.3 数据复制</h3><p>由于 Hadoop 被设计运行在廉价的机器上，这意味着硬件是不可靠的，为了保证容错性，HDFS 提供了数据复制机制。HDFS 将每一个文件存储为一系列<strong>块</strong>，每个块由多个副本来保证容错，块的大小和复制因子可以自行配置（默认情况下，块大小是 128M，默认复制因子是 3）。</p><img src="/2024/03/18/Hadoop-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/1697163909859.png" class="" width="1697163909859"><h3 id="2-4-数据复制的实现原理"><a href="#2-4-数据复制的实现原理" class="headerlink" title="2.4 数据复制的实现原理"></a>2.4 数据复制的实现原理</h3><p>大型的 HDFS 实例在通常分布在多个机架的多台服务器上，不同机架上的两台服务器之间通过交换机进行通讯。在大多数情况下，同一机架中的服务器间的网络带宽大于不同机架中的服务器之间的带宽。因此 HDFS 采用机架感知副本放置策略，对于常见情况，当复制因子为 3 时，HDFS 的放置策略是：</p><p>在写入程序位于 <code>datanode</code> 上时，就优先将写入文件的一个副本放置在该 <code>datanode</code> 上，否则放在随机 <code>datanode</code> 上。之后在另一个远程机架上的任意一个节点上放置另一个副本，并在该机架上的另一个节点上放置最后一个副本。此策略可以减少机架间的写入流量，从而提高写入性能。</p><p><img src="/Hadoop-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS%5C1697164002826.png" alt="1697164002826"></p><p>如果复制因子大于 3，则随机确定第 4 个和之后副本的放置位置，同时保持每个机架的副本数量低于上限，上限值通常为 <code>（复制系数 - 1）/机架数量 + 2</code>，需要注意的是不允许同一个 <code>dataNode</code> 上具有同一个块的多个副本。</p><h3 id="2-5-副本的选择"><a href="#2-5-副本的选择" class="headerlink" title="2.5 副本的选择"></a>2.5 副本的选择</h3><p>为了最大限度地减少带宽消耗和读取延迟，HDFS 在执行读取请求时，优先读取距离读取器最近的副本。如果在与读取器节点相同的机架上存在副本，则优先选择该副本。如果 HDFS 群集跨越多个数据中心，则优先选择本地数据中心上的副本。</p><h2 id="2-6-架构的稳定性"><a href="#2-6-架构的稳定性" class="headerlink" title="2.6 架构的稳定性"></a>2.6 架构的稳定性</h2><h4 id="1-心跳机制和重新复制"><a href="#1-心跳机制和重新复制" class="headerlink" title="1. 心跳机制和重新复制"></a>1. 心跳机制和重新复制</h4><p>每个 DataNode 定期向 NameNode 发送心跳消息，如果超过指定时间没有收到心跳消息，则将 DataNode 标记为死亡。NameNode 不会将任何新的 IO 请求转发给标记为死亡的 DataNode，也不会再使用这些 DataNode 上的数据。 由于数据不再可用，可能会导致某些块的复制因子小于其指定值，NameNode 会跟踪这些块，并在必要的时候进行重新复制。</p><h4 id="2-数据的完整性"><a href="#2-数据的完整性" class="headerlink" title="2. 数据的完整性"></a>2. 数据的完整性</h4><p>由于存储设备故障等原因，存储在 DataNode 上的数据块也会发生损坏。为了避免读取到已经损坏的数据而导致错误，HDFS 提供了数据完整性校验机制来保证数据的完整性，具体操作如下：</p><p>当客户端创建 HDFS 文件时，它会计算文件的每个块的 <code>校验和</code>，并将 <code>校验和</code> 存储在同一 HDFS 命名空间下的单独的隐藏文件中。当客户端检索文件内容时，它会验证从每个 DataNode 接收的数据是否与存储在关联校验和文件中的 <code>校验和</code> 匹配。如果匹配失败，则证明数据已经损坏，此时客户端会选择从其他 DataNode 获取该块的其他可用副本。</p><h4 id="3-元数据的磁盘故障"><a href="#3-元数据的磁盘故障" class="headerlink" title="3.元数据的磁盘故障"></a>3.元数据的磁盘故障</h4><p><code>FsImage</code> 和 <code>EditLog</code> 是 HDFS 的核心数据，这些数据的意外丢失可能会导致整个 HDFS 服务不可用。为了避免这个问题，可以配置 NameNode 使其支持 <code>FsImage</code> 和 <code>EditLog</code> 多副本同步，这样 <code>FsImage</code> 或 <code>EditLog</code> 的任何改变都会引起每个副本 <code>FsImage</code> 和 <code>EditLog</code> 的同步更新。</p><h4 id="4-支持快照"><a href="#4-支持快照" class="headerlink" title="4.支持快照"></a>4.支持快照</h4><p>快照支持在特定时刻存储数据副本，在数据意外损坏时，可以通过回滚操作恢复到健康的数据状态。</p><h2 id="三、HDFS的特点"><a href="#三、HDFS的特点" class="headerlink" title="三、HDFS的特点"></a>三、HDFS的特点</h2><h3 id="3-1-高容错"><a href="#3-1-高容错" class="headerlink" title="3.1 高容错"></a>3.1 高容错</h3><p>由于 HDFS 采用数据的多副本方案，所以部分硬件的损坏不会导致全部数据的丢失。</p><h3 id="3-2-高吞吐量"><a href="#3-2-高吞吐量" class="headerlink" title="3.2 高吞吐量"></a>3.2 高吞吐量</h3><p>HDFS 设计的重点是支持高吞吐量的数据访问，而不是低延迟的数据访问。</p><h3 id="3-3-大文件支持"><a href="#3-3-大文件支持" class="headerlink" title="3.3 大文件支持"></a>3.3 大文件支持</h3><p>HDFS 适合于大文件的存储，文档的大小应该是是 GB 到 TB 级别的。</p><h3 id="3-3-简单一致性模型"><a href="#3-3-简单一致性模型" class="headerlink" title="3.3 简单一致性模型"></a>3.3 简单一致性模型</h3><p>HDFS 更适合于一次写入多次读取 (write-once-read-many) 的访问模型。支持将内容追加到文件末尾，但不支持数据的随机访问，不能从文件任意位置新增数据。</p><h3 id="3-4-跨平台移植性"><a href="#3-4-跨平台移植性" class="headerlink" title="3.4 跨平台移植性"></a>3.4 跨平台移植性</h3><p>HDFS 具有良好的跨平台移植性，这使得其他大数据计算框架都将其作为数据持久化存储的首选方案。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDD</title>
      <link href="/2024/03/18/DDD/"/>
      <url>/2024/03/18/DDD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>该思想源于2003年 Eric Evans编写的“Domain-Driven Design领域驱动设计”简称DDD，Evans DDD是一套综合软件系统分析和设计的面向对象建模方法。</p></blockquote><span id="more"></span><h1 id="服务器后端发展三个阶段"><a href="#服务器后端发展三个阶段" class="headerlink" title="服务器后端发展三个阶段"></a>服务器后端发展三个阶段</h1><img src="/2024/03/18/DDD/1698295528635.png" class="" width="1698295528635"><p>服务器后端发展三个阶段：</p><ol><li>面向<strong>过程脚本</strong>：初始简单，业务复杂后，维护难度指数上升。–&gt;基本不为主流使用</li><li>面向<strong>数据库表</strong>：初始难度中，业务复杂后，维护难度延迟后再指数上升。—&gt;目前市面上主流</li><li>面向<strong>业务模型</strong>：DDD+SOA微服务的事件驱动的<a href="https://www.jdon.com/cqrs.html">CQRS读写分离架构：</a>应付复杂业务逻辑，<strong>以聚合模型替代数据表模型</strong>，以并发的事件驱动替代串联的消息驱动。真正实现以业务实体为核心的灵活拓展。初始难度高，业务复杂后，维护难度**线性上升(已很不错)**。</li></ol><h1 id="DDD的特点"><a href="#DDD的特点" class="headerlink" title="DDD的特点"></a>DDD的特点</h1><p><strong>DDD革命性在于</strong>：领域模型准确反映了业务语言，而传统微服务数据对象除了简单setter/getter方法外，没有任何业务方法，即失血模型，那么DDD领域模型就是<strong>充血模型（业务方法定义在实体对象中）</strong>。</p><h1 id="落地"><a href="#落地" class="headerlink" title="落地"></a>落地</h1><h2 id="邻域模型设计"><a href="#邻域模型设计" class="headerlink" title="邻域模型设计"></a>邻域模型设计</h2><p>以渠道中心（一个微服务）作为例子来做领域模型设计，核心就是设计2个图，一个是战略设计图（宏观）  ，一个是战术设计图（细节）。</p><h3 id="1-领域战略设计图"><a href="#1-领域战略设计图" class="headerlink" title="1.领域战略设计图"></a>1.领域战略设计图</h3><p>战略设计图是从一个限界上下文的角度出发去分析业务场景。主要是宏观上的核心域、子域、实体关系图。demo如下图：</p><img src="/2024/03/18/DDD/584866-20211011150935388-1552511311.jpg" class="" title="img"><h3 id="2-领域战术设计图"><a href="#2-领域战术设计图" class="headerlink" title="2.领域战术设计图"></a>2.领域战术设计图</h3><p>战术设计图是从一个限界上下文的角度出发去分析业务场景。细化到核心业务字段、领域实体、值对象、领域服务、领域事件等等。基本上这个图画完，代码已经知道怎么写了。demo如下图：</p><img src="/2024/03/18/DDD/584866-20211011150951572-155912044.jpg" class="" title="img"><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><p>整体项目框架分层图如下所示：</p><img src="/2024/03/18/DDD/584866-20211011141738741-950766765.png" class="" title="img"><p>如上图，4层典型DDD分层结构，</p><p>1.展现层：controller层。无业务逻辑</p><p>2.应用服务层：此层可以包含查询逻辑，但核心业务逻辑必须下沉到领域层。</p><p>3.领域服务层：业务在这里组装。仓储（资源库）接口在此层定义。</p><p>4.基础设施层：仓储（资源库）实现层+PO持久化层。</p><p>注：</p><p>1.简单查询不涉及业务，是可以直接从应用层直接穿透到PO查询，不需要经过domain层。如下图所示，DDD本身是不限制非业务类操作跨层调用的。</p><img src="/2024/03/18/DDD/584866-20211011144310357-948628155.jpg" class="" title="img"><p>2.DTO是不能存在于domain层的，DDD设计不认为DTO是业务对象，entity才是。或者传值简单数据类型也是可以的。</p><h3 id="服务调用问题"><a href="#服务调用问题" class="headerlink" title="服务调用问题"></a>服务调用问题</h3><p>1.域内调用</p><p>领域内调用，随便调用，丝般顺滑。至于实现，可以由一个核心域的仓储实现层（第四层）去实现多个Repository接口。（比如这里A是核心域的实体名，B是支撑域、通用域等）</p><img src="/2024/03/18/DDD/584866-20211011144810021-115106935.png" class="" title="img"><p> 2.跨域调用</p><img src="/2024/03/18/DDD/584866-20211011144924979-96628020.png" class="" title="img"><p>跨域分为</p><ul><li><p>1.同上下文跨域：ACL层-&gt;Adapter适配器层→调用其它域的repository。—&gt;不得已才使用，不推荐使用。</p></li><li><p>推荐：1.使用领域事件 eventbus来做解耦</p><p>​     2.考虑是否有可能合并为一个领域.</p></li><li><p>2.跨上下文（肯定跨域）：ACL层-&gt;Adapter适配器层-&gt;feign调用</p></li></ul><h3 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h3><p>包结构如下：</p><img src="/2024/03/18/DDD/584866-20211011152422827-1548164745.jpg" class="" title="img"><p> 展开包结构如下：</p><img src="/2024/03/18/DDD/584866-20211011152315485-404154610.png" class="" title="img"><p><strong>展现层：Controller，</strong>仅做接口的入口定义和编排转发，不做任何的业务处理；</p><p><strong>应用服务层：application，</strong>负责接口参数DTO的简单校验，以及DTO和实体值对象的数据转换，对于简单的业务，也可以在应用层加载实体直接执行实体行为方法；</p><p><strong>领域层：</strong></p><ul><li>模型：根据领域模型分析领域内各实体、聚合、聚合根、值对象等，这些对象在*.domain.model定义，实体内的行为方法只负责维护实体自身的生命周期和状态；</li><li>行为：领域内各实体、聚合、聚合根等，会有相应的行为，在*.domain.model包下定义行为方法；</li><li>领域服务：领域提供的接口服务，需要定义在*.domain.service包下，业务相关的前置业务判断、多个实体或值对象的行为逻辑处理等，都在领域服务中实现，需要注意的是并不是每个实体都有一个对应的领域服务，但是依赖多个实体的行为方法，最好根据这个业务模块是建立一个领域服务；</li><li>仓储：领域服务或上层应用服务需要使用到的基础设施层，包括DB、Feign调用等，定义在*.domain.repository下，在*.infrastructure.repository下实现；</li></ul><p><strong>适配层：</strong>在acl包下的feign定义依赖外部的接口，并在acl的adapter包编写转换，由仓储层操作实体时调用；</p><p><strong>持久层：</strong>与常用DAO定义一致，由仓储层操作实体时调用。</p><p>目前业内没有标杆，github开源地址：<a href="https://github.com/jovezhao/nest">https://github.com/jovezhao/nest</a>  。这个项目可以练手DDD。</p><pre><code>http://192.168.0.116:9001/test/1112023-09-26 14-08-23.mkv</code></pre><p>使用flutter写一个视频播放组件，要求有倍速，全屏，音量调节，暂停播放按钮</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:video_player/video_player.dart'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">VideoPlayerWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> String videoUrl<span class="token punctuation">;</span>  <span class="token function">VideoPlayerWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>videoUrl<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  _VideoPlayerWidgetState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_VideoPlayerWidgetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_VideoPlayerWidgetState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>VideoPlayerWidget<span class="token operator">></span> <span class="token punctuation">{</span>  late VideoPlayerController _controller<span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _controller <span class="token operator">=</span> VideoPlayerController<span class="token punctuation">.</span><span class="token function">network</span><span class="token punctuation">(</span>videoUrl<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _controller<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">AspectRatio</span><span class="token punctuation">(</span>      aspectRatio<span class="token punctuation">:</span> _controller<span class="token punctuation">.</span>value<span class="token punctuation">.</span>aspectRatio<span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token function">VideoPlayer</span><span class="token punctuation">(</span>_controller<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'video_player_widget.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Video Player'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token function">VideoPlayerWidget</span><span class="token punctuation">(</span>videoUrl<span class="token punctuation">:</span> <span class="token string">'https://example.com/video.mp4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><p>使用flutter写一个要求有倍速，全屏，音量调节，暂停播放按钮的视频播放组件，</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:video_player/video_player.dart'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">VideoPlayerWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> String videoUrl<span class="token punctuation">;</span>  <span class="token function">VideoPlayerWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>videoUrl<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  _VideoPlayerWidgetState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_VideoPlayerWidgetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_VideoPlayerWidgetState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>VideoPlayerWidget<span class="token operator">></span> <span class="token punctuation">{</span>  late VideoPlayerController _controller<span class="token punctuation">;</span>  double _volume <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>  bool _isPlaying <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _controller <span class="token operator">=</span> VideoPlayerController<span class="token punctuation">.</span><span class="token function">network</span><span class="token punctuation">(</span>widget<span class="token punctuation">.</span>videoUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    _controller<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _controller<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">_togglePlayPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_controller<span class="token punctuation">.</span>value<span class="token punctuation">.</span>isPlaying<span class="token punctuation">)</span> <span class="token punctuation">{</span>      _controller<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      _controller<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      _isPlaying <span class="token operator">=</span> <span class="token operator">!</span>_isPlaying<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">_setVolume</span><span class="token punctuation">(</span>double value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _controller<span class="token punctuation">.</span><span class="token function">setVolume</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      _volume <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Stack</span><span class="token punctuation">(</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token function">AspectRatio</span><span class="token punctuation">(</span>          aspectRatio<span class="token punctuation">:</span> _controller<span class="token punctuation">.</span>value<span class="token punctuation">.</span>aspectRatio<span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token function">VideoPlayer</span><span class="token punctuation">(</span>_controller<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        Positioned<span class="token punctuation">.</span><span class="token function">bottomRight</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token function">IconButton</span><span class="token punctuation">(</span>            icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>_isPlaying <span class="token operator">?</span> Icons<span class="token punctuation">.</span>pause <span class="token punctuation">:</span> Icons<span class="token punctuation">.</span>play_arrow<span class="token punctuation">)</span><span class="token punctuation">,</span>            onPressed<span class="token punctuation">:</span> _togglePlayPause<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        Positioned<span class="token punctuation">.</span><span class="token function">bottomLeft</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token function">Slider</span><span class="token punctuation">(</span>            min<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            max<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            value<span class="token punctuation">:</span> _volume<span class="token punctuation">,</span>            onChanged<span class="token punctuation">:</span> _setVolume<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'dart:io'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:chewie/chewie.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:chewie_example/app/theme.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ignore: depend_on_referenced_packages</span><span class="token keyword">import</span> <span class="token string">'package:video_player/video_player.dart'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ChewieDemo</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function">ChewieDemo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    Key<span class="token operator">?</span> key<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'Chewie Demo'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> String title<span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  State<span class="token operator">&lt;</span>StatefulWidget<span class="token operator">></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">_ChewieDemoState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_ChewieDemoState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>ChewieDemo<span class="token operator">></span> <span class="token punctuation">{</span>  TargetPlatform<span class="token operator">?</span> _platform<span class="token punctuation">;</span>  late VideoPlayerController _videoPlayerController1<span class="token punctuation">;</span>  late VideoPlayerController _videoPlayerController2<span class="token punctuation">;</span>  ChewieController<span class="token operator">?</span> _chewieController<span class="token punctuation">;</span>  int<span class="token operator">?</span> bufferDelay<span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initializePlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _videoPlayerController1<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _videoPlayerController2<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _chewieController<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> srcs <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"https://assets.mixkit.co/videos/preview/mixkit-spinning-around-the-earth-29351-large.mp4"</span><span class="token punctuation">,</span>    <span class="token string">"https://assets.mixkit.co/videos/preview/mixkit-daytime-city-traffic-aerial-view-56-large.mp4"</span><span class="token punctuation">,</span>    <span class="token string">"https://assets.mixkit.co/videos/preview/mixkit-a-girl-blowing-a-bubble-gum-at-an-amusement-park-1226-large.mp4"</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  Future<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token function">initializePlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    _videoPlayerController1 <span class="token operator">=</span>        VideoPlayerController<span class="token punctuation">.</span><span class="token function">networkUrl</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>srcs<span class="token punctuation">[</span>currPlayIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _videoPlayerController2 <span class="token operator">=</span>        VideoPlayerController<span class="token punctuation">.</span><span class="token function">networkUrl</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>srcs<span class="token punctuation">[</span>currPlayIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> Future<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      _videoPlayerController1<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      _videoPlayerController2<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_createChewieController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">_createChewieController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// final subtitles = [</span>    <span class="token comment" spellcheck="true">//     Subtitle(</span>    <span class="token comment" spellcheck="true">//       index: 0,</span>    <span class="token comment" spellcheck="true">//       start: Duration.zero,</span>    <span class="token comment" spellcheck="true">//       end: const Duration(seconds: 10),</span>    <span class="token comment" spellcheck="true">//       text: 'Hello from subtitles',</span>    <span class="token comment" spellcheck="true">//     ),</span>    <span class="token comment" spellcheck="true">//     Subtitle(</span>    <span class="token comment" spellcheck="true">//       index: 0,</span>    <span class="token comment" spellcheck="true">//       start: const Duration(seconds: 10),</span>    <span class="token comment" spellcheck="true">//       end: const Duration(seconds: 20),</span>    <span class="token comment" spellcheck="true">//       text: 'Whats up? :)',</span>    <span class="token comment" spellcheck="true">//     ),</span>    <span class="token comment" spellcheck="true">//   ];</span>    <span class="token keyword">final</span> subtitles <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token function">Subtitle</span><span class="token punctuation">(</span>        index<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        start<span class="token punctuation">:</span> Duration<span class="token punctuation">.</span>zero<span class="token punctuation">,</span>        end<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        text<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">TextSpan</span><span class="token punctuation">(</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token function">TextSpan</span><span class="token punctuation">(</span>              text<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span>              style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>red<span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">TextSpan</span><span class="token punctuation">(</span>              text<span class="token punctuation">:</span> <span class="token string">' from '</span><span class="token punctuation">,</span>              style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>green<span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">TextSpan</span><span class="token punctuation">(</span>              text<span class="token punctuation">:</span> <span class="token string">'subtitles'</span><span class="token punctuation">,</span>              style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blue<span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">Subtitle</span><span class="token punctuation">(</span>        index<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        start<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        end<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        text<span class="token punctuation">:</span> <span class="token string">'Whats up? :)'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// text: const TextSpan(</span>        <span class="token comment" spellcheck="true">//   text: 'Whats up? :)',</span>        <span class="token comment" spellcheck="true">//   style: TextStyle(color: Colors.amber, fontSize: 22, fontStyle: FontStyle.italic),</span>        <span class="token comment" spellcheck="true">// ),</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    _chewieController <span class="token operator">=</span> <span class="token function">ChewieController</span><span class="token punctuation">(</span>      videoPlayerController<span class="token punctuation">:</span> _videoPlayerController1<span class="token punctuation">,</span>      autoPlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      looping<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      progressIndicatorDelay<span class="token punctuation">:</span>          bufferDelay <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> bufferDelay<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      additionalOptions<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>OptionItem<span class="token operator">></span><span class="token punctuation">[</span>          <span class="token function">OptionItem</span><span class="token punctuation">(</span>            onTap<span class="token punctuation">:</span> toggleVideo<span class="token punctuation">,</span>            iconData<span class="token punctuation">:</span> Icons<span class="token punctuation">.</span>live_tv_sharp<span class="token punctuation">,</span>            title<span class="token punctuation">:</span> <span class="token string">'Toggle Video Src'</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      subtitle<span class="token punctuation">:</span> <span class="token function">Subtitles</span><span class="token punctuation">(</span>subtitles<span class="token punctuation">)</span><span class="token punctuation">,</span>      subtitleBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> subtitle<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Container</span><span class="token punctuation">(</span>        padding<span class="token punctuation">:</span> <span class="token keyword">const</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        child<span class="token punctuation">:</span> subtitle <span class="token operator">is</span> InlineSpan            <span class="token operator">?</span> <span class="token function">RichText</span><span class="token punctuation">(</span>                text<span class="token punctuation">:</span> subtitle<span class="token punctuation">,</span>              <span class="token punctuation">)</span>            <span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>                subtitle<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                style<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      hideControlsTimer<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// Try playing around with some of these other options:</span>      <span class="token comment" spellcheck="true">// showControls: false,</span>      <span class="token comment" spellcheck="true">// materialProgressColors: ChewieProgressColors(</span>      <span class="token comment" spellcheck="true">//   playedColor: Colors.red,</span>      <span class="token comment" spellcheck="true">//   handleColor: Colors.blue,</span>      <span class="token comment" spellcheck="true">//   backgroundColor: Colors.grey,</span>      <span class="token comment" spellcheck="true">//   bufferedColor: Colors.lightGreen,</span>      <span class="token comment" spellcheck="true">// ),</span>      <span class="token comment" spellcheck="true">// placeholder: Container(</span>      <span class="token comment" spellcheck="true">//   color: Colors.grey,</span>      <span class="token comment" spellcheck="true">// ),</span>      <span class="token comment" spellcheck="true">// autoInitialize: true,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  int currPlayIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  Future<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token function">toggleVideo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> _videoPlayerController1<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currPlayIndex <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currPlayIndex <span class="token operator">>=</span> srcs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      currPlayIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">await</span> <span class="token function">initializePlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>title<span class="token punctuation">,</span>      theme<span class="token punctuation">:</span> AppTheme<span class="token punctuation">.</span>light<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>        platform<span class="token punctuation">:</span> _platform <span class="token operator">?</span><span class="token operator">?</span> Theme<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>platform<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>widget<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> <span class="token function">Column</span><span class="token punctuation">(</span>          children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>            <span class="token function">Expanded</span><span class="token punctuation">(</span>              child<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>                child<span class="token punctuation">:</span> _chewieController <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>                        _chewieController<span class="token operator">!</span>                            <span class="token punctuation">.</span>videoPlayerController<span class="token punctuation">.</span>value<span class="token punctuation">.</span>isInitialized                    <span class="token operator">?</span> <span class="token function">Chewie</span><span class="token punctuation">(</span>                        controller<span class="token punctuation">:</span> _chewieController<span class="token operator">!</span><span class="token punctuation">,</span>                      <span class="token punctuation">)</span>                    <span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Column</span><span class="token punctuation">(</span>                        mainAxisAlignment<span class="token punctuation">:</span> MainAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>                        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                          <span class="token function">CircularProgressIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token function">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Loading'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">TextButton</span><span class="token punctuation">(</span>              onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                _chewieController<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">enterFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Fullscreen'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">Row</span><span class="token punctuation">(</span>              children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>                <span class="token function">Expanded</span><span class="token punctuation">(</span>                  child<span class="token punctuation">:</span> <span class="token function">TextButton</span><span class="token punctuation">(</span>                    onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        _videoPlayerController1<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        _videoPlayerController1<span class="token punctuation">.</span><span class="token function">seekTo</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">_createChewieController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Padding</span><span class="token punctuation">(</span>                      padding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Landscape Video"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">Expanded</span><span class="token punctuation">(</span>                  child<span class="token punctuation">:</span> <span class="token function">TextButton</span><span class="token punctuation">(</span>                    onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        _videoPlayerController2<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        _videoPlayerController2<span class="token punctuation">.</span><span class="token function">seekTo</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span>                        _chewieController <span class="token operator">=</span> _chewieController<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>                          videoPlayerController<span class="token punctuation">:</span> _videoPlayerController2<span class="token punctuation">,</span>                          autoPlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                          looping<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                          <span class="token comment" spellcheck="true">/* subtitle: Subtitles([                            Subtitle(                              index: 0,                              start: Duration.zero,                              end: const Duration(seconds: 10),                              text: 'Hello from subtitles',                            ),                            Subtitle(                              index: 0,                              start: const Duration(seconds: 10),                              end: const Duration(seconds: 20),                              text: 'Whats up? :)',                            ),                          ]),                          subtitleBuilder: (context, subtitle) => Container(                            padding: const EdgeInsets.all(10.0),                            child: Text(                              subtitle,                              style: const TextStyle(color: Colors.white),                            ),                          ), */</span>                        <span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Padding</span><span class="token punctuation">(</span>                      padding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Portrait Video"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">Row</span><span class="token punctuation">(</span>              children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>                <span class="token function">Expanded</span><span class="token punctuation">(</span>                  child<span class="token punctuation">:</span> <span class="token function">TextButton</span><span class="token punctuation">(</span>                    onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        _platform <span class="token operator">=</span> TargetPlatform<span class="token punctuation">.</span>android<span class="token punctuation">;</span>                      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Padding</span><span class="token punctuation">(</span>                      padding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Android controls"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">Expanded</span><span class="token punctuation">(</span>                  child<span class="token punctuation">:</span> <span class="token function">TextButton</span><span class="token punctuation">(</span>                    onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        _platform <span class="token operator">=</span> TargetPlatform<span class="token punctuation">.</span>iOS<span class="token punctuation">;</span>                      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Padding</span><span class="token punctuation">(</span>                      padding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"iOS controls"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">Row</span><span class="token punctuation">(</span>              children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>                <span class="token function">Expanded</span><span class="token punctuation">(</span>                  child<span class="token punctuation">:</span> <span class="token function">TextButton</span><span class="token punctuation">(</span>                    onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        _platform <span class="token operator">=</span> TargetPlatform<span class="token punctuation">.</span>windows<span class="token punctuation">;</span>                      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Padding</span><span class="token punctuation">(</span>                      padding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Desktop controls"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Platform<span class="token punctuation">.</span>isAndroid<span class="token punctuation">)</span>              <span class="token function">ListTile</span><span class="token punctuation">(</span>                title<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Delay"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                subtitle<span class="token punctuation">:</span> <span class="token function">DelaySlider</span><span class="token punctuation">(</span>                  delay<span class="token punctuation">:</span>                      _chewieController<span class="token operator">?</span><span class="token punctuation">.</span>progressIndicatorDelay<span class="token operator">?</span><span class="token punctuation">.</span>inMilliseconds<span class="token punctuation">,</span>                  onSave<span class="token punctuation">:</span> <span class="token punctuation">(</span>delay<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      bufferDelay <span class="token operator">=</span> delay <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> delay<span class="token punctuation">;</span>                      <span class="token keyword">await</span> <span class="token function">initializePlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DelaySlider</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function">DelaySlider</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Key<span class="token operator">?</span> key<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>delay<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>onSave<span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> int<span class="token operator">?</span> delay<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">Function</span><span class="token punctuation">(</span>int<span class="token operator">?</span><span class="token punctuation">)</span> onSave<span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  State<span class="token operator">&lt;</span>DelaySlider<span class="token operator">></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_DelaySliderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_DelaySliderState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>DelaySlider<span class="token operator">></span> <span class="token punctuation">{</span>  int<span class="token operator">?</span> delay<span class="token punctuation">;</span>  bool saved <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    delay <span class="token operator">=</span> widget<span class="token punctuation">.</span>delay<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> int max <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">ListTile</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>        <span class="token string">"Progress indicator delay ${delay != null ? "</span>$<span class="token punctuation">{</span>delay<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> MS<span class="token string">" : "</span><span class="token string">"}"</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      subtitle<span class="token punctuation">:</span> <span class="token function">Slider</span><span class="token punctuation">(</span>        value<span class="token punctuation">:</span> delay <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token punctuation">(</span>delay<span class="token operator">!</span> <span class="token operator">/</span> max<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>          delay <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token operator">*</span> max<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            saved <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      trailing<span class="token punctuation">:</span> <span class="token function">IconButton</span><span class="token punctuation">(</span>        icon<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>save<span class="token punctuation">)</span><span class="token punctuation">,</span>        onPressed<span class="token punctuation">:</span> saved            <span class="token operator">?</span> <span class="token keyword">null</span>            <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                widget<span class="token punctuation">.</span><span class="token function">onSave</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  saved <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios</title>
      <link href="/2024/03/18/Axios/"/>
      <url>/2024/03/18/Axios/</url>
      
        <content type="html"><![CDATA[<p>Axios学习</p><h1 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h1><h2 id="项目中对于axios的简单二次封装"><a href="#项目中对于axios的简单二次封装" class="headerlink" title="项目中对于axios的简单二次封装"></a>项目中对于axios的简单二次封装</h2><span id="more"></span><ul><li>使用yarn添加axios</li></ul><pre class=" language-powershell"><code class="language-powershell">yarn add axios</code></pre><ul><li>封装,创建一个request.js文件</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token punctuation">:</span> <span class="token string">'http://localhost:8080'</span><span class="token punctuation">,</span>    timeout<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// todo: 拦截器暂时不需要</span><span class="token comment" spellcheck="true">/** * 基于axios  二次封装的get 请求 * @param url * @param params * @returns {Promise&lt;unknown>} */</span><span class="token keyword">const</span> <span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        instance            <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 基于axios 二次封装的 post 请求 * @param url * @param data * @returns {Promise&lt;unknown>} */</span><span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        instance            <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">,</span> post<span class="token punctuation">}</span></code></pre><ul><li>封装完成后可以在 api 文件夹下创建属于自己的 api 用于发送请求，便于管理。</li></ul><p>例如</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'../../utils/request'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">helloApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式必备理论基础CAP和BASE</title>
      <link href="/2024/03/18/CAP/"/>
      <url>/2024/03/18/CAP/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在<a href="https://zh.m.wikipedia.org/wiki/%E7%90%86%E8%AB%96%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8">理论计算机科学</a>中，<strong>CAP定理</strong>（CAP theorem），又被称作<strong>布鲁尔定理</strong>（Brewer’s theorem），它指出对于一个<a href="https://zh.m.wikipedia.org/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97">分布式计算系统</a>来说，<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%89%E9%9A%BE%E5%9B%B0%E5%A2%83">不可能同时满足以下三点</a>：[<a href="https://zh.m.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86#cite_note-Lynch-1">1]</a>[<a href="https://zh.m.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86#cite_note-2">2]</a></p><ul><li>一致性（<strong>C</strong>onsistency） （等同于所有节点访问同一份最新的数据副本）</li><li><a href="https://zh.m.wikipedia.org/wiki/%E5%8F%AF%E7%94%A8%E6%80%A7">可用性</a>（<strong>A</strong>vailability）（每次请求都能获取到非错的响应———但是不保证获取的数据为最新数据）</li><li><a href="https://zh.m.wikipedia.org/w/index.php?title=%E7%BD%91%E7%BB%9C%E5%88%86%E5%8C%BA&amp;action=edit&amp;redlink=1">分区容错性</a>（<strong>P</strong>artition tolerance）（以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择[<a href="https://zh.m.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86#cite_note-3">3]</a>。）</li></ul><p>根据定理，分布式系统只能满足三项中的两项而不可能满足全部三项[<a href="https://zh.m.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86#cite_note-4">4]</a>。理解CAP理论的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了C性质。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了A性质。除非两个节点可以互相通信，才能既保证C又保证A，这又会导致丧失P性质。</p></blockquote><span id="more"></span><h1 id="CAP理论理解"><a href="#CAP理论理解" class="headerlink" title="CAP理论理解"></a>CAP理论理解</h1><ul><li><p>CAP 理论的 C!= 事务ACID特性中的C</p></li><li><p>我们可以把CAP理论中的C理解为<strong>副本一致性</strong>。即所有副本给出的结果都一致。</p></li><li><p>在没有网络分区和网络波动的情况下，我们无需为了P而舍弃C或A；而出现网络波动时，为了保证P,就要舍弃C和A中的一个。</p></li></ul><img src="/2024/03/18/CAP/1704178430295.png" class="" width="1704178430295"><h1 id="辩证看待CAP理论"><a href="#辩证看待CAP理论" class="headerlink" title="辩证看待CAP理论"></a>辩证看待CAP理论</h1><img src="/2024/03/18/CAP/1704178953384.png" class="" width="1704178953384"><h1 id="用CAP视角看目前成熟的分布式方案"><a href="#用CAP视角看目前成熟的分布式方案" class="headerlink" title="用CAP视角看目前成熟的分布式方案"></a>用CAP视角看目前成熟的分布式方案</h1><img src="/2024/03/18/CAP/1704179112965.png" class="" width="1704179112965"><h1 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h1><h2 id="什么是CAP"><a href="#什么是CAP" class="headerlink" title="什么是CAP"></a>什么是CAP</h2><p>CAP原则又称CAP定理，指的是在一个分布式系统中，<code>Consistency（一致性）</code>、 <code>Availability（可用性）</code>、<code>Partition tolerance（分区容错性）</code>这三个基本需求，最多只能同时满足其中的2个。</p><img src="/2024/03/18/CAP/1704179236073.png" class="" width="1704179236073"><ul><li><strong>一致性</strong> ：数据在多个副本之间能够保持一致的特性。</li><li><strong>可用性</strong>：系统提供的服务一直处于可用的状态，每次请求都能获得正确的响应。</li><li><strong>分区容错性</strong>：分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。</li></ul><h2 id="什么是分区"><a href="#什么是分区" class="headerlink" title="什么是分区"></a>什么是分区</h2><p>在分布式系统中，不同的节点分布在不同的子网络中，由于一些特殊的原因，这些子节点之间出现了网络不通的状态，但他们的内部子网络是正常的。从而导致了整个系统的环境被切分成了若干个孤立的区域，这就是分区。</p><img src="/2024/03/18/CAP/1704179323376.png" class="" width="1704179323376"><h2 id="为什么三者不可兼容"><a href="#为什么三者不可兼容" class="headerlink" title="为什么三者不可兼容"></a>为什么三者不可兼容</h2><p>首先，我们得知道，分布式系统，是避免不了分区的，分区容错性是一定要满足的，我们看看在满足分区容错的基础上，能不能同时满足<code>一致性</code>和<code>可用性</code>？</p><p>假如现在有两个分区<code>N1</code>和<code>N2</code>，N1和N2分别有不同的分区存储D1和D2，以及不同的服务S1和S2。</p><ul><li>在满足<code>一致性</code> 的时候，N1和N2的数据要求值一样的，D1=D2。</li><li>在满足<code>可用性</code>的时候，无论访问N1还是N2，都能获取及时的响应。</li></ul><img src="/2024/03/18/CAP/1704179364633.png" class="" width="1704179364633"><p>好的，现在有这样的场景：</p><ul><li>用户访问了N1，修改了D1的数据。</li><li>用户再次访问，请求落在了N2。此时D1和D2的数据不一致。</li></ul><p>接下来：</p><ul><li>保证<code>一致性</code>：此时D1和D2数据不一致，要保证一致性就不能返回不一致的数据，<code>可用性</code>无法保证。</li><li>保证<code>可用性</code>：立即响应，可用性得到了保证，但是此时响应的数据和D1不一致，<code>一致性</code>无法保证。</li></ul><p>所以，可以看出，分区容错的前提下，<code>一致性</code>和<code>可用性</code>是矛盾的。</p><h2 id="关于分布式一致性算法—-Raft-VS-Paxos-待学习"><a href="#关于分布式一致性算法—-Raft-VS-Paxos-待学习" class="headerlink" title="关于分布式一致性算法— Raft VS Paxos (待学习)"></a>关于分布式一致性算法— Raft VS Paxos (待学习)</h2><h3 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h3><blockquote><p>Paxos算法，该算法是通过将共识直接应用于构建分布式系统的状态机方法而获得的，这种方法应该是众所周知的，因为它可能是分布式系统理论中最常被引用的文章的主题</p></blockquote><h3 id="PAXOS"><a href="#PAXOS" class="headerlink" title="PAXOS"></a>PAXOS</h3><ul><li><a href="https://www.cnblogs.com/linbingdong/p/6253479.html">《分布式系列文章——Paxos算法原理与推导》</a></li><li><a href="https://blog.csdn.net/u010039929/article/details/70171672">《Paxos–&gt;Fast Paxos–&gt;Zookeeper分析》</a></li><li><a href="https://www.cnblogs.com/leesf456/p/6012777.html">《【分布式】Zookeeper与Paxos》</a></li></ul><p>​Paxos算法分为<strong>两个阶段</strong>。具体如下：</p><ul><li><p><strong>阶段一：</strong></p><p>(a) Proposer选择一个<strong>提案编号N</strong>，然后向<strong>半数以上</strong>的Acceptor发送编号为N的<strong>Prepare请求</strong>。</p><p>(b) 如果一个Acceptor收到一个编号为N的Prepare请求，且N<strong>大于</strong>该Acceptor已经<strong>响应过的</strong>所有<strong>Prepare请求</strong>的编号，那么它就会将它已经<strong>接受过的编号最大的提案（如果有的话）</strong>作为响应反馈给Proposer，同时该Acceptor承诺<strong>不再接受</strong>任何<strong>编号小于N的提案</strong>。</p></li><li><p><strong>阶段二：</strong></p><p>(a) 如果Proposer收到<strong>半数以上</strong>Acceptor对其发出的编号为N的Prepare请求的<strong>响应</strong>，那么它就会发送一个针对**[N,V]提案<strong>的</strong>Accept请求<strong>给</strong>半数以上<strong>的Acceptor。注意：V就是收到的</strong>响应<strong>中</strong>编号最大的提案的value<strong>，如果响应中</strong>不包含任何提案<strong>，那么V就由Proposer</strong>自己决定**。</p><p>(b) 如果Acceptor收到一个针对编号为N的提案的Accept请求，只要该Acceptor<strong>没有</strong>对编号<strong>大于N</strong>的<strong>Prepare请求</strong>做出过<strong>响应</strong>，它就<strong>接受该提案</strong>。</p></li></ul><img src="/2024/03/18/CAP/1705063445724.png" class="" width="1705063445724"><img src="/2024/03/18/CAP/1705063471895.png" class="" width="1705063471895"><img src="/2024/03/18/CAP/1705063502096.png" class="" width="1705063502096"><p>通过选取<strong>主Proposer</strong>，就可以保证Paxos算法的活性。至此，我们得到一个<strong>既能保证安全性，又能保证活性</strong>的<strong>分布式一致性算法</strong>——<strong>Paxos算法</strong>。</p><h3 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a>Raft</h3><blockquote><p>虽然 Raft 的论文比 Paxos 简单版论文还容易读了，但论文依然发散的比较多，相对冗长。读完后掩卷沉思觉得还是整理一下才会更牢靠，变成真正属于自己的。这里我就借助前面黑白棋落子里第一种极简思维来描述和概念验证下 Raft 协议的工作方式。</p></blockquote><p><a href="https://www.cnblogs.com/mindwind/p/5231986.html">Raft 为什么是更易理解的分布式一致性算法 - mindwind - 博客园 (cnblogs.com)</a></p><p>在一个由 Raft 协议组织的集群中有三类角色：</p><ol><li>Leader（领袖）</li><li>Follower（群众）</li><li>Candidate（候选人）</li></ol><p>就像一个民主社会，领袖由民众投票选出。刚开始没有领袖，所有集群中的参与者都是群众，那么首先开启一轮大选，在大选期间所有群众都能参与竞选，这时所有群众的角色就变成了候选人，民主投票选出领袖后就开始了这届领袖的任期，然后选举结束，所有除领袖的候选人又变回群众角色服从领袖领导。这里提到一个概念「任期」，用术语 Term 表达。关于 Raft 协议的核心概念和术语就这么多而且和现实民主制度非常匹配，所以很容易理解。三类角色的变迁图如下，结合后面的选举过程来看很容易理解。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redsync</title>
      <link href="/2024/03/11/redsync/"/>
      <url>/2024/03/11/redsync/</url>
      
        <content type="html"><![CDATA[<h1 id="了解什么是redsync"><a href="#了解什么是redsync" class="headerlink" title="了解什么是redsync"></a>了解什么是redsync</h1><blockquote><p> 分析参考：<a href="https://zhuanlan.zhihu.com/p/631362580">https://zhuanlan.zhihu.com/p/631362580</a></p><p> Github仓库：<a href="https://github.com/go-redsync/redsync">https://github.com/go-redsync/redsync</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>analytics</title>
      <link href="/2024/02/18/analytics/"/>
      <url>/2024/02/18/analytics/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
